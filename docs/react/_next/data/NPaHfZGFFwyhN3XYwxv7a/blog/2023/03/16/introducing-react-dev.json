{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#tldr\",\"depth\":2,\"text\":\"tl;dr \"},{\"url\":\"#new-site-new-domain-new-homepage\",\"depth\":2,\"text\":\"新网站，新域名，新主页 \"},{\"url\":\"#going-all-in-on-modern-react-with-hooks\",\"depth\":2,\"text\":\"进入使用 Hook 的现代 React \"},{\"url\":\"#quick-start\",\"depth\":2,\"text\":\"快速入门 \"},{\"url\":\"#learn-react-step-by-step\",\"depth\":2,\"text\":\"一步步学习 React \"},{\"url\":\"#check-your-understanding-with-challenges\",\"depth\":3,\"text\":\"使用挑战（challenge）检查你的理解 \"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"},{\"url\":\"#build-an-intuition-with-diagrams-and-illustrations\",\"depth\":3,\"text\":\"通过图表和插图来建立直觉 \"},{\"url\":\"#a-new-detailed-api-reference\",\"depth\":2,\"text\":\"新的并且更细致的 API 参考 \"},{\"url\":\"#whats-next\",\"depth\":2,\"text\":\"接下来还有什么 \"},{\"url\":\"#who-worked-on-this\",\"depth\":2,\"text\":\"贡献者 \"}]","content":"[[\"$r\",\"MaxWidth\",\"42\",{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"2023 年 3 月 16 日 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/dan_abramov\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Dan Abramov\"}],\" 与 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/rachelnabors\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Rachel Nabors\"}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"今天，我们非常高兴推出 react.dev，React 及其文档的新家。在本文中，我们想带你参观新网站。\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"tldr\",\"children\":\"tl;dr \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"新的 React 文档网站（\",[\"$r\",\"a\",null,{\"href\":\"https://react.dev\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"react.dev\"}],\"）将介绍使用函数式组件和 Hook 的现代 React。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"新网站包括了图表、插图、挑战和超过 600 个新的交互式示例。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"旧的 React 文档网站现在已经迁移到 \",[\"$r\",\"a\",null,{\"href\":\"https://legacy.reactjs.org\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"legacy.reactjs.org\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"new-site-new-domain-new-homepage\",\"children\":\"新网站，新域名，新主页 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"首先，介绍一些小的背景。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了庆祝新文档的发布，更重要的是为了清晰区分新旧内容，我们已经将域名更改为更短的 \",[\"$r\",\"a\",null,{\"href\":\"https://react.dev\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"react.dev\"}],\"；旧的 \",[\"$r\",\"a\",null,{\"href\":\"https://reactjs.org\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"reactjs.org\"}],\" 域名现在将重定向到此处。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"旧的 React 文档现在已经存档于 \",[\"$r\",\"a\",null,{\"href\":\"https://legacy.reactjs.org\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"legacy.reactjs.org\"}],\"。以避免“破坏网络”，所有现有的指向旧内容的链接将自动重定向到那里，但是旧网站将不会再得到新的更新。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"不敢相信，React 很快就要十岁了。在 JavaScript 的年代里，这就像整整一个世纪！我们 \",[\"$r\",\"a\",null,{\"href\":\"https://react.dev\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"更新了 React 主页\"}],\"，以反映我们为什么认为 React 是创建用户界面的绝佳方式，并更新了入门指南，更突出地提到基于现代 React 的框架。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你还没有看过新主页，请快去看看！\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"going-all-in-on-modern-react-with-hooks\",\"children\":\"进入使用 Hook 的现代 React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当 React 在 2018 年发布 Hook 时，Hook 文档假定读者熟悉类组件。这有助于社区非常迅速地采用 Hook，但是一段时间后，旧的文档无法为新读者服务，因为新读者不得不学习两次 React：一次是使用类式组件，然后再学习在函数式组件中使用 Hook。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"新文档从一开始就使用 Hook 来介绍 React\"}],\"。新文档分为两个主要部分：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/learn\",\"children\":\"学习 React\"}]}],\" 是一个自学课程，从头开始介绍 React。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference\",\"children\":\"API 参考\"}]}],\" 提供了每个 React API 的详细信息和使用示例。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"让我们更仔细地看看可以从每个部分中找到什么。\"}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"仍有一些罕见的类式组件尚未有基于 Hook 的替代品。React 仍然支持类式组件，并且在新网站的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/legacy\",\"children\":\"legacy API\"}],\" 部分中有文档记录。\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"quick-start\",\"children\":\"快速入门 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"学习部分从 \",[\"$r\",\"a\",null,{\"href\":\"/learn\",\"children\":\"快速入门\"}],\" 页面开始。它是 React 的一个简短介绍性导览，介绍了诸如组件、props 和 state 等概念，但并不详细介绍如何使用它们。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你喜欢通过实践来学习，我们建议你接下来查看 \",[\"$r\",\"a\",null,{\"href\":\"/learn/tutorial-tic-tac-toe\",\"children\":\"井字棋教程\"}],\"。它会带领你一步步构建一个小游戏，同时介绍你每天都会用到的技能。这是你将要构建的内容：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nfunction Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    onPlay(nextSquares);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default function Game() {\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const [currentMove, setCurrentMove] = useState(0);\\n  const xIsNext = currentMove % 2 === 0;\\n  const currentSquares = history[currentMove];\\n\\n  function handlePlay(nextSquares) {\\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\\n    setHistory(nextHistory);\\n    setCurrentMove(nextHistory.length - 1);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    setCurrentMove(nextMove);\\n  }\\n\\n  const moves = history.map((squares, move) => {\\n    let description;\\n    if (move > 0) {\\n      description = 'Go to move #' + move;\\n    } else {\\n      description = 'Go to game start';\\n    }\\n    return (\\n      <li key={move}>\\n        <button onClick={() => jumpTo(move)}>{description}</button>\\n      </li>\\n    );\\n  });\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{moves}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"70\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"我们还想强调一下 \",[\"$r\",\"a\",null,{\"href\":\"/learn/thinking-in-react\",\"children\":\"React 哲学\"}],\" ——这是许多人理解 React 的教程。\",[\"$r\",\"strong\",null,{\"children\":\"我们使用了函数式组件和 Hook 更新了这两个经典教程\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"上面的例子使用了 sandbox。我们在整个网站上添加了超过 600 个 sandbox。你可以编辑所有的 sandbox，或者点击右上角的 Fork 按钮，然后在单独的标签页中打开它。sandbox 可以让你快速体验 React API，探索你的想法并检查你的理解。\"}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"learn-react-step-by-step\",\"children\":\"一步步学习 React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们希望世界上每个人都有平等机会自学 React。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这就是为什么“学习”部分被组织成一个自学课程的章节。前两章描述了 React 的基本知识。如果你是初次尝试 React，或者想要刷新你对 React 的记忆，可以从这里开始：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/learn/describing-the-ui\",\"children\":\"描述 UI\"}]}],\" 章节介绍了如何使用组件显示信息。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/learn/adding-interactivity\",\"children\":\"添加交互性\"}]}],\" 章节介绍了如何在响应用户输入时更新屏幕。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"接下来的两章持续深入，将带你了解更棘手的部分：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/learn/managing-state\",\"children\":\"管理状态\"}]}],\" 章节介绍了如何在应用程序变得越来越复杂时组织逻辑。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/learn/escape-hatches\",\"children\":\"脱围机制\"}]}],\" 章节介绍了如何“走出”React，并在何时做出最明智的决策。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"每个章节都由几个相关的页面组成。其中大部分页面将介绍特定的技能或技术，例如 \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"使用 JSX 编写标记\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state\",\"children\":\"更新状态中的对象\"}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"/learn/sharing-state-between-components\",\"children\":\"在组件间共享状态\"}],\"。一些页面聚焦于解释一个概念，例如 \",[\"$r\",\"a\",null,{\"href\":\"/learn/render-and-commit\",\"children\":\"渲染和提交\"}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"/learn/state-as-a-snapshot\",\"children\":\"将状态作为快照（snapshot）\"}],\"。还有一些页面如 \",[\"$r\",\"a\",null,{\"href\":\"/learn/you-might-not-need-an-effect\",\"children\":\"你可能不需要 Effect\"}],\" 是基于我们多年的经验而分享的建议。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你不必完全按顺序阅读这些章节，谁有这个时间呢？！不过也许你可以。学习部分的页面只依赖于早期页面介绍的概念。如果你想像读书一样阅读它，那就去吧！\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"check-your-understanding-with-challenges\",\"children\":\"使用挑战（challenge）检查你的理解 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"“学习”章节的大多数页面都以一些挑战结尾，以检查你的理解情况。例如以下是有关 \",[\"$r\",\"a\",null,{\"href\":\"/learn/conditional-rendering#challenges\",\"children\":\"条件渲染\"}],\" 页面上的一些挑战。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"除非你真的如此想，不然不必现在就解决它们！\"}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"noTitle\":true,\"children\":[[\"$r\",\"h4\",null,{\"id\":\"show-an-icon-for-incomplete-items-with--\",\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"? :\"}],\" 显示不完整 item 的图标 \"]}],[\"$r\",\"p\",null,{\"children\":[\"如果 \",[\"$r\",\"code\",null,{\"children\":\"isPacked\"}],\" 不为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，使用条件运算符（\",[\"$r\",\"code\",null,{\"children\":\"cond ? a : b\"}],\"）渲染 ❌。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\n  return (\\n    <li className=\\\"item\\\">\\n      {name} {isPacked && '✔'}\\n    </li>\\n  );\\n}\\n\\nexport default function PackingList() {\\n  return (\\n    <section>\\n      <h1>Sally Ride's Packing List</h1>\\n      <ul>\\n        <Item \\n          isPacked={true} \\n          name=\\\"Space suit\\\" \\n        />\\n        <Item \\n          isPacked={true} \\n          name=\\\"Helmet with a golden leaf\\\" \\n        />\\n        <Item \\n          isPacked={false} \\n          name=\\\"Photo of Tam\\\" \\n        />\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{\"children\":[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, isPacked }) {\\n  return (\\n    <li className=\\\"item\\\">\\n      {name} {isPacked ? '✔' : '❌'}\\n    </li>\\n  );\\n}\\n\\nexport default function PackingList() {\\n  return (\\n    <section>\\n      <h1>Sally Ride's Packing List</h1>\\n      <ul>\\n        <Item \\n          isPacked={true} \\n          name=\\\"Space suit\\\" \\n        />\\n        <Item \\n          isPacked={true} \\n          name=\\\"Helmet with a golden leaf\\\" \\n        />\\n        <Item \\n          isPacked={false} \\n          name=\\\"Photo of Tam\\\" \\n        />\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}]}]}],[\"$r\",\"h4\",null,{\"id\":\"show-the-item-importance-with-\",\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\" 展示 item 的重要性 \"]}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，每个 \",[\"$r\",\"code\",null,{\"children\":\"Item\"}],\" 组件都会接收一个数字类型的 \",[\"$r\",\"code\",null,{\"children\":\"importance\"}],\" 属性。使用 \",[\"$r\",\"code\",null,{\"children\":\"&&\"}],\" 运算符来渲染斜体 “\",[\"$r\",\"em\",null,{\"children\":\"(Importance: X)\"}],\"“，但只有在 \",[\"$r\",\"code\",null,{\"children\":\"importance\"}],\" 属性不为零时才渲染。你的列表应该看起来像下面一样：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Space suit \",[\"$r\",\"em\",null,{\"children\":\"(Importance: 9)\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Helmet with a golden leaf\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"Photo of Tam \",[\"$r\",\"em\",null,{\"children\":\"(Importance: 6)\"}]]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"不要忘记在 label 之间添加一个空格！\"}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, importance }) {\\n  return (\\n    <li className=\\\"item\\\">\\n      {name}\\n    </li>\\n  );\\n}\\n\\nexport default function PackingList() {\\n  return (\\n    <section>\\n      <h1>Sally Ride's Packing List</h1>\\n      <ul>\\n        <Item \\n          importance={9} \\n          name=\\\"Space suit\\\" \\n        />\\n        <Item \\n          importance={0} \\n          name=\\\"Helmet with a golden leaf\\\" \\n        />\\n        <Item \\n          importance={6} \\n          name=\\\"Photo of Tam\\\" \\n        />\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"应该这样来实现：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Item({ name, importance }) {\\n  return (\\n    <li className=\\\"item\\\">\\n      {name}\\n      {importance > 0 && ' '}\\n      {importance > 0 &&\\n        <i>(Importance: {importance})</i>\\n      }\\n    </li>\\n  );\\n}\\n\\nexport default function PackingList() {\\n  return (\\n    <section>\\n      <h1>Sally Ride's Packing List</h1>\\n      <ul>\\n        <Item \\n          importance={9} \\n          name=\\\"Space suit\\\" \\n        />\\n        <Item \\n          importance={0} \\n          name=\\\"Helmet with a golden leaf\\\" \\n        />\\n        <Item \\n          importance={6} \\n          name=\\\"Photo of Tam\\\" \\n        />\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"p\",null,{\"children\":[\"请注意，你必须写成 \",[\"$r\",\"code\",null,{\"children\":\"importance > 0 && ...\"}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"importance && ...\"}],\"，这样如果 \",[\"$r\",\"code\",null,{\"children\":\"importance\"}],\" 的值为 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 时，就不会将 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 作为结果进行渲染！\"]}],[\"$r\",\"p\",null,{\"children\":[\"在这个解决方案中，使用了两个独立的条件来在名称和 importance label 之间插入一个空格。或者，你可以使用带有前导空格的 Fragment：\",[\"$r\",\"code\",null,{\"children\":\"importance > 0 && <> <i>...</i></>\"}],\"，或者在 \",[\"$r\",\"code\",null,{\"children\":\"<i>\"}],\" 标签内立即添加一个空格：\",[\"$r\",\"code\",null,{\"children\":\"importance > 0 && <i> ...</i>\"}],\"。\"]}]]}]]}],[\"$r\",\"MaxWidth\",\"82\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"请注意左下角的“显示解决方案”按钮。如果你想要检查自己的代码，它会很有用！\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"build-an-intuition-with-diagrams-and-illustrations\",\"children\":\"通过图表和插图来建立直觉 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当我们无法弄清楚如何仅用代码和文字来解释某些内容时，我们添加了有助于提供一些直觉的图表。例如，下面是 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"保存和重置 state\"}],\" 中的图表之一：\"]}],\"\\n\",[\"$r\",\"Diagram\",null,{\"name\":\"preserving_state_diff_same_pt1\",\"height\":350,\"width\":794,\"alt\":\"图表包含三个部分，每个部分之间有一个箭头过渡。 第一部分包含一个标记为 `div` 的 React 组件，其中有一个标记为 `section` 的子组件，该组件有一个标记为 `Counter` 的子组件，其中包含一个标记为 `count`、值为 3 的 state 气泡。中间部分具有相同的 `div` 父组件，但子组件现已被删除，由黄色“proof”图像指示。第三部分再次具有相同的 `div` 父级，现在有一个由黄色突出显示并且标记为 `div` 的新子级，还有一个标记为 `Counter` 的新子级，其中包含一个标记为 `count` 且值为 0 的 state 气泡。她们都使用黄色进行了高亮。\",\"children\":[\"$r\",\"p\",null,{\"children\":[\"当 \",[\"$r\",\"code\",null,{\"children\":\"section\"}],\" 被改变为 \",[\"$r\",\"code\",null,{\"children\":\"div\"}],\" 时，\",[\"$r\",\"code\",null,{\"children\":\"section\"}],\" 会被删除而新的 \",[\"$r\",\"code\",null,{\"children\":\"div\"}],\" 会被添加。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在文档中还有一些插图——这是其中一个 \",[\"$r\",\"a\",null,{\"href\":\"/learn/render-and-commit#epilogue-browser-paint\",\"children\":\"浏览器绘制屏幕的示意图\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"Illustration\",null,{\"alt\":\"浏览器正在绘制“带有卡片元素的静物画”\",\"src\":\"/images/docs/illustrations/i_browser-paint.png\"}],[\"$r\",\"MaxWidth\",\"98\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们已经与浏览器厂商确认，这个描绘是 100% 科学准确的。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"a-new-detailed-api-reference\",\"children\":\"新的并且更细致的 API 参考 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react\",\"children\":\"API 参考\"}],\" 中，每个 React API 现在都有一个专门的页面。这包括各种类型的 API：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"内置 Hook，比如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useState\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"内置组件，比如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"内置浏览器组件，比如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/input\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<input>\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"面向框架的 API，比如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToReadableStream\",\"children\":[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"其他 React API，比如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你会注意到，每个 API 页面至少被分成两个部分：\",[\"$r\",\"strong\",null,{\"children\":\"参考\"}],\" 和 \",[\"$r\",\"strong\",null,{\"children\":\"用法\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#reference\",\"children\":\"参考\"}],\" 通过列举参数与返回值描述了正式的 API。这一部分比较简洁，但如果你不熟悉该 API，你可能会感觉有点抽象。“参考”描述了一个 API 做什么，但不是如何使用它。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#usage\",\"children\":\"用法\"}],\" 展示了为什么需要以及如何在实践中使用这个 API，就像同事或朋友可能会解释的那样。它展示了 React 团队设计每个 API 的 \",[\"$r\",\"strong\",null,{\"children\":\"典型使用场景\"}],\"。我们添加了彩色代码片段、使用不同 API 的示例以及可以复制和粘贴的示例。\"]}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"useState 的基础示例\",\"titleId\":\"examples-basic\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"counter-number\",\"children\":\"数字计数 \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"count\"}],\" state 变量保存了一个数字。点击按钮会将其递增。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Counter() {\\n  const [count, setCount] = useState(0);\\n\\n  function handleClick() {\\n    setCount(count + 1);\\n  }\\n\\n  return (\\n    <button onClick={handleClick}>\\n      你点击了 {count} 次\\n    </button>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"text-field-string\",\"children\":\"输入文本（字符串） \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"text\"}],\" state 变量保存一个字符串。当你输入时，\",[\"$r\",\"code\",null,{\"children\":\"handleChange\"}],\" 从浏览器输入 DOM 元素中读取最新的输入值，并调用 \",[\"$r\",\"code\",null,{\"children\":\"setText\"}],\" 来更新 state。这使得你可以在下方显示当前的 \",[\"$r\",\"code\",null,{\"children\":\"text\"}],\"。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function MyInput() {\\n  const [text, setText] = useState('你好');\\n\\n  function handleChange(e) {\\n    setText(e.target.value);\\n  }\\n\\n  return (\\n    <>\\n      <input value={text} onChange={handleChange} />\\n      <p>你输入了：{text}</p>\\n      <button onClick={() => setText('你好')}>\\n        重置\\n      </button>\\n    </>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"checkbox-boolean\",\"children\":\"多选框（布尔值） \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"liked\"}],\" state 变量保存一个布尔值。当你点击输入框时，\",[\"$r\",\"code\",null,{\"children\":\"setLiked\"}],\" 用浏览器复选框输入是否被选中更新 \",[\"$r\",\"code\",null,{\"children\":\"liked\"}],\" state 变量。\",[\"$r\",\"code\",null,{\"children\":\"liked\"}],\" 变量被用于渲染复选框下方的文本。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function MyCheckbox() {\\n  const [liked, setLiked] = useState(true);\\n\\n  function handleChange(e) {\\n    setLiked(e.target.checked);\\n  }\\n\\n  return (\\n    <>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={liked}\\n          onChange={handleChange}\\n        />\\n        我喜欢这个\\n      </label>\\n      <p>你 {liked ? '喜欢' : '不喜欢'} 这个。</p>\\n    </>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"form-two-variables\",\"children\":\"表单（使用两个 state） \"}],[\"$r\",\"p\",null,{\"children\":\"你可以在同一个组件中定义两个 state 变量。每一个 state 变量都是完全独立的。\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [name, setName] = useState('Taylor');\\n  const [age, setAge] = useState(42);\\n\\n  return (\\n    <>\\n      <input\\n        value={name}\\n        onChange={e => setName(e.target.value)}\\n      />\\n      <button onClick={() => setAge(age + 1)}>\\n        增大年龄。\\n      </button>\\n      <p>你好，{name}。你现在 {age} 岁。</p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { display: block; margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一些 API 页面还包括针对常见问题的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect#troubleshooting\",\"children\":\"故障排除\"}],\" 和针对弃用 API 的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/findDOMNode#alternatives\",\"children\":\"替代方案\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们希望 API 参考不仅仅是用来查找参数，还可以用来查看任何给定 API 可以做的所有不同事情以及与其他 API 相关联的方法。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"whats-next\",\"children\":\"接下来还有什么 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"对新文档的介绍到此结束！浏览一下新网站，看看你喜欢或不喜欢什么，欢迎在 \",[\"$r\",\"a\",null,{\"href\":\"https://www.surveymonkey.co.uk/r/PYRPF3X\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"匿名调查\"}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactjs/reactjs.org/issues\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"问题跟踪器\"}],\" 中提供反馈。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们承认这个项目花费了很长时间才发布。我们希望 React 社区保持应该拥有的高质量标准。在编写这些文档和创建所有示例的过程中，我们发现了一些自己解释中的错误、React 中的错误，甚至是 React 设计中的空缺，我们现在正在努力解决。我们希望新文档将帮助我们在未来将 React 本身保持在更高的标准上。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们听到了许多想要扩展网站内容和功能的请求，例如：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"为所有示例提供 TypeScript 版本；\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"创建更新的性能、测试和可访问性指南；\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"独立记录 React 服务器组件，而不是依赖于支持它们的框架；\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"与我们的国际社区合作，将新文档翻译成各种语言；\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在新网站中添加缺少的功能（例如，此博客的 RSS）\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://react.dev/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"react.dev\"}],\" 已经发布，我们希望将重心从“追赶”第三方 React 教育资源转向添加新信息并进一步改进我们的新网站。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们认为现在是学习 React 的最好的时机。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"who-worked-on-this\",\"children\":\"贡献者 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 React 团队中，\",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/rachelnabors/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Rachel Nabors\"}],\" 领导了该项目并提供了插图，而 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/dan_abramov\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Dan Abramov\"}],\" 设计了课程。他们也共同撰写了大部分内容。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当然，没有一个这么大的项目是孤立进行的。我们有很多想要感谢的人！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/SylwiaVargas\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Sylwia Vargas\"}],\" 改进了我们的示例，而不是继续使用“foo/bar/baz”、kitten，和来自世界各地的科学家、艺术家和城市。\",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/Mappletons\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Maggie Appleton\"}],\" 将我们的涂鸦转化成了清晰的图表系统。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/mcc_abe\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"David McCabe\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/sophiebits\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Sophie Alpert\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/rickhanlonii\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Rick Hanlon\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/acdlite\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Andrew Clark\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/mattcarrollcode\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Matt Carroll\"}],\" 提供额外的写作贡献。我们还要感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/n_tepluhina\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Natalia Tepluhina\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/sebmarkbage\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Sebastian Markbåge\"}],\" 提供的想法和反馈。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/lebo\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Dan Lebowitz\"}],\" 设计了网站，\",[\"$r\",\"a\",null,{\"href\":\"https://dribbble.com/GradinarRazvan\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Razvan Gradinar\"}],\" 设计了 sandbox。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在开发方面，感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/jaredpalmer\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Jared Palmer\"}],\" 进行原型开发。感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/danecando\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Dane Grant\"}],\" 和来自 \",[\"$r\",\"a\",null,{\"href\":\"https://www.thisdot.co/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"ThisDotLabs\"}],\" 的 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/dustinsgoodman\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Dustin Goodman\"}],\" 为 UI 开发提供了支持。感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/CompuIves\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Ives van Hoorne\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/alexnmoldovan\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Alex Moldovan\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/JasperDeMoor\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Jasper De Moor\"}],\" 和来自 \",[\"$r\",\"a\",null,{\"href\":\"https://codesandbox.io/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"CodeSandbox\"}],\" 的 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/danilowoz\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Danilo Woznica\"}],\" 为集成 sandbox 做出了贡献。感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/rickhanlonii\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Rick Hanlon\"}],\" 进行开发和设计工作，完善我们的颜色和细节。感谢 \",[\"$r\",\"a\",null,{\"href\":\"https://www.strek.in/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Harish Kumar\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/lunaruan\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Luna Ruan\"}],\" 为网站添加新功能并帮助维护它。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"非常感谢那些自愿参加 alpha 和 beta 测试计划的人。你们的热情和宝贵的反馈帮助我们塑造了这些文档。特别感谢我们的 beta 测试人员 \",[\"$r\",\"a\",null,{\"href\":\"https://twitter.com/debs_obrien\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Debbie O’Brien\"}],\"，她在 React Conf 2021 上分享了她使用 React 文档的经验。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"最后，感谢 React 社区的启发，是你们促使我们完成了这个新的项目。我们希望新文档将帮助大家使用 React 构建任何你想要的用户界面。\"}]]}]]","meta":{"title":"介绍 react.dev"}},"__N_SSG":true}