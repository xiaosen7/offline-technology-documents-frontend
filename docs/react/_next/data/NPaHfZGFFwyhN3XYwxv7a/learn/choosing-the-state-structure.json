{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#principles-for-structuring-state\",\"depth\":2,\"text\":\"构建 state 的原则 \"},{\"url\":\"#group-related-state\",\"depth\":2,\"text\":\"合并关联的 state \"},{\"url\":\"#avoid-contradictions-in-state\",\"depth\":2,\"text\":\"避免矛盾的 state \"},{\"url\":\"#avoid-redundant-state\",\"depth\":2,\"text\":\"避免冗余的 state \"},{\"url\":\"#avoid-duplication-in-state\",\"depth\":2,\"text\":\"避免重复的 state \"},{\"url\":\"#avoid-deeply-nested-state\",\"depth\":2,\"text\":\"避免深度嵌套的 state \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"28\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"构建良好的 state 可以让组件变得易于修改和调试，而不会经常出错。以下是你在构建 state 时应该考虑的一些建议。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"使用单个 state 变量还是多个 state 变量\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"组织 state 时应避免的内容\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何解决 state 结构中的常见问题\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"principles-for-structuring-state\",\"children\":\"构建 state 的原则 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你编写一个存有 state 的组件时，你需要选择使用多少个 state 变量以及它们都是怎样的数据格式。尽管选择次优的 state 结构下也可以编写正确的程序，但有几个原则可以指导您做出更好的决策：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"合并关联的 state\"}],\"。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"避免互相矛盾的 state\"}],\"。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"避免冗余的 state\"}],\"。如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应将这些信息放入该组件的 state 中。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"避免重复的 state\"}],\"。当同一数据在多个 state 变量之间或在多个嵌套对象中重复时，这会很难保持它们同步。应尽可能减少重复。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"避免深度嵌套的 state\"}],\"。深度分层的 state 更新起来不是很方便。如果可能的话，最好以扁平化方式构建 state。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这些原则背后的目标是 \",[\"$r\",\"strong\",null,{\"children\":\"使 state 易于更新而不引入错误\"}],\"。从 state 中删除冗余和重复数据有助于确保所有部分保持同步。这类似于数据库工程师想要 \",[\"$r\",\"a\",null,{\"href\":\"https://docs.microsoft.com/zh-CN/office/troubleshoot/access/database-normalization-description\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"“规范化”数据库结构\"}],\"，以减少出现错误的机会。用爱因斯坦的话说，\",[\"$r\",\"strong\",null,{\"children\":\"“让你的状态尽可能简单，但不要过于简单。”\"}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在让我们来看看这些原则在实际中是如何应用的。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"group-related-state\",\"children\":\"合并关联的 state \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"有时候你可能会不确定是使用单个 state 变量还是多个 state 变量。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你会像下面这样做吗？\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [x, setX] = useState(0);\\nconst [y, setY] = useState(0);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"或这样？\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [position, setPosition] = useState({ x: 0, y: 0 });\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"从技术上讲，你可以使用其中任何一种方法。但是，\",[\"$r\",\"strong\",null,{\"children\":\"如果某两个 state 变量总是一起变化，则将它们统一成一个 state 变量可能更好\"}],\"。这样你就不会忘记让它们始终保持同步，就像下面这个例子中，移动光标会同时更新红点的两个坐标：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function MovingDot() {\\n  const [position, setPosition] = useState({\\n    x: 0,\\n    y: 0\\n  });\\n  return (\\n    <div\\n      onPointerMove={e => {\\n        setPosition({\\n          x: e.clientX,\\n          y: e.clientY\\n        });\\n      }}\\n      style={{\\n        position: 'relative',\\n        width: '100vw',\\n        height: '100vh',\\n      }}>\\n      <div style={{\\n        position: 'absolute',\\n        backgroundColor: 'red',\\n        borderRadius: '50%',\\n        transform: `translate(${position.x}px, ${position.y}px)`,\\n        left: -10,\\n        top: -10,\\n        width: 20,\\n        height: 20,\\n      }} />\\n    </div>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { margin: 0; padding: 0; height: 250px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"38\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"另一种情况是，你将数据整合到一个对象或一个数组中时，你不知道需要多少个 state 片段。例如，当你有一个用户可以添加自定义字段的表单时，这将会很有帮助。\"}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"如果你的 state 变量是一个对象时，请记住，\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state\",\"children\":\"你不能只更新其中的一个字段\"}],\" 而不显式复制其他字段。例如，在上面的例子中，你不能写成 \",[\"$r\",\"code\",null,{\"children\":\"setPosition({ x: 100 })\"}],\"，因为它根本就没有 \",[\"$r\",\"code\",null,{\"children\":\"y\"}],\" 属性! 相反，如果你想要仅设置 \",[\"$r\",\"code\",null,{\"children\":\"x\"}],\"，则可执行 \",[\"$r\",\"code\",null,{\"children\":\"setPosition({ ...position, x: 100 })\"}],\"，或将它们分成两个 state 变量，并执行 \",[\"$r\",\"code\",null,{\"children\":\"setX(100)\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"avoid-contradictions-in-state\",\"children\":\"避免矛盾的 state \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"下面是带有 \",[\"$r\",\"code\",null,{\"children\":\"isSending\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"isSent\"}],\" 两个 state 变量的酒店反馈表单：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function FeedbackForm() {\\n  const [text, setText] = useState('');\\n  const [isSending, setIsSending] = useState(false);\\n  const [isSent, setIsSent] = useState(false);\\n\\n  async function handleSubmit(e) {\\n    e.preventDefault();\\n    setIsSending(true);\\n    await sendMessage(text);\\n    setIsSending(false);\\n    setIsSent(true);\\n  }\\n\\n  if (isSent) {\\n    return <h1>Thanks for feedback!</h1>\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <p>How was your stay at The Prancing Pony?</p>\\n      <textarea\\n        disabled={isSending}\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <br />\\n      <button\\n        disabled={isSending}\\n        type=\\\"submit\\\"\\n      >\\n        Send\\n      </button>\\n      {isSending && <p>Sending...</p>}\\n    </form>\\n  );\\n}\\n\\n// 假装发送一条消息。\\nfunction sendMessage(text) {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, 2000);\\n  });\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"44\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"尽管这段代码是有效的，但也会让一些 state “极难处理”。例如，如果你忘记同时调用 \",[\"$r\",\"code\",null,{\"children\":\"setIsSent\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"setIsSending\"}],\"，则可能会出现 \",[\"$r\",\"code\",null,{\"children\":\"isSending\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"isSent\"}],\" 同时为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 的情况。你的组件越复杂，你就越难理解发生了什么。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"因为 \",[\"$r\",\"code\",null,{\"children\":\"isSending\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"isSent\"}],\" 不应同时为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，所以最好用一个 \",[\"$r\",\"code\",null,{\"children\":\"status\"}],\" 变量来代替它们，这个 state 变量可以采取三种有效状态其中之一\"]}],\"：\",[\"$r\",\"code\",null,{\"children\":\"'typing'\"}],\" (初始), \",[\"$r\",\"code\",null,{\"children\":\"'sending'\"}],\", 和 \",[\"$r\",\"code\",null,{\"children\":\"'sent'\"}],\":\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function FeedbackForm() {\\n  const [text, setText] = useState('');\\n  const [status, setStatus] = useState('typing');\\n\\n  async function handleSubmit(e) {\\n    e.preventDefault();\\n    setStatus('sending');\\n    await sendMessage(text);\\n    setStatus('sent');\\n  }\\n\\n  const isSending = status === 'sending';\\n  const isSent = status === 'sent';\\n\\n  if (isSent) {\\n    return <h1>Thanks for feedback!</h1>\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <p>How was your stay at The Prancing Pony?</p>\\n      <textarea\\n        disabled={isSending}\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <br />\\n      <button\\n        disabled={isSending}\\n        type=\\\"submit\\\"\\n      >\\n        Send\\n      </button>\\n      {isSending && <p>Sending...</p>}\\n    </form>\\n  );\\n}\\n\\n// 假装发送一条消息。\\nfunction sendMessage(text) {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, 2000);\\n  });\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"58\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你仍然可以声明一些常量，以提高可读性：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const isSending = status === 'sending';\\nconst isSent = status === 'sent';\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"但它们不是 state 变量，所以你不必担心它们彼此失去同步。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"avoid-redundant-state\",\"children\":\"避免冗余的 state \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应该把这些信息放到该组件的 state 中。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如，以这个表单为例。它可以运行，但你能找到其中任何冗余的 state 吗？\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [firstName, setFirstName] = useState('');\\n  const [lastName, setLastName] = useState('');\\n  const [fullName, setFullName] = useState('');\\n\\n  function handleFirstNameChange(e) {\\n    setFirstName(e.target.value);\\n    setFullName(e.target.value + ' ' + lastName);\\n  }\\n\\n  function handleLastNameChange(e) {\\n    setLastName(e.target.value);\\n    setFullName(firstName + ' ' + e.target.value);\\n  }\\n\\n  return (\\n    <>\\n      <h2>Let’s check you in</h2>\\n      <label>\\n        First name:{' '}\\n        <input\\n          value={firstName}\\n          onChange={handleFirstNameChange}\\n        />\\n      </label>\\n      <label>\\n        Last name:{' '}\\n        <input\\n          value={lastName}\\n          onChange={handleLastNameChange}\\n        />\\n      </label>\\n      <p>\\n        Your ticket will be issued to: <b>{fullName}</b>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-bottom: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"64\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个表单有三个 state 变量：\",[\"$r\",\"code\",null,{\"children\":\"firstName\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"lastName\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"fullName\"}],\"。然而，\",[\"$r\",\"code\",null,{\"children\":\"fullName\"}],\" 是多余的。\",[\"$r\",\"strong\",null,{\"children\":[\"在渲染期间，你始终可以从 \",[\"$r\",\"code\",null,{\"children\":\"firstName\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"lastName\"}],\" 中计算出 \",[\"$r\",\"code\",null,{\"children\":\"fullName\"}],\"，因此需要把它从 state 中删除。\"]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以这样做：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [firstName, setFirstName] = useState('');\\n  const [lastName, setLastName] = useState('');\\n\\n  const fullName = firstName + ' ' + lastName;\\n\\n  function handleFirstNameChange(e) {\\n    setFirstName(e.target.value);\\n  }\\n\\n  function handleLastNameChange(e) {\\n    setLastName(e.target.value);\\n  }\\n\\n  return (\\n    <>\\n      <h2>Let’s check you in</h2>\\n      <label>\\n        First name:{' '}\\n        <input\\n          value={firstName}\\n          onChange={handleFirstNameChange}\\n        />\\n      </label>\\n      <label>\\n        Last name:{' '}\\n        <input\\n          value={lastName}\\n          onChange={handleLastNameChange}\\n        />\\n      </label>\\n      <p>\\n        Your ticket will be issued to: <b>{fullName}</b>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-bottom: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"78\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里的 \",[\"$r\",\"code\",null,{\"children\":\"fullName\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"不是\"}],\" 一个 state 变量。相反，它是在渲染期间中计算出的：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const fullName = firstName + ' ' + lastName;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"因此，更改处理程序不需要做任何特殊操作来更新它。当你调用 \",[\"$r\",\"code\",null,{\"children\":\"setFirstName\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"setLastName\"}],\" 时，你会触发一次重新渲染，然后下一个 \",[\"$r\",\"code\",null,{\"children\":\"fullName\"}],\" 将从新数据中计算出来。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"don-t-mirror-props-in-state\",\"children\":\"不要在 state 中镜像 props \"}],[\"$r\",\"p\",null,{\"children\":\"以下代码是体现 state 冗余的一个常见例子：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Message({ messageColor }) {\\n  const [color, setColor] = useState(messageColor);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这里，一个 \",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" state 变量被初始化为 \",[\"$r\",\"code\",null,{\"children\":\"messageColor\"}],\" 的 prop 值。这段代码的问题在于，\",[\"$r\",\"strong\",null,{\"children\":[\"如果父组件稍后传递不同的 \",[\"$r\",\"code\",null,{\"children\":\"messageColor\"}],\" 值（例如，将其从 \",[\"$r\",\"code\",null,{\"children\":\"'blue'\"}],\" 更改为 \",[\"$r\",\"code\",null,{\"children\":\"'red'\"}],\"），则 \",[\"$r\",\"code\",null,{\"children\":\"color\"}]]}],\" state 变量\",[\"$r\",\"strong\",null,{\"children\":\"将不会更新！\"}],\" state 仅在第一次渲染期间初始化。\"]}],[\"$r\",\"p\",null,{\"children\":[\"这就是为什么在 state 变量中，“镜像”一些 prop 属性会导致混淆的原因。相反，你要在代码中直接使用 \",[\"$r\",\"code\",null,{\"children\":\"messageColor\"}],\" 属性。如果你想给它起一个更短的名称，请使用常量：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Message({ messageColor }) {\\n  const color = messageColor;\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"这种写法就不会与从父组件传递的属性失去同步。\"}],[\"$r\",\"p\",null,{\"children\":[\"只有当你 \",[\"$r\",\"strong\",null,{\"children\":\"想要\"}],\" 忽略特定 props 属性的所有更新时，将 props “镜像”到 state 才有意义。按照惯例，prop 名称以 \",[\"$r\",\"code\",null,{\"children\":\"initial\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"default\"}],\" 开头，以阐明该 prop 的新值将被忽略：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Message({ initialColor }) {\\n  // 这个 `color` state 变量用于保存 `initialColor` 的 **初始值**。\\n  // 对于 `initialColor` 属性的进一步更改将被忽略。\\n  const [color, setColor] = useState(initialColor);\\n\"}]}]]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"avoid-duplication-in-state\",\"children\":\"避免重复的 state \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面这个菜单列表组件可以让你在多种旅行小吃中选择一个：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nconst initialItems = [\\n  { title: 'pretzels', id: 0 },\\n  { title: 'crispy seaweed', id: 1 },\\n  { title: 'granola bar', id: 2 },\\n];\\n\\nexport default function Menu() {\\n  const [items, setItems] = useState(initialItems);\\n  const [selectedItem, setSelectedItem] = useState(\\n    items[0]\\n  );\\n\\n  return (\\n    <>\\n      <h2>What's your travel snack?</h2>\\n      <ul>\\n        {items.map(item => (\\n          <li key={item.id}>\\n            {item.title}\\n            {' '}\\n            <button onClick={() => {\\n              setSelectedItem(item);\\n            }}>Choose</button>\\n          </li>\\n        ))}\\n      </ul>\\n      <p>You picked {selectedItem.title}.</p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"84\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当前，它将所选元素作为对象存储在 \",[\"$r\",\"code\",null,{\"children\":\"selectedItem\"}],\" state 变量中。然而，这并不好：\",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"selectedItem\"}],\" 的内容与 \",[\"$r\",\"code\",null,{\"children\":\"items\"}],\" 列表中的某个项是同一个对象。\"]}],\" 这意味着关于该项本身的信息在两个地方产生了重复。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为什么这是个问题？让我们使每个项目都可以编辑：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nconst initialItems = [\\n  { title: 'pretzels', id: 0 },\\n  { title: 'crispy seaweed', id: 1 },\\n  { title: 'granola bar', id: 2 },\\n];\\n\\nexport default function Menu() {\\n  const [items, setItems] = useState(initialItems);\\n  const [selectedItem, setSelectedItem] = useState(\\n    items[0]\\n  );\\n\\n  function handleItemChange(id, e) {\\n    setItems(items.map(item => {\\n      if (item.id === id) {\\n        return {\\n          ...item,\\n          title: e.target.value,\\n        };\\n      } else {\\n        return item;\\n      }\\n    }));\\n  }\\n\\n  return (\\n    <>\\n      <h2>What's your travel snack?</h2> \\n      <ul>\\n        {items.map((item, index) => (\\n          <li key={item.id}>\\n            <input\\n              value={item.title}\\n              onChange={e => {\\n                handleItemChange(item.id, e)\\n              }}\\n            />\\n            {' '}\\n            <button onClick={() => {\\n              setSelectedItem(item);\\n            }}>Choose</button>\\n          </li>\\n        ))}\\n      </ul>\\n      <p>You picked {selectedItem.title}.</p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"90\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，如果你首先单击菜单上的“Choose” \",[\"$r\",\"strong\",null,{\"children\":\"然后\"}],\" 编辑它，\",[\"$r\",\"strong\",null,{\"children\":\"输入会更新，但底部的标签不会反映编辑内容。\"}],\" 这是因为你有重复的 state，并且你忘记更新了 \",[\"$r\",\"code\",null,{\"children\":\"selectedItem\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"尽管你也可以更新 \",[\"$r\",\"code\",null,{\"children\":\"selectedItem\"}],\"，但更简单的解决方法是消除重复项。在下面这个例子中，你将 \",[\"$r\",\"code\",null,{\"children\":\"selectedId\"}],\" 保存在 state 中，而不是在 \",[\"$r\",\"code\",null,{\"children\":\"selectedItem\"}],\" 对象中（它创建了一个与 \",[\"$r\",\"code\",null,{\"children\":\"items\"}],\" 内重复的对象），\",[\"$r\",\"strong\",null,{\"children\":\"然后\"}],\" 通过搜索 \",[\"$r\",\"code\",null,{\"children\":\"items\"}],\" 数组中具有该 ID 的项，以此获取 \",[\"$r\",\"code\",null,{\"children\":\"selectedItem\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nconst initialItems = [\\n  { title: 'pretzels', id: 0 },\\n  { title: 'crispy seaweed', id: 1 },\\n  { title: 'granola bar', id: 2 },\\n];\\n\\nexport default function Menu() {\\n  const [items, setItems] = useState(initialItems);\\n  const [selectedId, setSelectedId] = useState(0);\\n\\n  const selectedItem = items.find(item =>\\n    item.id === selectedId\\n  );\\n\\n  function handleItemChange(id, e) {\\n    setItems(items.map(item => {\\n      if (item.id === id) {\\n        return {\\n          ...item,\\n          title: e.target.value,\\n        };\\n      } else {\\n        return item;\\n      }\\n    }));\\n  }\\n\\n  return (\\n    <>\\n      <h2>What's your travel snack?</h2>\\n      <ul>\\n        {items.map((item, index) => (\\n          <li key={item.id}>\\n            <input\\n              value={item.title}\\n              onChange={e => {\\n                handleItemChange(item.id, e)\\n              }}\\n            />\\n            {' '}\\n            <button onClick={() => {\\n              setSelectedId(item.id);\\n            }}>Choose</button>\\n          </li>\\n        ))}\\n      </ul>\\n      <p>You picked {selectedItem.title}.</p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"108\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"state 过去常常是这样复制的：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"items = [{ id: 0, title: 'pretzels'}, ...]\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"selectedItem = {id: 0, title: 'pretzels'}\"}]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"改了之后是这样的：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"items = [{ id: 0, title: 'pretzels'}, ...]\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"selectedId = 0\"}]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"重复的 state 没有了，你只保留了必要的 state！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，如果你编辑 \",[\"$r\",\"strong\",null,{\"children\":\"selected\"}],\" 元素，下面的消息将立即更新。这是因为 \",[\"$r\",\"code\",null,{\"children\":\"setItems\"}],\" 会触发重新渲染，而 \",[\"$r\",\"code\",null,{\"children\":\"items.find(...)\"}],\" 会找到带有更新文本的元素。你不需要在 state 中保存 \",[\"$r\",\"strong\",null,{\"children\":\"选定的元素\"}],\"，因为只有 \",[\"$r\",\"strong\",null,{\"children\":\"选定的 ID\"}],\" 是必要的。其余的可以在渲染期间计算。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"avoid-deeply-nested-state\",\"children\":\"避免深度嵌套的 state \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"想象一下，一个由行星、大陆和国家组成的旅行计划。你可能会尝试使用嵌套对象和数组来构建它的 state，就像下面这个例子：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\nimport { initialTravelPlan } from './places.js';\\n\\nfunction PlaceTree({ place }) {\\n  const childPlaces = place.childPlaces;\\n  return (\\n    <li>\\n      {place.title}\\n      {childPlaces.length > 0 && (\\n        <ol>\\n          {childPlaces.map(place => (\\n            <PlaceTree key={place.id} place={place} />\\n          ))}\\n        </ol>\\n      )}\\n    </li>\\n  );\\n}\\n\\nexport default function TravelPlan() {\\n  const [plan, setPlan] = useState(initialTravelPlan);\\n  const planets = plan.childPlaces;\\n  return (\\n    <>\\n      <h2>Places to visit</h2>\\n      <ol>\\n        {planets.map(place => (\\n          <PlaceTree key={place.id} place={place} />\\n        ))}\\n      </ol>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/places.js active\",\"children\":\"export const initialTravelPlan = {\\n  id: 0,\\n  title: '(Root)',\\n  childPlaces: [{\\n    id: 1,\\n    title: 'Earth',\\n    childPlaces: [{\\n      id: 2,\\n      title: 'Africa',\\n      childPlaces: [{\\n        id: 3,\\n        title: 'Botswana',\\n        childPlaces: []\\n      }, {\\n        id: 4,\\n        title: 'Egypt',\\n        childPlaces: []\\n      }, {\\n        id: 5,\\n        title: 'Kenya',\\n        childPlaces: []\\n      }, {\\n        id: 6,\\n        title: 'Madagascar',\\n        childPlaces: []\\n      }, {\\n        id: 7,\\n        title: 'Morocco',\\n        childPlaces: []\\n      }, {\\n        id: 8,\\n        title: 'Nigeria',\\n        childPlaces: []\\n      }, {\\n        id: 9,\\n        title: 'South Africa',\\n        childPlaces: []\\n      }]\\n    }, {\\n      id: 10,\\n      title: 'Americas',\\n      childPlaces: [{\\n        id: 11,\\n        title: 'Argentina',\\n        childPlaces: []\\n      }, {\\n        id: 12,\\n        title: 'Brazil',\\n        childPlaces: []\\n      }, {\\n        id: 13,\\n        title: 'Barbados',\\n        childPlaces: []\\n      }, {\\n        id: 14,\\n        title: 'Canada',\\n        childPlaces: []\\n      }, {\\n        id: 15,\\n        title: 'Jamaica',\\n        childPlaces: []\\n      }, {\\n        id: 16,\\n        title: 'Mexico',\\n        childPlaces: []\\n      }, {\\n        id: 17,\\n        title: 'Trinidad and Tobago',\\n        childPlaces: []\\n      }, {\\n        id: 18,\\n        title: 'Venezuela',\\n        childPlaces: []\\n      }]\\n    }, {\\n      id: 19,\\n      title: 'Asia',\\n      childPlaces: [{\\n        id: 20,\\n        title: 'China',\\n        childPlaces: []\\n      }, {\\n        id: 21,\\n        title: 'India',\\n        childPlaces: []\\n      }, {\\n        id: 22,\\n        title: 'Singapore',\\n        childPlaces: []\\n      }, {\\n        id: 23,\\n        title: 'South Korea',\\n        childPlaces: []\\n      }, {\\n        id: 24,\\n        title: 'Thailand',\\n        childPlaces: []\\n      }, {\\n        id: 25,\\n        title: 'Vietnam',\\n        childPlaces: []\\n      }]\\n    }, {\\n      id: 26,\\n      title: 'Europe',\\n      childPlaces: [{\\n        id: 27,\\n        title: 'Croatia',\\n        childPlaces: [],\\n      }, {\\n        id: 28,\\n        title: 'France',\\n        childPlaces: [],\\n      }, {\\n        id: 29,\\n        title: 'Germany',\\n        childPlaces: [],\\n      }, {\\n        id: 30,\\n        title: 'Italy',\\n        childPlaces: [],\\n      }, {\\n        id: 31,\\n        title: 'Portugal',\\n        childPlaces: [],\\n      }, {\\n        id: 32,\\n        title: 'Spain',\\n        childPlaces: [],\\n      }, {\\n        id: 33,\\n        title: 'Turkey',\\n        childPlaces: [],\\n      }]\\n    }, {\\n      id: 34,\\n      title: 'Oceania',\\n      childPlaces: [{\\n        id: 35,\\n        title: 'Australia',\\n        childPlaces: [],\\n      }, {\\n        id: 36,\\n        title: 'Bora Bora (French Polynesia)',\\n        childPlaces: [],\\n      }, {\\n        id: 37,\\n        title: 'Easter Island (Chile)',\\n        childPlaces: [],\\n      }, {\\n        id: 38,\\n        title: 'Fiji',\\n        childPlaces: [],\\n      }, {\\n        id: 39,\\n        title: 'Hawaii (the USA)',\\n        childPlaces: [],\\n      }, {\\n        id: 40,\\n        title: 'New Zealand',\\n        childPlaces: [],\\n      }, {\\n        id: 41,\\n        title: 'Vanuatu',\\n        childPlaces: [],\\n      }]\\n    }]\\n  }, {\\n    id: 42,\\n    title: 'Moon',\\n    childPlaces: [{\\n      id: 43,\\n      title: 'Rheita',\\n      childPlaces: []\\n    }, {\\n      id: 44,\\n      title: 'Piccolomini',\\n      childPlaces: []\\n    }, {\\n      id: 45,\\n      title: 'Tycho',\\n      childPlaces: []\\n    }]\\n  }, {\\n    id: 46,\\n    title: 'Mars',\\n    childPlaces: [{\\n      id: 47,\\n      title: 'Corn Town',\\n      childPlaces: []\\n    }, {\\n      id: 48,\\n      title: 'Green Hill',\\n      childPlaces: []      \\n    }]\\n  }]\\n};\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，假设你想添加一个按钮来删除一个你已经去过的地方。你会怎么做呢？\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state#updating-a-nested-object\",\"children\":\"更新嵌套的 state\"}],\" 需要从更改部分一直向上复制对象。删除一个深度嵌套的地点将涉及复制其整个父级地点链。这样的代码可能非常冗长。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"如果 state 嵌套太深，难以轻松更新，可以考虑将其“扁平化”。\"}],\" 这里有一个方法可以重构上面这个数据。不同于树状结构，每个节点的 \",[\"$r\",\"code\",null,{\"children\":\"place\"}],\" 都是一个包含 \",[\"$r\",\"strong\",null,{\"children\":\"其子节点\"}],\" 的数组，你可以让每个节点的 \",[\"$r\",\"code\",null,{\"children\":\"place\"}],\" 作为数组保存 \",[\"$r\",\"strong\",null,{\"children\":\"其子节点的 ID\"}],\"。然后存储一个节点 ID 与相应节点的映射关系。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这个数据重组可能会让你想起看到一个数据库表：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\nimport { initialTravelPlan } from './places.js';\\n\\nfunction PlaceTree({ id, placesById }) {\\n  const place = placesById[id];\\n  const childIds = place.childIds;\\n  return (\\n    <li>\\n      {place.title}\\n      {childIds.length > 0 && (\\n        <ol>\\n          {childIds.map(childId => (\\n            <PlaceTree\\n              key={childId}\\n              id={childId}\\n              placesById={placesById}\\n            />\\n          ))}\\n        </ol>\\n      )}\\n    </li>\\n  );\\n}\\n\\nexport default function TravelPlan() {\\n  const [plan, setPlan] = useState(initialTravelPlan);\\n  const root = plan[0];\\n  const planetIds = root.childIds;\\n  return (\\n    <>\\n      <h2>Places to visit</h2>\\n      <ol>\\n        {planetIds.map(id => (\\n          <PlaceTree\\n            key={id}\\n            id={id}\\n            placesById={plan}\\n          />\\n        ))}\\n      </ol>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/places.js active\",\"children\":\"export const initialTravelPlan = {\\n  0: {\\n    id: 0,\\n    title: '(Root)',\\n    childIds: [1, 42, 46],\\n  },\\n  1: {\\n    id: 1,\\n    title: 'Earth',\\n    childIds: [2, 10, 19, 26, 34]\\n  },\\n  2: {\\n    id: 2,\\n    title: 'Africa',\\n    childIds: [3, 4, 5, 6 , 7, 8, 9]\\n  }, \\n  3: {\\n    id: 3,\\n    title: 'Botswana',\\n    childIds: []\\n  },\\n  4: {\\n    id: 4,\\n    title: 'Egypt',\\n    childIds: []\\n  },\\n  5: {\\n    id: 5,\\n    title: 'Kenya',\\n    childIds: []\\n  },\\n  6: {\\n    id: 6,\\n    title: 'Madagascar',\\n    childIds: []\\n  }, \\n  7: {\\n    id: 7,\\n    title: 'Morocco',\\n    childIds: []\\n  },\\n  8: {\\n    id: 8,\\n    title: 'Nigeria',\\n    childIds: []\\n  },\\n  9: {\\n    id: 9,\\n    title: 'South Africa',\\n    childIds: []\\n  },\\n  10: {\\n    id: 10,\\n    title: 'Americas',\\n    childIds: [11, 12, 13, 14, 15, 16, 17, 18],   \\n  },\\n  11: {\\n    id: 11,\\n    title: 'Argentina',\\n    childIds: []\\n  },\\n  12: {\\n    id: 12,\\n    title: 'Brazil',\\n    childIds: []\\n  },\\n  13: {\\n    id: 13,\\n    title: 'Barbados',\\n    childIds: []\\n  }, \\n  14: {\\n    id: 14,\\n    title: 'Canada',\\n    childIds: []\\n  },\\n  15: {\\n    id: 15,\\n    title: 'Jamaica',\\n    childIds: []\\n  },\\n  16: {\\n    id: 16,\\n    title: 'Mexico',\\n    childIds: []\\n  },\\n  17: {\\n    id: 17,\\n    title: 'Trinidad and Tobago',\\n    childIds: []\\n  },\\n  18: {\\n    id: 18,\\n    title: 'Venezuela',\\n    childIds: []\\n  },\\n  19: {\\n    id: 19,\\n    title: 'Asia',\\n    childIds: [20, 21, 22, 23, 24, 25],   \\n  },\\n  20: {\\n    id: 20,\\n    title: 'China',\\n    childIds: []\\n  },\\n  21: {\\n    id: 21,\\n    title: 'India',\\n    childIds: []\\n  },\\n  22: {\\n    id: 22,\\n    title: 'Singapore',\\n    childIds: []\\n  },\\n  23: {\\n    id: 23,\\n    title: 'South Korea',\\n    childIds: []\\n  },\\n  24: {\\n    id: 24,\\n    title: 'Thailand',\\n    childIds: []\\n  },\\n  25: {\\n    id: 25,\\n    title: 'Vietnam',\\n    childIds: []\\n  },\\n  26: {\\n    id: 26,\\n    title: 'Europe',\\n    childIds: [27, 28, 29, 30, 31, 32, 33],   \\n  },\\n  27: {\\n    id: 27,\\n    title: 'Croatia',\\n    childIds: []\\n  },\\n  28: {\\n    id: 28,\\n    title: 'France',\\n    childIds: []\\n  },\\n  29: {\\n    id: 29,\\n    title: 'Germany',\\n    childIds: []\\n  },\\n  30: {\\n    id: 30,\\n    title: 'Italy',\\n    childIds: []\\n  },\\n  31: {\\n    id: 31,\\n    title: 'Portugal',\\n    childIds: []\\n  },\\n  32: {\\n    id: 32,\\n    title: 'Spain',\\n    childIds: []\\n  },\\n  33: {\\n    id: 33,\\n    title: 'Turkey',\\n    childIds: []\\n  },\\n  34: {\\n    id: 34,\\n    title: 'Oceania',\\n    childIds: [35, 36, 37, 38, 39, 40, 41],   \\n  },\\n  35: {\\n    id: 35,\\n    title: 'Australia',\\n    childIds: []\\n  },\\n  36: {\\n    id: 36,\\n    title: 'Bora Bora (French Polynesia)',\\n    childIds: []\\n  },\\n  37: {\\n    id: 37,\\n    title: 'Easter Island (Chile)',\\n    childIds: []\\n  },\\n  38: {\\n    id: 38,\\n    title: 'Fiji',\\n    childIds: []\\n  },\\n  39: {\\n    id: 40,\\n    title: 'Hawaii (the USA)',\\n    childIds: []\\n  },\\n  40: {\\n    id: 40,\\n    title: 'New Zealand',\\n    childIds: []\\n  },\\n  41: {\\n    id: 41,\\n    title: 'Vanuatu',\\n    childIds: []\\n  },\\n  42: {\\n    id: 42,\\n    title: 'Moon',\\n    childIds: [43, 44, 45]\\n  },\\n  43: {\\n    id: 43,\\n    title: 'Rheita',\\n    childIds: []\\n  },\\n  44: {\\n    id: 44,\\n    title: 'Piccolomini',\\n    childIds: []\\n  },\\n  45: {\\n    id: 45,\\n    title: 'Tycho',\\n    childIds: []\\n  },\\n  46: {\\n    id: 46,\\n    title: 'Mars',\\n    childIds: [47, 48]\\n  },\\n  47: {\\n    id: 47,\\n    title: 'Corn Town',\\n    childIds: []\\n  },\\n  48: {\\n    id: 48,\\n    title: 'Green Hill',\\n    childIds: []\\n  }\\n};\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"126\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":\"现在 state 已经“扁平化”（也称为“规范化”），更新嵌套项会变得更加容易。\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在要删除一个地点，您只需要更新两个 state 级别：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"其 \",[\"$r\",\"strong\",null,{\"children\":\"父级\"}],\" 地点的更新版本应该从其 \",[\"$r\",\"code\",null,{\"children\":\"childIds\"}],\" 数组中排除已删除的 ID。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"其根级“表”对象的更新版本应包括父级地点的更新版本。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面是展示如何处理它的一个示例：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\nimport { initialTravelPlan } from './places.js';\\n\\nexport default function TravelPlan() {\\n  const [plan, setPlan] = useState(initialTravelPlan);\\n\\n  function handleComplete(parentId, childId) {\\n    const parent = plan[parentId];\\n    // 创建一个其父级地点的新版本\\n    // 但不包括子级 ID。\\n    const nextParent = {\\n      ...parent,\\n      childIds: parent.childIds\\n        .filter(id => id !== childId)\\n    };\\n    // 更新根 state 对象...\\n    setPlan({\\n      ...plan,\\n      // ...以便它拥有更新的父级。\\n      [parentId]: nextParent\\n    });\\n  }\\n\\n  const root = plan[0];\\n  const planetIds = root.childIds;\\n  return (\\n    <>\\n      <h2>Places to visit</h2>\\n      <ol>\\n        {planetIds.map(id => (\\n          <PlaceTree\\n            key={id}\\n            id={id}\\n            parentId={0}\\n            placesById={plan}\\n            onComplete={handleComplete}\\n          />\\n        ))}\\n      </ol>\\n    </>\\n  );\\n}\\n\\nfunction PlaceTree({ id, parentId, placesById, onComplete }) {\\n  const place = placesById[id];\\n  const childIds = place.childIds;\\n  return (\\n    <li>\\n      {place.title}\\n      <button onClick={() => {\\n        onComplete(parentId, id);\\n      }}>\\n        Complete\\n      </button>\\n      {childIds.length > 0 &&\\n        <ol>\\n          {childIds.map(childId => (\\n            <PlaceTree\\n              key={childId}\\n              id={childId}\\n              parentId={id}\\n              placesById={placesById}\\n              onComplete={onComplete}\\n            />\\n          ))}\\n        </ol>\\n      }\\n    </li>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/places.js\",\"children\":\"export const initialTravelPlan = {\\n  0: {\\n    id: 0,\\n    title: '(Root)',\\n    childIds: [1, 42, 46],\\n  },\\n  1: {\\n    id: 1,\\n    title: 'Earth',\\n    childIds: [2, 10, 19, 26, 34]\\n  },\\n  2: {\\n    id: 2,\\n    title: 'Africa',\\n    childIds: [3, 4, 5, 6 , 7, 8, 9]\\n  }, \\n  3: {\\n    id: 3,\\n    title: 'Botswana',\\n    childIds: []\\n  },\\n  4: {\\n    id: 4,\\n    title: 'Egypt',\\n    childIds: []\\n  },\\n  5: {\\n    id: 5,\\n    title: 'Kenya',\\n    childIds: []\\n  },\\n  6: {\\n    id: 6,\\n    title: 'Madagascar',\\n    childIds: []\\n  }, \\n  7: {\\n    id: 7,\\n    title: 'Morocco',\\n    childIds: []\\n  },\\n  8: {\\n    id: 8,\\n    title: 'Nigeria',\\n    childIds: []\\n  },\\n  9: {\\n    id: 9,\\n    title: 'South Africa',\\n    childIds: []\\n  },\\n  10: {\\n    id: 10,\\n    title: 'Americas',\\n    childIds: [11, 12, 13, 14, 15, 16, 17, 18],   \\n  },\\n  11: {\\n    id: 11,\\n    title: 'Argentina',\\n    childIds: []\\n  },\\n  12: {\\n    id: 12,\\n    title: 'Brazil',\\n    childIds: []\\n  },\\n  13: {\\n    id: 13,\\n    title: 'Barbados',\\n    childIds: []\\n  }, \\n  14: {\\n    id: 14,\\n    title: 'Canada',\\n    childIds: []\\n  },\\n  15: {\\n    id: 15,\\n    title: 'Jamaica',\\n    childIds: []\\n  },\\n  16: {\\n    id: 16,\\n    title: 'Mexico',\\n    childIds: []\\n  },\\n  17: {\\n    id: 17,\\n    title: 'Trinidad and Tobago',\\n    childIds: []\\n  },\\n  18: {\\n    id: 18,\\n    title: 'Venezuela',\\n    childIds: []\\n  },\\n  19: {\\n    id: 19,\\n    title: 'Asia',\\n    childIds: [20, 21, 22, 23, 24, 25],   \\n  },\\n  20: {\\n    id: 20,\\n    title: 'China',\\n    childIds: []\\n  },\\n  21: {\\n    id: 21,\\n    title: 'India',\\n    childIds: []\\n  },\\n  22: {\\n    id: 22,\\n    title: 'Singapore',\\n    childIds: []\\n  },\\n  23: {\\n    id: 23,\\n    title: 'South Korea',\\n    childIds: []\\n  },\\n  24: {\\n    id: 24,\\n    title: 'Thailand',\\n    childIds: []\\n  },\\n  25: {\\n    id: 25,\\n    title: 'Vietnam',\\n    childIds: []\\n  },\\n  26: {\\n    id: 26,\\n    title: 'Europe',\\n    childIds: [27, 28, 29, 30, 31, 32, 33],   \\n  },\\n  27: {\\n    id: 27,\\n    title: 'Croatia',\\n    childIds: []\\n  },\\n  28: {\\n    id: 28,\\n    title: 'France',\\n    childIds: []\\n  },\\n  29: {\\n    id: 29,\\n    title: 'Germany',\\n    childIds: []\\n  },\\n  30: {\\n    id: 30,\\n    title: 'Italy',\\n    childIds: []\\n  },\\n  31: {\\n    id: 31,\\n    title: 'Portugal',\\n    childIds: []\\n  },\\n  32: {\\n    id: 32,\\n    title: 'Spain',\\n    childIds: []\\n  },\\n  33: {\\n    id: 33,\\n    title: 'Turkey',\\n    childIds: []\\n  },\\n  34: {\\n    id: 34,\\n    title: 'Oceania',\\n    childIds: [35, 36, 37, 38, 39, 40, 41],   \\n  },\\n  35: {\\n    id: 35,\\n    title: 'Australia',\\n    childIds: []\\n  },\\n  36: {\\n    id: 36,\\n    title: 'Bora Bora (French Polynesia)',\\n    childIds: []\\n  },\\n  37: {\\n    id: 37,\\n    title: 'Easter Island (Chile)',\\n    childIds: []\\n  },\\n  38: {\\n    id: 38,\\n    title: 'Fiji',\\n    childIds: []\\n  },\\n  39: {\\n    id: 39,\\n    title: 'Hawaii (the USA)',\\n    childIds: []\\n  },\\n  40: {\\n    id: 40,\\n    title: 'New Zealand',\\n    childIds: []\\n  },\\n  41: {\\n    id: 41,\\n    title: 'Vanuatu',\\n    childIds: []\\n  },\\n  42: {\\n    id: 42,\\n    title: 'Moon',\\n    childIds: [43, 44, 45]\\n  },\\n  43: {\\n    id: 43,\\n    title: 'Rheita',\\n    childIds: []\\n  },\\n  44: {\\n    id: 44,\\n    title: 'Piccolomini',\\n    childIds: []\\n  },\\n  45: {\\n    id: 45,\\n    title: 'Tycho',\\n    childIds: []\\n  },\\n  46: {\\n    id: 46,\\n    title: 'Mars',\\n    childIds: [47, 48]\\n  },\\n  47: {\\n    id: 47,\\n    title: 'Corn Town',\\n    childIds: []\\n  },\\n  48: {\\n    id: 48,\\n    title: 'Green Hill',\\n    childIds: []\\n  }\\n};\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"136\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你确实可以随心所欲地嵌套 state，但是将其“扁平化”可以解决许多问题。这使得 state 更容易更新，并且有助于确保在嵌套对象的不同部分中没有重复。\"}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"improving-memory-usage\",\"children\":\"改善内存使用 \"}],[\"$r\",\"p\",null,{\"children\":[\"理想情况下，您还应该从“表”对象中删除已删除的项目（以及它们的子项！）以改善内存使用。还可以 \",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state#write-concise-update-logic-with-immer\",\"children\":\"使用 Immer\"}],\" 使更新逻辑更加简洁。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useImmer } from 'use-immer';\\nimport { initialTravelPlan } from './places.js';\\n\\nexport default function TravelPlan() {\\n  const [plan, updatePlan] = useImmer(initialTravelPlan);\\n\\n  function handleComplete(parentId, childId) {\\n    updatePlan(draft => {\\n      // 从父级地点的子 ID 中移除。\\n      const parent = draft[parentId];\\n      parent.childIds = parent.childIds\\n        .filter(id => id !== childId);\\n\\n      // 删除这个地点和它的所有子目录。\\n      deleteAllChildren(childId);\\n      function deleteAllChildren(id) {\\n        const place = draft[id];\\n        place.childIds.forEach(deleteAllChildren);\\n        delete draft[id];\\n      }\\n    });\\n  }\\n\\n  const root = plan[0];\\n  const planetIds = root.childIds;\\n  return (\\n    <>\\n      <h2>Places to visit</h2>\\n      <ol>\\n        {planetIds.map(id => (\\n          <PlaceTree\\n            key={id}\\n            id={id}\\n            parentId={0}\\n            placesById={plan}\\n            onComplete={handleComplete}\\n          />\\n        ))}\\n      </ol>\\n    </>\\n  );\\n}\\n\\nfunction PlaceTree({ id, parentId, placesById, onComplete }) {\\n  const place = placesById[id];\\n  const childIds = place.childIds;\\n  return (\\n    <li>\\n      {place.title}\\n      <button onClick={() => {\\n        onComplete(parentId, id);\\n      }}>\\n        Complete\\n      </button>\\n      {childIds.length > 0 &&\\n        <ol>\\n          {childIds.map(childId => (\\n            <PlaceTree\\n              key={childId}\\n              id={childId}\\n              parentId={id}\\n              placesById={placesById}\\n              onComplete={onComplete}\\n            />\\n          ))}\\n        </ol>\\n      }\\n    </li>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/places.js\",\"children\":\"export const initialTravelPlan = {\\n  0: {\\n    id: 0,\\n    title: '(Root)',\\n    childIds: [1, 42, 46],\\n  },\\n  1: {\\n    id: 1,\\n    title: 'Earth',\\n    childIds: [2, 10, 19, 26, 34]\\n  },\\n  2: {\\n    id: 2,\\n    title: 'Africa',\\n    childIds: [3, 4, 5, 6 , 7, 8, 9]\\n  }, \\n  3: {\\n    id: 3,\\n    title: 'Botswana',\\n    childIds: []\\n  },\\n  4: {\\n    id: 4,\\n    title: 'Egypt',\\n    childIds: []\\n  },\\n  5: {\\n    id: 5,\\n    title: 'Kenya',\\n    childIds: []\\n  },\\n  6: {\\n    id: 6,\\n    title: 'Madagascar',\\n    childIds: []\\n  }, \\n  7: {\\n    id: 7,\\n    title: 'Morocco',\\n    childIds: []\\n  },\\n  8: {\\n    id: 8,\\n    title: 'Nigeria',\\n    childIds: []\\n  },\\n  9: {\\n    id: 9,\\n    title: 'South Africa',\\n    childIds: []\\n  },\\n  10: {\\n    id: 10,\\n    title: 'Americas',\\n    childIds: [11, 12, 13, 14, 15, 16, 17, 18],   \\n  },\\n  11: {\\n    id: 11,\\n    title: 'Argentina',\\n    childIds: []\\n  },\\n  12: {\\n    id: 12,\\n    title: 'Brazil',\\n    childIds: []\\n  },\\n  13: {\\n    id: 13,\\n    title: 'Barbados',\\n    childIds: []\\n  }, \\n  14: {\\n    id: 14,\\n    title: 'Canada',\\n    childIds: []\\n  },\\n  15: {\\n    id: 15,\\n    title: 'Jamaica',\\n    childIds: []\\n  },\\n  16: {\\n    id: 16,\\n    title: 'Mexico',\\n    childIds: []\\n  },\\n  17: {\\n    id: 17,\\n    title: 'Trinidad and Tobago',\\n    childIds: []\\n  },\\n  18: {\\n    id: 18,\\n    title: 'Venezuela',\\n    childIds: []\\n  },\\n  19: {\\n    id: 19,\\n    title: 'Asia',\\n    childIds: [20, 21, 22, 23, 24, 25,],   \\n  },\\n  20: {\\n    id: 20,\\n    title: 'China',\\n    childIds: []\\n  },\\n  21: {\\n    id: 21,\\n    title: 'India',\\n    childIds: []\\n  },\\n  22: {\\n    id: 22,\\n    title: 'Singapore',\\n    childIds: []\\n  },\\n  23: {\\n    id: 23,\\n    title: 'South Korea',\\n    childIds: []\\n  },\\n  24: {\\n    id: 24,\\n    title: 'Thailand',\\n    childIds: []\\n  },\\n  25: {\\n    id: 25,\\n    title: 'Vietnam',\\n    childIds: []\\n  },\\n  26: {\\n    id: 26,\\n    title: 'Europe',\\n    childIds: [27, 28, 29, 30, 31, 32, 33],   \\n  },\\n  27: {\\n    id: 27,\\n    title: 'Croatia',\\n    childIds: []\\n  },\\n  28: {\\n    id: 28,\\n    title: 'France',\\n    childIds: []\\n  },\\n  29: {\\n    id: 29,\\n    title: 'Germany',\\n    childIds: []\\n  },\\n  30: {\\n    id: 30,\\n    title: 'Italy',\\n    childIds: []\\n  },\\n  31: {\\n    id: 31,\\n    title: 'Portugal',\\n    childIds: []\\n  },\\n  32: {\\n    id: 32,\\n    title: 'Spain',\\n    childIds: []\\n  },\\n  33: {\\n    id: 33,\\n    title: 'Turkey',\\n    childIds: []\\n  },\\n  34: {\\n    id: 34,\\n    title: 'Oceania',\\n    childIds: [35, 36, 37, 38, 39, 40,, 41],   \\n  },\\n  35: {\\n    id: 35,\\n    title: 'Australia',\\n    childIds: []\\n  },\\n  36: {\\n    id: 36,\\n    title: 'Bora Bora (French Polynesia)',\\n    childIds: []\\n  },\\n  37: {\\n    id: 37,\\n    title: 'Easter Island (Chile)',\\n    childIds: []\\n  },\\n  38: {\\n    id: 38,\\n    title: 'Fiji',\\n    childIds: []\\n  },\\n  39: {\\n    id: 39,\\n    title: 'Hawaii (the USA)',\\n    childIds: []\\n  },\\n  40: {\\n    id: 40,\\n    title: 'New Zealand',\\n    childIds: []\\n  },\\n  41: {\\n    id: 41,\\n    title: 'Vanuatu',\\n    childIds: []\\n  },\\n  42: {\\n    id: 42,\\n    title: 'Moon',\\n    childIds: [43, 44, 45]\\n  },\\n  43: {\\n    id: 43,\\n    title: 'Rheita',\\n    childIds: []\\n  },\\n  44: {\\n    id: 44,\\n    title: 'Piccolomini',\\n    childIds: []\\n  },\\n  45: {\\n    id: 45,\\n    title: 'Tycho',\\n    childIds: []\\n  },\\n  46: {\\n    id: 46,\\n    title: 'Mars',\\n    childIds: [47, 48]\\n  },\\n  47: {\\n    id: 47,\\n    title: 'Corn Town',\\n    childIds: []\\n  },\\n  48: {\\n    id: 48,\\n    title: 'Green Hill',\\n    childIds: []\\n  }\\n};\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"immer\\\": \\\"1.7.3\\\",\\n    \\\"react\\\": \\\"latest\\\",\\n    \\\"react-dom\\\": \\\"latest\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"use-immer\\\": \\\"0.5.1\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}]]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"有时候，你也可以通过将一些嵌套 state 移动到子组件中来减少 state 的嵌套。这对于不需要保存的短暂 UI 状态非常有效，比如一个选项是否被悬停。\"}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如果两个 state 变量总是一起更新，请考虑将它们合并为一个。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"仔细选择你的 state 变量，以避免创建“极难处理”的 state。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"用一种减少出错更新的机会的方式来构建你的 state。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"避免冗余和重复的 state，这样您就不需要保持同步。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"除非您特别想防止更新，否则不要将 props \",[\"$r\",\"strong\",null,{\"children\":\"放入\"}],\" state 中。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"对于选择类型的 UI 模式，请在 state 中保存 ID 或索引而不是对象本身。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如果深度嵌套 state 更新很复杂，请尝试将其展开扁平化。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"fix-a-component-thats-not-updating\",\"children\":\"修复一个未更新的组件 \"}],[\"$r\",\"p\",null,{\"children\":[\"这个 \",[\"$r\",\"code\",null,{\"children\":\"Clock\"}],\" 组件接收两个属性：\",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"time\"}],\"。当您在选择框中选择不同的颜色时，\",[\"$r\",\"code\",null,{\"children\":\"Clock\"}],\" 组件将从其父组件接收到一个不同的 \",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" 属性。然而，由于某种原因，显示的颜色没有更新。为什么？请修复这个问题。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Clock.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Clock(props) {\\n  const [color, setColor] = useState(props.color);\\n  return (\\n    <h1 style={{ color: color }}>\\n      {props.time}\\n    </h1>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState, useEffect } from 'react';\\nimport Clock from './Clock.js';\\n\\nfunction useTime() {\\n  const [time, setTime] = useState(() => new Date());\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setTime(new Date());\\n    }, 1000);\\n    return () => clearInterval(id);\\n  }, []);\\n  return time;\\n}\\n\\nexport default function App() {\\n  const time = useTime();\\n  const [color, setColor] = useState('lightcoral');\\n  return (\\n    <div>\\n      <p>\\n        Pick a color:{' '}\\n        <select value={color} onChange={e => setColor(e.target.value)}>\\n          <option value=\\\"lightcoral\\\">lightcoral</option>\\n          <option value=\\\"midnightblue\\\">midnightblue</option>\\n          <option value=\\\"rebeccapurple\\\">rebeccapurple</option>\\n        </select>\\n      </p>\\n      <Clock color={color} time={time.toLocaleTimeString()} />\\n    </div>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"这个问题点在于此组件的 \",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" state 是使用 \",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" prop 的初始值进行初始化的。但是当 \",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" prop 值发生更改时，这不会影响 state 变量！因此它们会失去同步。为了解决这个问题，完全删除 state 变量，并直接使用 \",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" prop 即可。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Clock.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Clock(props) {\\n  return (\\n    <h1 style={{ color: props.color }}>\\n      {props.time}\\n    </h1>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState, useEffect } from 'react';\\nimport Clock from './Clock.js';\\n\\nfunction useTime() {\\n  const [time, setTime] = useState(() => new Date());\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setTime(new Date());\\n    }, 1000);\\n    return () => clearInterval(id);\\n  }, []);\\n  return time;\\n}\\n\\nexport default function App() {\\n  const time = useTime();\\n  const [color, setColor] = useState('lightcoral');\\n  return (\\n    <div>\\n      <p>\\n        Pick a color:{' '}\\n        <select value={color} onChange={e => setColor(e.target.value)}>\\n          <option value=\\\"lightcoral\\\">lightcoral</option>\\n          <option value=\\\"midnightblue\\\">midnightblue</option>\\n          <option value=\\\"rebeccapurple\\\">rebeccapurple</option>\\n        </select>\\n      </p>\\n      <Clock color={color} time={time.toLocaleTimeString()} />\\n    </div>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"或者，使用解构语法：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Clock.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Clock({ color, time }) {\\n  return (\\n    <h1 style={{ color: color }}>\\n      {time}\\n    </h1>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState, useEffect } from 'react';\\nimport Clock from './Clock.js';\\n\\nfunction useTime() {\\n  const [time, setTime] = useState(() => new Date());\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setTime(new Date());\\n    }, 1000);\\n    return () => clearInterval(id);\\n  }, []);\\n  return time;\\n}\\n\\nexport default function App() {\\n  const time = useTime();\\n  const [color, setColor] = useState('lightcoral');\\n  return (\\n    <div>\\n      <p>\\n        Pick a color:{' '}\\n        <select value={color} onChange={e => setColor(e.target.value)}>\\n          <option value=\\\"lightcoral\\\">lightcoral</option>\\n          <option value=\\\"midnightblue\\\">midnightblue</option>\\n          <option value=\\\"rebeccapurple\\\">rebeccapurple</option>\\n        </select>\\n      </p>\\n      <Clock color={color} time={time.toLocaleTimeString()} />\\n    </div>\\n  );\\n}\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-a-broken-packing-list\",\"children\":\"修复一个损坏的打包清单 \"}],[\"$r\",\"p\",null,{\"children\":\"这个打包清单有一个页脚，显示了打包的物品数量和总共的物品数量。一开始看起来似乎很好用，但是它也存在漏洞。例如，如果你将一个物品标记为已打包然后删除它，计数器就不会正确更新。请修复计数器以使其始终正确。\"}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"在这个例子中，是否有 state 是多余的？\"}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AddItem from './AddItem.js';\\nimport PackingList from './PackingList.js';\\n\\nlet nextId = 3;\\nconst initialItems = [\\n  { id: 0, title: 'Warm socks', packed: true },\\n  { id: 1, title: 'Travel journal', packed: false },\\n  { id: 2, title: 'Watercolors', packed: false },\\n];\\n\\nexport default function TravelPlan() {\\n  const [items, setItems] = useState(initialItems);\\n  const [total, setTotal] = useState(3);\\n  const [packed, setPacked] = useState(1);\\n\\n  function handleAddItem(title) {\\n    setTotal(total + 1);\\n    setItems([\\n      ...items,\\n      {\\n        id: nextId++,\\n        title: title,\\n        packed: false\\n      }\\n    ]);\\n  }\\n\\n  function handleChangeItem(nextItem) {\\n    if (nextItem.packed) {\\n      setPacked(packed + 1);\\n    } else {\\n      setPacked(packed - 1);\\n    }\\n    setItems(items.map(item => {\\n      if (item.id === nextItem.id) {\\n        return nextItem;\\n      } else {\\n        return item;\\n      }\\n    }));\\n  }\\n\\n  function handleDeleteItem(itemId) {\\n    setTotal(total - 1);\\n    setItems(\\n      items.filter(item => item.id !== itemId)\\n    );\\n  }\\n\\n  return (\\n    <>  \\n      <AddItem\\n        onAddItem={handleAddItem}\\n      />\\n      <PackingList\\n        items={items}\\n        onChangeItem={handleChangeItem}\\n        onDeleteItem={handleDeleteItem}\\n      />\\n      <hr />\\n      <b>{packed} out of {total} packed!</b>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddItem.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddItem({ onAddItem }) {\\n  const [title, setTitle] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add item\\\"\\n        value={title}\\n        onChange={e => setTitle(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setTitle('');\\n        onAddItem(title);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PackingList.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function PackingList({\\n  items,\\n  onChangeItem,\\n  onDeleteItem\\n}) {\\n  return (\\n    <ul>\\n      {items.map(item => (\\n        <li key={item.id}>\\n          <label>\\n            <input\\n              type=\\\"checkbox\\\"\\n              checked={item.packed}\\n              onChange={e => {\\n                onChangeItem({\\n                  ...item,\\n                  packed: e.target.checked\\n                });\\n              }}\\n            />\\n            {' '}\\n            {item.title}\\n          </label>\\n          <button onClick={() => onDeleteItem(item.id)}>\\n            Delete\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"虽然你可以仔细更改每个事件处理程序来正确更新 \",[\"$r\",\"code\",null,{\"children\":\"total\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"packed\"}],\" 计数器，但根本问题在于这些 state 变量一直存在。它们是冗余的，因为你始终可以从 \",[\"$r\",\"code\",null,{\"children\":\"item\"}],\" 数组本身计算出物品（已打包或总共）的数量。因此需要删除冗余 state 以修复错误：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AddItem from './AddItem.js';\\nimport PackingList from './PackingList.js';\\n\\nlet nextId = 3;\\nconst initialItems = [\\n  { id: 0, title: 'Warm socks', packed: true },\\n  { id: 1, title: 'Travel journal', packed: false },\\n  { id: 2, title: 'Watercolors', packed: false },\\n];\\n\\nexport default function TravelPlan() {\\n  const [items, setItems] = useState(initialItems);\\n\\n  const total = items.length;\\n  const packed = items\\n    .filter(item => item.packed)\\n    .length;\\n\\n  function handleAddItem(title) {\\n    setItems([\\n      ...items,\\n      {\\n        id: nextId++,\\n        title: title,\\n        packed: false\\n      }\\n    ]);\\n  }\\n\\n  function handleChangeItem(nextItem) {\\n    setItems(items.map(item => {\\n      if (item.id === nextItem.id) {\\n        return nextItem;\\n      } else {\\n        return item;\\n      }\\n    }));\\n  }\\n\\n  function handleDeleteItem(itemId) {\\n    setItems(\\n      items.filter(item => item.id !== itemId)\\n    );\\n  }\\n\\n  return (\\n    <>  \\n      <AddItem\\n        onAddItem={handleAddItem}\\n      />\\n      <PackingList\\n        items={items}\\n        onChangeItem={handleChangeItem}\\n        onDeleteItem={handleDeleteItem}\\n      />\\n      <hr />\\n      <b>{packed} out of {total} packed!</b>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddItem.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddItem({ onAddItem }) {\\n  const [title, setTitle] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add item\\\"\\n        value={title}\\n        onChange={e => setTitle(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setTitle('');\\n        onAddItem(title);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/PackingList.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function PackingList({\\n  items,\\n  onChangeItem,\\n  onDeleteItem\\n}) {\\n  return (\\n    <ul>\\n      {items.map(item => (\\n        <li key={item.id}>\\n          <label>\\n            <input\\n              type=\\\"checkbox\\\"\\n              checked={item.packed}\\n              onChange={e => {\\n                onChangeItem({\\n                  ...item,\\n                  packed: e.target.checked\\n                });\\n              }}\\n            />\\n            {' '}\\n            {item.title}\\n          </label>\\n          <button onClick={() => onDeleteItem(item.id)}>\\n            Delete\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"请注意，事件处理程序在这次更改后只关心调用 \",[\"$r\",\"code\",null,{\"children\":\"setItems\"}],\"。现在，项目计数是从 \",[\"$r\",\"code\",null,{\"children\":\"items\"}],\" 中在下一次渲染期间计算的，因此它们始终是最新的。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-the-disappearing-selection\",\"children\":\"修复消失的选项 \"}],[\"$r\",\"p\",null,{\"children\":[\"有一个 \",[\"$r\",\"code\",null,{\"children\":\"letters\"}],\" 列表在 state 中。当你悬停或聚焦到特定的字母时，它会被突出显示。当前突出显示的字母存储在 \",[\"$r\",\"code\",null,{\"children\":\"highlightedLetter\"}],\" state 变量中。您可以“Star”和“Unstar”单个字母，这将更新 state 中的 \",[\"$r\",\"code\",null,{\"children\":\"letters\"}],\" 数组。\"]}],[\"$r\",\"p\",null,{\"children\":\"虽然这段代码可以运行，但是有一个小的 UI 问题。当你点击“Star”或“Unstar”时，高亮会短暂消失。不过只要你移动鼠标指针或者用键盘切换到另一个字母，它就会重新出现。为什么会这样？请修复它，使得在按钮点击后高亮不会消失。\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { initialLetters } from './data.js';\\nimport Letter from './Letter.js';\\n\\nexport default function MailClient() {\\n  const [letters, setLetters] = useState(initialLetters);\\n  const [highlightedLetter, setHighlightedLetter] = useState(null);\\n\\n  function handleHover(letter) {\\n    setHighlightedLetter(letter);\\n  }\\n\\n  function handleStar(starred) {\\n    setLetters(letters.map(letter => {\\n      if (letter.id === starred.id) {\\n        return {\\n          ...letter,\\n          isStarred: !letter.isStarred\\n        };\\n      } else {\\n        return letter;\\n      }\\n    }));\\n  }\\n\\n  return (\\n    <>\\n      <h2>Inbox</h2>\\n      <ul>\\n        {letters.map(letter => (\\n          <Letter\\n            key={letter.id}\\n            letter={letter}\\n            isHighlighted={\\n              letter === highlightedLetter\\n            }\\n            onHover={handleHover}\\n            onToggleStar={handleStar}\\n          />\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Letter.js\",\"children\":\"export default function Letter({\\n  letter,\\n  isHighlighted,\\n  onHover,\\n  onToggleStar,\\n}) {\\n  return (\\n    <li\\n      className={\\n        isHighlighted ? 'highlighted' : ''\\n      }\\n      onFocus={() => {\\n        onHover(letter);        \\n      }}\\n      onPointerMove={() => {\\n        onHover(letter);\\n      }}\\n    >\\n      <button onClick={() => {\\n        onToggleStar(letter);\\n      }}>\\n        {letter.isStarred ? 'Unstar' : 'Star'}\\n      </button>\\n      {letter.subject}\\n    </li>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const initialLetters = [{\\n  id: 0,\\n  subject: 'Ready for adventure?',\\n  isStarred: true,\\n}, {\\n  id: 1,\\n  subject: 'Time to check in!',\\n  isStarred: false,\\n}, {\\n  id: 2,\\n  subject: 'Festival Begins in Just SEVEN Days!',\\n  isStarred: false,\\n}];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { border-radius: 5px; }\\n.highlighted { background: #d2eaff; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"这个问题点在于你将字母对象存储在 \",[\"$r\",\"code\",null,{\"children\":\"highlightedLetter\"}],\" 中。但是，你也将相同的信息存储在 \",[\"$r\",\"code\",null,{\"children\":\"letters\"}],\" 数组中。因此，你的 state 存在重复！当你在按钮点击后更新 \",[\"$r\",\"code\",null,{\"children\":\"letters\"}],\" 数组时，会创建一个新的字母对象，它与 \",[\"$r\",\"code\",null,{\"children\":\"highlightedLetter\"}],\" 不同。这就是为什么 \",[\"$r\",\"code\",null,{\"children\":\"highlightedLetter === letter\"}],\" 执行变为 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"，并且高亮消失的原因。当指针移动时下一次调用 \",[\"$r\",\"code\",null,{\"children\":\"setHighlightedLetter\"}],\" 时它会重新出现。\"]}],[\"$r\",\"p\",null,{\"children\":[\"为了解决这个问题，请从 state 中删除重复项。不要在两个地方存储 \",[\"$r\",\"strong\",null,{\"children\":\"字母对象本身\"}],\"，而是存储 \",[\"$r\",\"code\",null,{\"children\":\"highlightedId\"}],\"。然后，您可以使用 \",[\"$r\",\"code\",null,{\"children\":\"letter.id === highlightedId\"}],\" 检查每个带有 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" 属性的字母，即使 \",[\"$r\",\"code\",null,{\"children\":\"letter\"}],\" 对象在上次渲染后发生了变化，这也是可行的。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { initialLetters } from './data.js';\\nimport Letter from './Letter.js';\\n\\nexport default function MailClient() {\\n  const [letters, setLetters] = useState(initialLetters);\\n  const [highlightedId, setHighlightedId ] = useState(null);\\n\\n  function handleHover(letterId) {\\n    setHighlightedId(letterId);\\n  }\\n\\n  function handleStar(starredId) {\\n    setLetters(letters.map(letter => {\\n      if (letter.id === starredId) {\\n        return {\\n          ...letter,\\n          isStarred: !letter.isStarred\\n        };\\n      } else {\\n        return letter;\\n      }\\n    }));\\n  }\\n\\n  return (\\n    <>\\n      <h2>Inbox</h2>\\n      <ul>\\n        {letters.map(letter => (\\n          <Letter\\n            key={letter.id}\\n            letter={letter}\\n            isHighlighted={\\n              letter.id === highlightedId\\n            }\\n            onHover={handleHover}\\n            onToggleStar={handleStar}\\n          />\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Letter.js\",\"children\":\"export default function Letter({\\n  letter,\\n  isHighlighted,\\n  onHover,\\n  onToggleStar,\\n}) {\\n  return (\\n    <li\\n      className={\\n        isHighlighted ? 'highlighted' : ''\\n      }\\n      onFocus={() => {\\n        onHover(letter.id);        \\n      }}\\n      onPointerMove={() => {\\n        onHover(letter.id);\\n      }}\\n    >\\n      <button onClick={() => {\\n        onToggleStar(letter.id);\\n      }}>\\n        {letter.isStarred ? 'Unstar' : 'Star'}\\n      </button>\\n      {letter.subject}\\n    </li>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const initialLetters = [{\\n  id: 0,\\n  subject: 'Ready for adventure?',\\n  isStarred: true,\\n}, {\\n  id: 1,\\n  subject: 'Time to check in!',\\n  isStarred: false,\\n}, {\\n  id: 2,\\n  subject: 'Festival Begins in Just SEVEN Days!',\\n  isStarred: false,\\n}];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { border-radius: 5px; }\\n.highlighted { background: #d2eaff; }\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"implement-multiple-selection\",\"children\":\"实现多选功能 \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，每个 \",[\"$r\",\"code\",null,{\"children\":\"Letter\"}],\" 都有一个 \",[\"$r\",\"code\",null,{\"children\":\"isSelected\"}],\" prop 和一个 \",[\"$r\",\"code\",null,{\"children\":\"onToggle\"}],\" 处理程序来标记它为选定 state。这样做是有效的，但是 state 被存储为 \",[\"$r\",\"code\",null,{\"children\":\"selectedId\"}],\"（也可以是 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"ID\"}],\"），因此任何时候只能选择一个 letter。\"]}],[\"$r\",\"p\",null,{\"children\":\"你需要将 state 结构更改为支持多选功能。（在编写代码之前，请考虑如何构建它。）每个复选框应该独立于其他复选框。单击已选择的项目应取消选择。最后，页脚应显示所选项目的正确数量。\"}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"你可以在 state 中保存一个选定 ID 的数组或 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Set\"}],\"，而不是单个选定的 ID。\"]}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { letters } from './data.js';\\nimport Letter from './Letter.js';\\n\\nexport default function MailClient() {\\n  const [selectedId, setSelectedId] = useState(null);\\n\\n  // TODO: 支持多选\\n  const selectedCount = 1;\\n\\n  function handleToggle(toggledId) {\\n    // TODO: 支持多选\\n    setSelectedId(toggledId);\\n  }\\n\\n  return (\\n    <>\\n      <h2>Inbox</h2>\\n      <ul>\\n        {letters.map(letter => (\\n          <Letter\\n            key={letter.id}\\n            letter={letter}\\n            isSelected={\\n              // TODO: 支持多选\\n              letter.id === selectedId\\n            }\\n            onToggle={handleToggle}\\n          />\\n        ))}\\n        <hr />\\n        <p>\\n          <b>\\n            You selected {selectedCount} letters\\n          </b>\\n        </p>\\n      </ul>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Letter.js\",\"children\":\"export default function Letter({\\n  letter,\\n  onToggle,\\n  isSelected,\\n}) {\\n  return (\\n    <li className={\\n      isSelected ? 'selected' : ''\\n    }>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isSelected}\\n          onChange={() => {\\n            onToggle(letter.id);\\n          }}\\n        />\\n        {letter.subject}\\n      </label>\\n    </li>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const letters = [{\\n  id: 0,\\n  subject: 'Ready for adventure?',\\n  isStarred: true,\\n}, {\\n  id: 1,\\n  subject: 'Time to check in!',\\n  isStarred: false,\\n}, {\\n  id: 2,\\n  subject: 'Festival Begins in Just SEVEN Days!',\\n  isStarred: false,\\n}];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 5px; }\\nli { border-radius: 5px; }\\nlabel { width: 100%; padding: 5px; display: inline-block; }\\n.selected { background: #d2eaff; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"在 state 中保留一个 \",[\"$r\",\"code\",null,{\"children\":\"selectedIds\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"数组\"}],\"，而不是单个的 \",[\"$r\",\"code\",null,{\"children\":\"selectedId\"}],\"。例如，如果您选择了第一个和最后一个字母，则它将包含 \",[\"$r\",\"code\",null,{\"children\":\"[0, 2]\"}],\"。当没有选定任何内容时，它将为空数组 \",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\"：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { letters } from './data.js';\\nimport Letter from './Letter.js';\\n\\nexport default function MailClient() {\\n  const [selectedIds, setSelectedIds] = useState([]);\\n\\n  const selectedCount = selectedIds.length;\\n\\n  function handleToggle(toggledId) {\\n    // 它以前是被选中的吗？\\n    if (selectedIds.includes(toggledId)) {\\n      // Then remove this ID from the array.\\n      setSelectedIds(selectedIds.filter(id =>\\n        id !== toggledId\\n      ));\\n    } else {\\n      // 否则，增加 ID 到数组中。\\n      setSelectedIds([\\n        ...selectedIds,\\n        toggledId\\n      ]);\\n    }\\n  }\\n\\n  return (\\n    <>\\n      <h2>Inbox</h2>\\n      <ul>\\n        {letters.map(letter => (\\n          <Letter\\n            key={letter.id}\\n            letter={letter}\\n            isSelected={\\n              selectedIds.includes(letter.id)\\n            }\\n            onToggle={handleToggle}\\n          />\\n        ))}\\n        <hr />\\n        <p>\\n          <b>\\n            You selected {selectedCount} letters\\n          </b>\\n        </p>\\n      </ul>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Letter.js\",\"children\":\"export default function Letter({\\n  letter,\\n  onToggle,\\n  isSelected,\\n}) {\\n  return (\\n    <li className={\\n      isSelected ? 'selected' : ''\\n    }>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isSelected}\\n          onChange={() => {\\n            onToggle(letter.id);\\n          }}\\n        />\\n        {letter.subject}\\n      </label>\\n    </li>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const letters = [{\\n  id: 0,\\n  subject: 'Ready for adventure?',\\n  isStarred: true,\\n}, {\\n  id: 1,\\n  subject: 'Time to check in!',\\n  isStarred: false,\\n}, {\\n  id: 2,\\n  subject: 'Festival Begins in Just SEVEN Days!',\\n  isStarred: false,\\n}];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 5px; }\\nli { border-radius: 5px; }\\nlabel { width: 100%; padding: 5px; display: inline-block; }\\n.selected { background: #d2eaff; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"使用数组的一个小缺点是，对于每个项目，你都需要调用 \",[\"$r\",\"code\",null,{\"children\":\"selectedIds.includes(letter.id)\"}],\" 来检查它是否被选中。如果数组非常大，则这可能会成为性能问题，因为带有 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"includes()\"}]}],\" 的数组搜索需要线性时间，并且你正在为每个单独的项目执行此搜索。\"]}],[\"$r\",\"p\",null,{\"children\":[\"要解决这个问题，你可以在 state 中使用一个 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Set\"}],\" 对象，它提供了快速的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"has()\"}]}],\" 操作：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { letters } from './data.js';\\nimport Letter from './Letter.js';\\n\\nexport default function MailClient() {\\n  const [selectedIds, setSelectedIds] = useState(\\n    new Set()\\n  );\\n\\n  const selectedCount = selectedIds.size;\\n\\n  function handleToggle(toggledId) {\\n    // Create a copy (to avoid mutation).\\n    const nextIds = new Set(selectedIds);\\n    if (nextIds.has(toggledId)) {\\n      nextIds.delete(toggledId);\\n    } else {\\n      nextIds.add(toggledId);\\n    }\\n    setSelectedIds(nextIds);\\n  }\\n\\n  return (\\n    <>\\n      <h2>Inbox</h2>\\n      <ul>\\n        {letters.map(letter => (\\n          <Letter\\n            key={letter.id}\\n            letter={letter}\\n            isSelected={\\n              selectedIds.has(letter.id)\\n            }\\n            onToggle={handleToggle}\\n          />\\n        ))}\\n        <hr />\\n        <p>\\n          <b>\\n            You selected {selectedCount} letters\\n          </b>\\n        </p>\\n      </ul>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Letter.js\",\"children\":\"export default function Letter({\\n  letter,\\n  onToggle,\\n  isSelected,\\n}) {\\n  return (\\n    <li className={\\n      isSelected ? 'selected' : ''\\n    }>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isSelected}\\n          onChange={() => {\\n            onToggle(letter.id);\\n          }}\\n        />\\n        {letter.subject}\\n      </label>\\n    </li>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const letters = [{\\n  id: 0,\\n  subject: 'Ready for adventure?',\\n  isStarred: true,\\n}, {\\n  id: 1,\\n  subject: 'Time to check in!',\\n  isStarred: false,\\n}, {\\n  id: 2,\\n  subject: 'Festival Begins in Just SEVEN Days!',\\n  isStarred: false,\\n}];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 5px; }\\nli { border-radius: 5px; }\\nlabel { width: 100%; padding: 5px; display: inline-block; }\\n.selected { background: #d2eaff; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"现在每个项目都会进行 \",[\"$r\",\"code\",null,{\"children\":\"selectedIds.has(letter.id)\"}],\" 检查，这非常快。\"]}],[\"$r\",\"p\",null,{\"children\":[\"请记住，你\",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state\",\"children\":\"不应该在 state 中改变对象\"}],\"，包括 Set 中。这就是为什么 \",[\"$r\",\"code\",null,{\"children\":\"handleToggle\"}],\" 函数首先创建 Set 的 \",[\"$r\",\"strong\",null,{\"children\":\"副本\"}],\"，然后更新该副本的原因。\"]}]]}]]}]]","meta":{"title":"选择 State 结构","translators":["Davont"]}},"__N_SSG":true}