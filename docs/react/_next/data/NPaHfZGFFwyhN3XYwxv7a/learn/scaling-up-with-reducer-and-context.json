{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#combining-a-reducer-with-context\",\"depth\":2,\"text\":\"结合使用 reducer 和 context \"},{\"url\":\"#step-1-create-the-context\",\"depth\":3,\"text\":\"第一步: 创建 context \"},{\"url\":\"#step-2-put-state-and-dispatch-into-context\",\"depth\":3,\"text\":\"第二步: 将 state 和 dispatch 函数 放入 context \"},{\"url\":\"#step-3-use-context-anywhere-in-the-tree\",\"depth\":3,\"text\":\"Step 3: 在组件树中的任何地方使用 context \"},{\"url\":\"#moving-all-wiring-into-a-single-file\",\"depth\":2,\"text\":\"将相关逻辑迁移到一个文件当中 \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"}]","content":"[[\"$r\",\"MaxWidth\",\"8\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"Reducer 可以整合组件的状态更新逻辑。Context 可以将信息深入传递给其他组件。你可以组合使用它们来共同管理一个复杂页面的状态。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何结合使用 reducer 和 context\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何去避免通过 props 传递 state 和 dispatch\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何将 context 和状态逻辑保存在一个单独的文件中\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"combining-a-reducer-with-context\",\"children\":\"结合使用 reducer 和 context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/extracting-state-logic-into-a-reducer\",\"children\":\"reducer 介绍\"}],\" 的例子里面，状态被 reducer 所管理。reducer 函数包含了所有的状态更新逻辑并在此文件的底部声明：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask\\n        onAddTask={handleAddTask}\\n      />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({ onAddTask }) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        onAddTask(text);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({\\n  tasks,\\n  onChangeTask,\\n  onDeleteTask\\n}) {\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task\\n            task={task}\\n            onChange={onChangeTask}\\n            onDelete={onDeleteTask}\\n          />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task, onChange, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            onChange({\\n              ...task,\\n              text: e.target.value\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"40\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Reducer 有助于保持事件处理程序的简短明了。但随着应用规模越来越庞大，你就可能会遇到别的困难。\",[\"$r\",\"strong\",null,{\"children\":[\"目前，\",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" 状态和 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 函数仅在顶级 \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 组件中可用\"]}],\"。要让其他组件读取任务列表或更改它，你必须显式 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component\",\"children\":\"传递\"}],\" 当前状态和事件处理程序，将其作为 props。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，\",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 将 一系列 task 和事件处理程序传递给 \",[\"$r\",\"code\",null,{\"children\":\"TaskList\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<TaskList\\n  tasks={tasks}\\n  onChangeTask={handleChangeTask}\\n  onDeleteTask={handleDeleteTask}\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"TaskList\"}],\" 将事件处理程序传递给 \",[\"$r\",\"code\",null,{\"children\":\"Task\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<Task\\n  task={task}\\n  onChange={onChangeTask}\\n  onDelete={onDeleteTask}\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在像这样的小示例里这样做没什么问题，但是如果你有成千上百个组件，传递所有状态和函数可能会非常麻烦！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这就是为什么，比起通过 props 传递它们，你可能想把 \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" 状态和 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 函数都 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"放入 context\"}],\"。\",[\"$r\",\"strong\",null,{\"children\":[\"这样，所有的在 \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 组件树之下的组件都不必一直往下传 props 而可以直接读取 tasks 和 dispatch 函数\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面将介绍如何结合使用 reducer 和 context：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"创建\"}],\" context。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"将 state 和 dispatch \",[\"$r\",\"strong\",null,{\"children\":\"放入\"}],\" context。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在组件树的任何地方 \",[\"$r\",\"strong\",null,{\"children\":\"使用\"}],\" context。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-1-create-the-context\",\"children\":\"第一步: 创建 context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 返回当前的 \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 函数来让你更新它们：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了将它们从组件树往下传，你将 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context#step-2-use-the-context\",\"children\":\"创建\"}],\" 两个不同的 context：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"TasksContext\"}],\" 提供当前的 tasks 列表。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"TasksDispatchContext\"}],\" 提供了一个函数可以让组件分发动作。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"将它们从单独的文件导出，以便以后可以从其他文件导入它们：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask\\n        onAddTask={handleAddTask}\\n      />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js active\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({ onAddTask }) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        onAddTask(text);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({\\n  tasks,\\n  onChangeTask,\\n  onDeleteTask\\n}) {\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task\\n            task={task}\\n            onChange={onChangeTask}\\n            onDelete={onDeleteTask}\\n          />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task, onChange, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            onChange({\\n              ...task,\\n              text: e.target.value\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"52\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这里，你把 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 作为默认值传递给两个 context。实际值是由 \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 组件提供的。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-2-put-state-and-dispatch-into-context\",\"children\":\"第二步: 将 state 和 dispatch 函数 放入 context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，你可以将所有的 context 导入 \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 组件。获取 \",[\"$r\",\"code\",null,{\"children\":\"useReducer()\"}],\" 返回的 \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 并将它们 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context#step-3-provide-the-context\",\"children\":\"提供\"}],\" 给整个组件树：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,7-8}\",\"children\":\"import { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n  // ...\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        ...\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在，你可以同时通过 props 和 context 传递信息：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId\\n    });\\n  }\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        <h1>Day off in Kyoto</h1>\\n        <AddTask\\n          onAddTask={handleAddTask}\\n        />\\n        <TaskList\\n          tasks={tasks}\\n          onChangeTask={handleChangeTask}\\n          onDeleteTask={handleDeleteTask}\\n        />\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({ onAddTask }) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        onAddTask(text);\\n      }}>Add</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({\\n  tasks,\\n  onChangeTask,\\n  onDeleteTask\\n}) {\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task\\n            task={task}\\n            onChange={onChangeTask}\\n            onDelete={onDeleteTask}\\n          />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task, onChange, onDelete }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            onChange({\\n              ...task,\\n              text: e.target.value\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在下一步中，你将删除通过 props 传递的代码。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-3-use-context-anywhere-in-the-tree\",\"children\":\"Step 3: 在组件树中的任何地方使用 context \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在你不需要将 tasks 和事件处理程序在组件树中传递：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-5}\",\"children\":\"<TasksContext.Provider value={tasks}>\\n  <TasksDispatchContext.Provider value={dispatch}>\\n    <h1>Day off in Kyoto</h1>\\n    <AddTask />\\n    <TaskList />\\n  </TasksDispatchContext.Provider>\\n</TasksContext.Provider>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"相反，任何需要 tasks 的组件都可以从 \",[\"$r\",\"code\",null,{\"children\":\"TaskContext\"}],\" 中读取它：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"export default function TaskList() {\\n  const tasks = useContext(TasksContext);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"任何组件都可以从 context 中读取 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 函数并调用它，从而更新任务列表：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,9-13}\",\"children\":\"export default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useContext(TasksDispatchContext);\\n  // ...\\n  return (\\n    // ...\\n    <button onClick={() => {\\n      setText('');\\n      dispatch({\\n        type: 'added',\\n        id: nextId++,\\n        text: text,\\n      });\\n    }}>Add</button>\\n    // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 组件不会向下传递任何事件处理程序，\",[\"$r\",\"code\",null,{\"children\":\"TaskList\"}],\" 也不会\"]}],\"。每个组件都会读取它需要的 context：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        <h1>Day off in Kyoto</h1>\\n        <AddTask />\\n        <TaskList />\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useContext(TasksDispatchContext);\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js active\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useContext(TasksContext);\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useContext(TasksDispatchContext);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"90\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"state 仍然 “存在于” 顶层 \",[\"$r\",\"code\",null,{\"children\":\"Task\"}],\" 组件中，由 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 进行管理\"]}],\"。不过，组件树里的组件只要导入这些 context 之后就可以获取 \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\"。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"moving-all-wiring-into-a-single-file\",\"children\":\"将相关逻辑迁移到一个文件当中 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这不是必须的，但你可以通过将 reducer 和 context 移动到单个文件中来进一步整理组件。目前，“TasksContext.js” 仅包含两个 context 声明：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"来给这个文件添加更多代码！将 reducer 移动到此文件中，然后声明一个新的 \",[\"$r\",\"code\",null,{\"children\":\"TasksProvider\"}],\" 组件。此组件将所有部分连接在一起：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"它将管理 reducer 的状态。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"它将提供现有的 context 给组件树。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它将 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[\"把 \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" 作为 prop\"]}],\"，所以你可以传递 JSX。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":[\"这将使 \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 组件更加直观：\"]}]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksProvider } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  return (\\n    <TasksProvider>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask />\\n      <TaskList />\\n    </TasksProvider>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext, useReducer } from 'react';\\n\\nexport const TasksContext = createContext(null);\\nexport const TasksDispatchContext = createContext(null);\\n\\nexport function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useContext(TasksDispatchContext);\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js\",\"children\":\"import { useState, useContext } from 'react';\\nimport { TasksContext, TasksDispatchContext } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useContext(TasksContext);\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useContext(TasksDispatchContext);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"102\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你也可以从 \",[\"$r\",\"code\",null,{\"children\":\"TasksContext.js\"}],\" 中导出使用 context 的函数：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export function useTasks() {\\n  return useContext(TasksContext);\\n}\\n\\nexport function useTasksDispatch() {\\n  return useContext(TasksDispatchContext);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"组件可以通过以下函数读取 context：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const tasks = useTasks();\\nconst dispatch = useTasksDispatch();\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这不会改变任何行为，但它会允许你之后进一步分割这些 context 或向这些函数添加一些逻辑。\",[\"$r\",\"strong\",null,{\"children\":[\"现在所有的 context 和 reducer 连接部分都在 \",[\"$r\",\"code\",null,{\"children\":\"TasksContext.js\"}],\" 中。这保持了组件的干净和整洁，让我们专注于它们显示的内容，而不是它们从哪里获得数据：\"]}]]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport { TasksProvider } from './TasksContext.js';\\n\\nexport default function TaskApp() {\\n  return (\\n    <TasksProvider>\\n      <h1>Day off in Kyoto</h1>\\n      <AddTask />\\n      <TaskList />\\n    </TasksProvider>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TasksContext.js\",\"children\":\"import { createContext, useContext, useReducer } from 'react';\\n\\nconst TasksContext = createContext(null);\\n\\nconst TasksDispatchContext = createContext(null);\\n\\nexport function TasksProvider({ children }) {\\n  const [tasks, dispatch] = useReducer(\\n    tasksReducer,\\n    initialTasks\\n  );\\n\\n  return (\\n    <TasksContext.Provider value={tasks}>\\n      <TasksDispatchContext.Provider value={dispatch}>\\n        {children}\\n      </TasksDispatchContext.Provider>\\n    </TasksContext.Provider>\\n  );\\n}\\n\\nexport function useTasks() {\\n  return useContext(TasksContext);\\n}\\n\\nexport function useTasksDispatch() {\\n  return useContext(TasksDispatchContext);\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [...tasks, {\\n        id: action.id,\\n        text: action.text,\\n        done: false\\n      }];\\n    }\\n    case 'changed': {\\n      return tasks.map(t => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter(t => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('Unknown action: ' + action.type);\\n    }\\n  }\\n}\\n\\nconst initialTasks = [\\n  { id: 0, text: 'Philosopher’s Path', done: true },\\n  { id: 1, text: 'Visit the temple', done: false },\\n  { id: 2, text: 'Drink matcha', done: false }\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js\",\"children\":\"import { useState } from 'react';\\nimport { useTasksDispatch } from './TasksContext.js';\\n\\nexport default function AddTask() {\\n  const [text, setText] = useState('');\\n  const dispatch = useTasksDispatch();\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"Add task\\\"\\n        value={text}\\n        onChange={e => setText(e.target.value)}\\n      />\\n      <button onClick={() => {\\n        setText('');\\n        dispatch({\\n          type: 'added',\\n          id: nextId++,\\n          text: text,\\n        }); \\n      }}>Add</button>\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js active\",\"children\":\"import { useState } from 'react';\\nimport { useTasks, useTasksDispatch } from './TasksContext.js';\\n\\nexport default function TaskList() {\\n  const tasks = useTasks();\\n  return (\\n    <ul>\\n      {tasks.map(task => (\\n        <li key={task.id}>\\n          <Task task={task} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({ task }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const dispatch = useTasksDispatch();\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={e => {\\n            dispatch({\\n              type: 'changed',\\n              task: {\\n                ...task,\\n                text: e.target.value\\n              }\\n            });\\n          }} />\\n        <button onClick={() => setIsEditing(false)}>\\n          Save\\n        </button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>\\n          Edit\\n        </button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={e => {\\n          dispatch({\\n            type: 'changed',\\n            task: {\\n              ...task,\\n              done: e.target.checked\\n            }\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => {\\n        dispatch({\\n          type: 'deleted',\\n          id: task.id\\n        });\\n      }}>\\n        Delete\\n      </button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 5px; }\\nli { list-style-type: none; }\\nul, li { margin: 0; padding: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以将 \",[\"$r\",\"code\",null,{\"children\":\"TasksProvider\"}],\" 视为页面的一部分，它知道如何处理 tasks。\",[\"$r\",\"code\",null,{\"children\":\"useTasks\"}],\" 用来读取它们，\",[\"$r\",\"code\",null,{\"children\":\"useTasksDispatch\"}],\" 用来从组件树下的任何组件更新它们。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"像 \",[\"$r\",\"code\",null,{\"children\":\"useTasks\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useTasksDispatch\"}],\" 这样的函数被称为 \",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks\",\"children\":\"自定义 Hook\"}],\"。\"]}],\" 如果你的函数名以 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 开头，它就被认为是一个自定义 Hook。这让你可以使用其他 Hook，比如 \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"随着应用的增长，你可能会有许多这样的 context 和 reducer 的组合。这是一种强大的拓展应用并 \",[\"$r\",\"a\",null,{\"href\":\"/learn/sharing-state-between-components\",\"children\":\"提升状态\"}],\" 的方式，让你在组件树深处访问数据时无需进行太多工作。\"]}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以将 reducer 与 context 相结合，让任何组件读取和更新它的状态。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"为子组件提供 state 和 dispatch 函数：\",\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"创建两个 context (一个用于 state,一个用于 dispatch 函数)。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"让组件的 context 使用 reducer。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"使用组件中需要读取的 context。\"}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你可以通过将所有传递信息的代码移动到单个文件中来进一步整理组件。\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你可以导出一个像 \",[\"$r\",\"code\",null,{\"children\":\"TasksProvider\"}],\" 可以提供 context 的组件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你也可以导出像 \",[\"$r\",\"code\",null,{\"children\":\"useTasks\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useTasksDispatch\"}],\" 这样的自定义 Hook。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以在你的应用程序中大量使用 context 和 reducer 的组合。\"}],\"\\n\"]}]}]]}]]","meta":{"title":"使用 Reducer 和 Context 拓展你的应用","translators":["Ikaite","KnowsCount","TinaaaaP","yyyang1996"]}},"__N_SSG":true}