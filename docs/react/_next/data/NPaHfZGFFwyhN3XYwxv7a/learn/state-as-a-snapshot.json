{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#setting-state-triggers-renders\",\"depth\":2,\"text\":\"设置 state 会触发渲染 \"},{\"url\":\"#rendering-takes-a-snapshot-in-time\",\"depth\":2,\"text\":\"渲染会及时生成一张快照 \"},{\"url\":\"#state-over-time\",\"depth\":2,\"text\":\"随时间变化的 state \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"10\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"也许 state 变量看起来和一般的可读写的 JavaScript 变量类似。但 state 在其表现出的特性上更像是一张快照。设置它不会更改你已有的 state 变量，但会触发重新渲染。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"设置 state 如何导致重新渲染\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"state 在何时以何种方式更新\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"为什么 state 不在设置后立即更新\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"事件处理函数如何获取 state 的一张“快照”\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"setting-state-triggers-renders\",\"children\":\"设置 state 会触发渲染 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可能会认为你的用户界面会直接对点击之类的用户输入做出响应并发生变化。在 React 中，它的工作方式与这种思维模型略有不同。在上一页中，你看到了来自 React 的\",[\"$r\",\"a\",null,{\"href\":\"/learn/render-and-commit#step-1-trigger-a-render\",\"children\":\"设置 state 请求重新渲染\"}],\"。这意味着要使界面对输入做出反应，你需要设置其 state。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，当你按下 “send” 时，\",[\"$r\",\"code\",null,{\"children\":\"setIsSent(true)\"}],\" 会通知 React 重新渲染 UI：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [isSent, setIsSent] = useState(false);\\n  const [message, setMessage] = useState('Hi!');\\n  if (isSent) {\\n    return <h1>Your message is on its way!</h1>\\n  }\\n  return (\\n    <form onSubmit={(e) => {\\n      e.preventDefault();\\n      setIsSent(true);\\n      sendMessage(message);\\n    }}>\\n      <textarea\\n        placeholder=\\\"Message\\\"\\n        value={message}\\n        onChange={e => setMessage(e.target.value)}\\n      />\\n      <button type=\\\"submit\\\">Send</button>\\n    </form>\\n  );\\n}\\n\\nfunction sendMessage(message) {\\n  // ...\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label, textarea { margin-bottom: 10px; display: block; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"28\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你单击按钮时会发生以下情况：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"执行 \",[\"$r\",\"code\",null,{\"children\":\"onSubmit\"}],\" 事件处理函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"setIsSent(true)\"}],\" 将 \",[\"$r\",\"code\",null,{\"children\":\"isSent\"}],\" 设置为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 并排列一个新的渲染。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React 根据新的 \",[\"$r\",\"code\",null,{\"children\":\"isSent\"}],\" 值重新渲染组件。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"让我们仔细看看 state 和渲染之间的关系。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"rendering-takes-a-snapshot-in-time\",\"children\":\"渲染会及时生成一张快照 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/render-and-commit#step-2-react-renders-your-components\",\"children\":\"“正在渲染”\"}],\" 就意味着 React 正在调用你的组件——一个函数。你从该函数返回的 JSX 就像是在某个时间点上 UI 的快照。它的 props、事件处理函数和内部变量都是 \",[\"$r\",\"strong\",null,{\"children\":\"根据当前渲染时的 state\"}],\" 被计算出来的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"与照片或电影画面不同，你返回的 UI “快照”是可交互的。它其中包括类似事件处理函数的逻辑，这些逻辑用于指定如何对输入作出响应。React 随后会更新屏幕来匹配这张快照，并绑定事件处理函数。因此，按下按钮就会触发你 JSX 中的点击事件处理函数。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当 React 重新渲染一个组件时：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React 会再次调用你的函数\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"函数会返回新的 JSX 快照\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React 会更新界面以匹配返回的快照\"}],\"\\n\"]}],\"\\n\"]}],[\"$r\",\"IllustrationBlock\",null,{\"title\":\"重新渲染\",\"sequential\":true,\"children\":[[\"$r\",\"Illustration\",null,{\"caption\":\"React 执行函数\",\"src\":\"/images/docs/illustrations/i_render1.png\"}],[\"$r\",\"Illustration\",null,{\"caption\":\"计算快照\",\"src\":\"/images/docs/illustrations/i_render2.png\"}],[\"$r\",\"Illustration\",null,{\"caption\":\"更新 DOM 树\",\"src\":\"/images/docs/illustrations/i_render3.png\"}]]}],[\"$r\",\"MaxWidth\",\"32\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"作为一个组件的记忆，state 不同于在你的函数返回之后就会消失的普通变量。state 实际上“活”在 React 本身中——就像被摆在一个架子上！——位于你的函数之外。当 React 调用你的组件时，它会为特定的那一次渲染提供一张 state 快照。你的组件会在其 JSX 中返回一张包含一整套新的 props 和事件处理函数的 UI 快照 ，其中所有的值都是 \",[\"$r\",\"strong\",null,{\"children\":\"根据那一次渲染中 state 的值\"}],\" 被计算出来的！\"]}],\"\\n\"]}],[\"$r\",\"IllustrationBlock\",null,{\"sequential\":true,\"children\":[[\"$r\",\"Illustration\",null,{\"caption\":\"React 收到 setUpdate 通知\",\"src\":\"/images/docs/illustrations/i_state-snapshot1.png\"}],[\"$r\",\"Illustration\",null,{\"caption\":\"React 更新 state 的值\",\"src\":\"/images/docs/illustrations/i_state-snapshot2.png\"}],[\"$r\",\"Illustration\",null,{\"caption\":\"React 向组件内传入一张 state 的快照\",\"src\":\"/images/docs/illustrations/i_state-snapshot3.png\"}]]}],[\"$r\",\"MaxWidth\",\"38\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里有个向你展示其运行原理的小例子。在这个例子中，你可能会以为点击“+3”按钮会调用 \",[\"$r\",\"code\",null,{\"children\":\"setNumber(number + 1)\"}],\" 三次从而使计数器递增三次。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"看看你点击“+3”按钮时会发生什么：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Counter() {\\n  const [number, setNumber] = useState(0);\\n\\n  return (\\n    <>\\n      <h1>{number}</h1>\\n      <button onClick={() => {\\n        setNumber(number + 1);\\n        setNumber(number + 1);\\n        setNumber(number + 1);\\n      }}>+3</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { display: inline-block; margin: 10px; font-size: 20px; }\\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"66\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，每次点击只会让 \",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 递增一次！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"设置 state 只会为下一次渲染变更 state 的值\"}],\"。在第一次渲染期间，\",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 为 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"。这也就解释了为什么在 \",[\"$r\",\"strong\",null,{\"children\":\"那次渲染中的\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理函数中，即便在调用了 \",[\"$r\",\"code\",null,{\"children\":\"setNumber(number + 1)\"}],\" 之后，\",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 的值也仍然是 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<button onClick={() => {\\n  setNumber(number + 1);\\n  setNumber(number + 1);\\n  setNumber(number + 1);\\n}}>+3</button>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"以下是这个按钮的点击事件处理函数通知 React 要做的事情：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"setNumber(number + 1)\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 是 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 所以 \",[\"$r\",\"code\",null,{\"children\":\"setNumber(0 + 1)\"}],\"。\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React 准备在下一次渲染时将 \",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 更改为 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"setNumber(number + 1)\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 是\",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 所以 \",[\"$r\",\"code\",null,{\"children\":\"setNumber(0 + 1)\"}],\"。\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React 准备在下一次渲染时将 \",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 更改为 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"setNumber(number + 1)\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 是\",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 所以 \",[\"$r\",\"code\",null,{\"children\":\"setNumber(0 + 1)\"}],\"。\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React 准备在下一次渲染时将 \",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 更改为 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"尽管你调用了三次 \",[\"$r\",\"code\",null,{\"children\":\"setNumber(number + 1)\"}],\"，但在 \",[\"$r\",\"strong\",null,{\"children\":\"这次渲染的\"}],\" 事件处理函数中 \",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 会一直是 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"，所以你会三次将 state 设置成 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"。这就是为什么在你的事件处理函数执行完以后，React 重新渲染的组件中的 \",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 等于 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"3\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你还可以通过在心里把 state 变量替换成它们在你代码中的值来想象这个过程。由于 \",[\"$r\",\"strong\",null,{\"children\":\"这次渲染\"}],\" 中的 state 变量 \",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 是 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"，其事件处理函数看起来会像这样：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<button onClick={() => {\\n  setNumber(0 + 1);\\n  setNumber(0 + 1);\\n  setNumber(0 + 1);\\n}}>+3</button>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"对于下一次渲染来说，\",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 是 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"，因此 \",[\"$r\",\"strong\",null,{\"children\":\"那次渲染中的\"}],\" 点击事件处理函数看起来会像这样：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<button onClick={() => {\\n  setNumber(1 + 1);\\n  setNumber(1 + 1);\\n  setNumber(1 + 1);\\n}}>+3</button>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这就是为什么再次点击按钮会将计数器设置为 \",[\"$r\",\"code\",null,{\"children\":\"2\"}],\"，下次点击时会设为 \",[\"$r\",\"code\",null,{\"children\":\"3\"}],\"，依此类推。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"state-over-time\",\"children\":\"随时间变化的 state \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"好的，刚才那些很有意思。试着猜猜点击这个按钮会发出什么警告：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Counter() {\\n  const [number, setNumber] = useState(0);\\n\\n  return (\\n    <>\\n      <h1>{number}</h1>\\n      <button onClick={() => {\\n        setNumber(number + 5);\\n        alert(number);\\n      }}>+5</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { display: inline-block; margin: 10px; font-size: 20px; }\\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"74\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你使用之前替换的方法，你就能猜到这个提示框将会显示 “0”：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"setNumber(0 + 5);\\nalert(0);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但如果你在这个提示框上加上一个定时器， 使得它在组件重新渲染 \",[\"$r\",\"strong\",null,{\"children\":\"之后\"}],\" 才触发，又会怎样呢？是会显示 “0” 还是 “5” ？猜一猜！\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Counter() {\\n  const [number, setNumber] = useState(0);\\n\\n  return (\\n    <>\\n      <h1>{number}</h1>\\n      <button onClick={() => {\\n        setNumber(number + 5);\\n        setTimeout(() => {\\n          alert(number);\\n        }, 3000);\\n      }}>+5</button>\\n    </>\\n  )\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { display: inline-block; margin: 10px; font-size: 20px; }\\nh1 { display: inline-block; margin: 10px; width: 30px; text-align: center; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"90\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"惊讶吗？你如果使用替代法，就能看到被传入提示框的 state “快照”。\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"setNumber(0 + 5);\\nsetTimeout(() => {\\n  alert(0);\\n}, 3000);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"到提示框运行时，React 中存储的 state 可能已经发生了更改，但它是使用用户与之交互时状态的快照进行调度的！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"一个 state 变量的值永远不会在一次渲染的内部发生变化，\"}],\" 即使其事件处理函数的代码是异步的。在 \",[\"$r\",\"strong\",null,{\"children\":\"那次渲染的\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 内部，\",[\"$r\",\"code\",null,{\"children\":\"number\"}],\" 的值即使在调用 \",[\"$r\",\"code\",null,{\"children\":\"setNumber(number + 5)\"}],\" 之后也还是 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"。它的值在 React 通过调用你的组件“获取 UI 的快照”时就被“固定”了。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这里有个示例能够说明上述特性会使你的事件处理函数更不容易出现计时错误。下面是一个会在五秒延迟之后发送一条消息的表单。想象以下场景：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你按下“发送”按钮，向 Alice 发送“你好”。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在五秒延迟结束之前，将“To”字段的值更改为“Bob”。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你觉得 \",[\"$r\",\"code\",null,{\"children\":\"alert\"}],\" 会显示什么？它是会显示“你向 Alice 说了你好“还是会显示“你向 Bob 说了你好”？根据你已经学到的知识猜一猜，然后动手试一试：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [to, setTo] = useState('Alice');\\n  const [message, setMessage] = useState('Hello');\\n\\n  function handleSubmit(e) {\\n    e.preventDefault();\\n    setTimeout(() => {\\n      alert(`You said ${message} to ${to}`);\\n    }, 5000);\\n  }\\n\\n  return (\\n    <form onSubmit={handleSubmit}>\\n      <label>\\n        To:{' '}\\n        <select\\n          value={to}\\n          onChange={e => setTo(e.target.value)}>\\n          <option value=\\\"Alice\\\">Alice</option>\\n          <option value=\\\"Bob\\\">Bob</option>\\n        </select>\\n      </label>\\n      <textarea\\n        placeholder=\\\"Message\\\"\\n        value={message}\\n        onChange={e => setMessage(e.target.value)}\\n      />\\n      <button type=\\\"submit\\\">Send</button>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label, textarea { margin-bottom: 10px; display: block; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"98\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"React 会使 state 的值始终”固定“在一次渲染的各个事件处理函数内部。\"}],\" 你无需担心代码运行时 state 是否发生了变化。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是，万一你想在重新渲染之前读取最新的 state 怎么办？你应该使用 \",[\"$r\",\"a\",null,{\"href\":\"/learn/queueing-a-series-of-state-updates\",\"children\":\"状态更新函数\"}],\"，下一页将会介绍！\"]}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"设置 state 请求一次新的渲染。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React 将 state 存储在组件之外，就像在架子上一样。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当你调用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 时，React 会为你提供\",[\"$r\",\"strong\",null,{\"children\":\"该次渲染\"}],\" 的一张 state 快照。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"变量和事件处理函数不会在重渲染中“存活”。每个渲染都有自己的事件处理函数。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"每个渲染（以及其中的函数）始终“看到”的是 React 提供给\",[\"$r\",\"strong\",null,{\"children\":\"这个\"}],\" 渲染的 state 快照。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以在心中替换事件处理函数中的 state，类似于替换渲染的 JSX。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"过去创建的事件处理函数拥有的是创建它们的那次渲染中的 state 值。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"implement-a-traffic-light\",\"children\":\"实现红绿灯组件 \"}],[\"$r\",\"p\",null,{\"children\":\"以下是一个人行道红绿灯组件，在按下按钮时会切换状态：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TrafficLight() {\\n  const [walk, setWalk] = useState(true);\\n\\n  function handleClick() {\\n    setWalk(!walk);\\n  }\\n\\n  return (\\n    <>\\n      <button onClick={handleClick}>\\n        Change to {walk ? 'Stop' : 'Walk'}\\n      </button>\\n      <h1 style={{\\n        color: walk ? 'darkgreen' : 'darkred'\\n      }}>\\n        {walk ? 'Walk' : 'Stop'}\\n      </h1>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"h1 { margin-top: 20px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"向 click 事件处理函数添加一个 \",[\"$r\",\"code\",null,{\"children\":\"alert\"}],\" 。当灯为绿色且显示“Walk”时，单击按钮应显示“Stop is next”。当灯为红色并显示“Stop”时，单击按钮应显示“Walk is next”。\"]}],[\"$r\",\"p\",null,{\"children\":[\"把 \",[\"$r\",\"code\",null,{\"children\":\"alert\"}],\" 方法放在 \",[\"$r\",\"code\",null,{\"children\":\"setWalk\"}],\" 方法之前或之后有区别吗？\"]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"你的 \",[\"$r\",\"code\",null,{\"children\":\"alert\"}],\" 看起来应该像是这样：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TrafficLight() {\\n  const [walk, setWalk] = useState(true);\\n\\n  function handleClick() {\\n    setWalk(!walk);\\n    alert(walk ? 'Stop is next' : 'Walk is next');\\n  }\\n\\n  return (\\n    <>\\n      <button onClick={handleClick}>\\n        Change to {walk ? 'Stop' : 'Walk'}\\n      </button>\\n      <h1 style={{\\n        color: walk ? 'darkgreen' : 'darkred'\\n      }}>\\n        {walk ? 'Walk' : 'Stop'}\\n      </h1>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"h1 { margin-top: 20px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"无论你是将它放在 \",[\"$r\",\"code\",null,{\"children\":\"setWalk\"}],\" 调用之前还是之后都不会有区别。那次渲染的 \",[\"$r\",\"code\",null,{\"children\":\"walk\"}],\" 的值是固定的。调用\",[\"$r\",\"code\",null,{\"children\":\"setWalk\"}],\" 只会为 \",[\"$r\",\"em\",null,{\"children\":\"下次\"}],\" 渲染对它进行变更，而不会影响来自上次渲染的事件处理函数。\"]}],[\"$r\",\"p\",null,{\"children\":\"这一行代码乍看之下似乎有违直觉：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"alert(walk ? 'Stop is next' : 'Walk is next');\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"但如果你将其读作“如果交通灯显示‘现在就走吧’，则消息应显示‘接下来是停’。”就容易理解了。你事件处理函数中的 \",[\"$r\",\"code\",null,{\"children\":\"walk\"}],\" 变量与所渲染的 \",[\"$r\",\"code\",null,{\"children\":\"walk\"}],\" 值是一致的，并且不会发生改变。\"]}],[\"$r\",\"p\",null,{\"children\":[\"你可以用替代法来验证这是否正确。当 \",[\"$r\",\"code\",null,{\"children\":\"walk\"}],\" 为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 时，你会得到：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<button onClick={() => {\\n  setWalk(false);\\n  alert('Stop is next');\\n}}>\\n  Change to Stop\\n</button>\\n<h1 style={{color: 'darkgreen'}}>\\n  Walk\\n</h1>\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"因此，单击 “Change to Stop” 就会入队一次将 \",[\"$r\",\"code\",null,{\"children\":\"walk\"}],\" 设置为 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\" 的渲染，并弹出显示 “Stop is next” 的提示框。\"]}]]}]]}]]","meta":{"title":"state 如同一张快照","translators":["zzw","Neo42"]}},"__N_SSG":true}