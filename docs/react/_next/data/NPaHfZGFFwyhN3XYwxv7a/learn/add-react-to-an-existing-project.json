{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#using-react-for-an-entire-subroute-of-your-existing-website\",\"depth\":2,\"text\":\"在现有网站的子路由中使用 React \"},{\"url\":\"#using-react-for-a-part-of-your-existing-page\",\"depth\":2,\"text\":\"在现有页面的一部分中使用 React \"},{\"url\":\"#step-1-set-up-a-modular-javascript-environment\",\"depth\":3,\"text\":\"步骤 1：配置模块化的 JavaScript 环境 \"},{\"url\":\"#step-2-render-react-components-anywhere-on-the-page\",\"depth\":3,\"text\":\"步骤 2：在页面的任何位置渲染 React 组件 \"},{\"url\":\"#using-react-native-in-an-existing-native-mobile-app\",\"depth\":2,\"text\":\"在现有的原生移动应用中使用 React Native \"}]","content":"[[\"$r\",\"MaxWidth\",\"38\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"如果想对现有项目添加一些交互，不必使用 React 将其整个重写。只需将 React 添加到已有技术栈中，就可以在任何位置渲染交互式的 React 组件。\"}]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"你需要安装 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/zh-cn/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js\"}],\" 以进行本地开发\"]}],\"。尽管可以使用 \",[\"$r\",\"a\",null,{\"href\":\"/learn/installation#try-react\",\"children\":\"在线演练场\"}],\" 或简单的 HTML 页面来尝试 React，但实际上大多数用于开发的 JavaScript 工具都需要 Node.js。\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"using-react-for-an-entire-subroute-of-your-existing-website\",\"children\":\"在现有网站的子路由中使用 React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设你在 \",[\"$r\",\"code\",null,{\"children\":\"example.com\"}],\" 部署了一个其他服务端技术（例如 Rails）构建的 Web 应用，但是你又想在 \",[\"$r\",\"code\",null,{\"children\":\"example.com/some-app/\"}],\" 部署一个 React 项目。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"以下是推荐的配置方式：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用一个 \",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project\",\"children\":\"基于 React 的框架\"}],\" 构建 \",[\"$r\",\"strong\",null,{\"children\":\"应用的 React 部分\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"在框架配置中将 \",[\"$r\",\"code\",null,{\"children\":\"/some-app\"}],\" 指定为基本路径\"]}],\"（这里有 \",[\"$r\",\"a\",null,{\"href\":\"https://nextjs.org/docs/api-reference/next.config.js/basepath\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Next.js\"}],\" 与 \",[\"$r\",\"a\",null,{\"href\":\"https://www.gatsbyjs.com/docs/how-to/previews-deploys-hosting/path-prefix/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Gatsby\"}],\" 的配置样例）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"配置服务器或代理\"}],\"，以便所有位于 \",[\"$r\",\"code\",null,{\"children\":\"/some-app/\"}],\" 下的请求都由 React 应用处理。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这可以确保应用的 React 部分可以受益于这些框架中内置的 \",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project#can-i-use-react-without-a-framework\",\"children\":\"最佳实践\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"许多基于 React 的框架都是全栈的，从而可以让你的 React 应用充分利用服务器。但是，即使无法或不想在服务器上运行 JavaScript，也可以使用相同的方法。在这种情况下，将 HTML/CSS/JS 导出（Next.js 的 \",[\"$r\",\"a\",null,{\"href\":\"https://nextjs.org/docs/advanced-features/static-html-export\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"next export\"}],\" output\"]}],\"，Gatsby 的 default）替换为 \",[\"$r\",\"code\",null,{\"children\":\"/some-app/\"}],\"。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"using-react-for-a-part-of-your-existing-page\",\"children\":\"在现有页面的一部分中使用 React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"假设有一个其他技术栈（无论是 Rails 这样的服务端技术，还是 Backbone 那样的客户端技术）构建的现有页面，并且想要在该页面的某个位置渲染交互式的 React 组件。这是集成 React 的常见方式——实际上，这也正是多年来大多数情况下 Meta 使用 React 的方式！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以分两步进行：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"配置 JavaScript 环境\"}],\"，以便使用 \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"JSX 语法\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"import\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"export\"}]}],\" 语法将代码拆分为模块，以及从 \",[\"$r\",\"a\",null,{\"href\":\"https://www.npmjs.com/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"npm\"}],\" 包注册表中使用包（例如 React）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"在需要的位置渲染 React 组件\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"确切的方法取决于现有的页面配置，因此让我们对一些细节进行说明。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-1-set-up-a-modular-javascript-environment\",\"children\":\"步骤 1：配置模块化的 JavaScript 环境 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"模块化的 JavaScript 环境可以让你在单一的文件中编写 React 组件，而不是在一个文件中编写所有的代码。它还可以让你使用其他开发人员在 \",[\"$r\",\"a\",null,{\"href\":\"https://www.npmjs.com/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"npm\"}],\" 注册表上发布的一些特别好用的包，包括 React！如何实现这一点取决于你现有的配置：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"如果你的应用已经使用 \",[\"$r\",\"code\",null,{\"children\":\"import\"}],\" 语句来分割成不同的文件，请尝试利用已有的配置\"]}],\"。检查在你的 JavaScript 代码中编写 \",[\"$r\",\"code\",null,{\"children\":\"<div />\"}],\"是否会导致语法错误。如果有语法错误，你可能需要使用 \",[\"$r\",\"a\",null,{\"href\":\"https://babeljs.io/setup\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Babel\"}],\" 转换你的 JavaScript 代码，并启用 \",[\"$r\",\"a\",null,{\"href\":\"https://babeljs.io/docs/babel-preset-react\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Babel React preset\"}],\" 来使用 JSX。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"如果你的应用没有用于编译 JavaScript 模块的配置，请使用 \",[\"$r\",\"a\",null,{\"href\":\"https://cn.vitejs.dev/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Vite\"}],\" 进行配置\"]}],\"。Vite 社区维护了与后端框架（包括 Rails、Django 和 Laravel）的 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/vitejs/awesome-vite#integrations-with-backends\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"许多集成项目\"}],\"。如果你的后端框架没有列出，请 \",[\"$r\",\"a\",null,{\"href\":\"https://cn.vitejs.dev/guide/backend-integration.html\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"按照此指南\"}],\" 手动将 Vite 构建集成到你的后端。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果想要检查你的配置是否有效，可以在项目文件夹中运行以下命令：\"}],\"\\n\",[\"$r\",\"TerminalBlock\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"npm install react react-dom\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然后在你的 JavaScript 主文件（它可能被称为 \",[\"$r\",\"code\",null,{\"children\":\"index.js\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"main.js\"}],\"）的顶部添加以下代码：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html hidden\",\"children\":\"<!DOCTYPE html>\\n<html>\\n  <head><title>My app</title></head>\\n  <body>\\n    <!-- 你现有的页面内容（在这个例子中，它将被替换） -->\\n  </body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\n// 清除现有的 HTML 内容\\ndocument.body.innerHTML = '<div id=\\\"app\\\"></div>';\\n\\n// 渲染你的 React 组件\\nconst root = createRoot(document.getElementById('app'));\\nroot.render(<h1>Hello, world</h1>);\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"60\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果页面的全部内容都被替换为“Hello, world!”，则一切正常！那么继续阅读。\"}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"第一次将模块化 JavaScript 环境集成到现有项目中可能会让人感到害怕，但这是值得的！如果遇到困难，请尝试我们的 \",[\"$r\",\"a\",null,{\"href\":\"/community\",\"children\":\"社区资源\"}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"https://chat.vitejs.dev/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Vite Chat\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-2-render-react-components-anywhere-on-the-page\",\"children\":\"步骤 2：在页面的任何位置渲染 React 组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在上一步中，此代码将被放在主文件的顶部：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\n// 清除现有的 HTML 内容\\ndocument.body.innerHTML = '<div id=\\\"app\\\"></div>';\\n\\n// 渲染你的 React 组件\\nconst root = createRoot(document.getElementById('app'));\\nroot.render(<h1>Hello, world</h1>);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当然，你实际上并不想清除现有的 HTML 内容！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"那么请删除此代码。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"相反，你可能想要在 HTML 中特定的位置渲染 React 组件。打开 HTML 页面（或用于生成它的服务端模板），并向任意一个标签添加一个唯一的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/id\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"id\"}]}],\" 属性，例如：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"children\":\"<!-- ... 你的 HTML 代码某处 ... -->\\n<nav id=\\\"navigation\\\"></nav>\\n<!-- ... 其他 HTML 代码 ... -->\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这样可以使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/getElementById\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"document.getElementById\"}]}],\" 查找到该 HTML 元素，并将其传递给 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\"，以便可以在其中渲染自己的 React 组件：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html\",\"children\":\"<!DOCTYPE html>\\n<html>\\n  <head><title>My app</title></head>\\n  <body>\\n    <p>This paragraph is a part of HTML.</p>\\n    <nav id=\\\"navigation\\\"></nav>\\n    <p>This paragraph is also a part of HTML.</p>\\n  </body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from 'react-dom/client';\\n\\nfunction NavigationBar() {\\n  // TODO: 实际实现一个导航栏\\n  return <h1>Hello from React!</h1>;\\n}\\n\\nconst domNode = document.getElementById('navigation');\\nconst root = createRoot(domNode);\\nroot.render(<NavigationBar />);\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意 \",[\"$r\",\"code\",null,{\"children\":\"index.html\"}],\" 中的原始 HTML 内容是如何保留的，但现在你自己的 \",[\"$r\",\"code\",null,{\"children\":\"NavigationBar\"}],\" React 组件出现在 HTML 的 \",[\"$r\",\"code\",null,{\"children\":\"<nav id=\\\"navigation\\\">\"}],\" 中。阅读 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot#rendering-a-page-partially-built-with-react\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\" 用法文档\"]}],\" 以了解如何在现有 HTML 页面中渲染 React 组件。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当在现有项目中采用 React 时，通常会从小型交互式组件（例如按钮）开始，然后逐渐“向上移动”，直到最终整个页面都由 React 构建。到那个时候，我们建议立即迁移到 \",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project\",\"children\":\"一个 React 框架\"}],\"，以充分利用 React 的优势。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"using-react-native-in-an-existing-native-mobile-app\",\"children\":\"在现有的原生移动应用中使用 React Native \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://reactnative.dev/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"React Native\"}],\" 也可以逐步集成到现有的原生应用中。如果已经有一个现有的 Android（Java 或 Kotlin）或 iOS（Objective-C 或 Swift）原生应用，请 \",[\"$r\",\"a\",null,{\"href\":\"https://reactnative.dev/docs/integration-with-existing-apps\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"按照本指南\"}],\" 将 React Native 添加到其中。\"]}]]}]]","meta":{"title":"将 React 添加到现有项目中"}},"__N_SSG":true}