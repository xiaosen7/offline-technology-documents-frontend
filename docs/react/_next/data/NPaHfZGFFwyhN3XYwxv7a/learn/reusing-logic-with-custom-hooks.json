{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#custom-hooks-sharing-logic-between-components\",\"depth\":2,\"text\":\"自定义 Hook：组件间共享逻辑 \"},{\"url\":\"#extracting-your-own-custom-hook-from-a-component\",\"depth\":3,\"text\":\"从组件中提取自定义 Hook \"},{\"url\":\"#hook-names-always-start-with-use\",\"depth\":3,\"text\":[\"Hook 的名称必须永远以 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 开头 \"]},{\"url\":\"#custom-hooks-let-you-share-stateful-logic-not-state-itself\",\"depth\":3,\"text\":\"自定义 Hook 共享的是状态逻辑，而不是状态本身 \"},{\"url\":\"#passing-reactive-values-between-hooks\",\"depth\":2,\"text\":\"在 Hook 之间传递响应值 \"},{\"url\":\"#passing-event-handlers-to-custom-hooks\",\"depth\":3,\"text\":\"把事件处理函数传到自定义 Hook 中 \"},{\"url\":\"#when-to-use-custom-hooks\",\"depth\":2,\"text\":\"什么时候使用自定义 Hook \"},{\"url\":\"#custom-hooks-help-you-migrate-to-better-patterns\",\"depth\":3,\"text\":\"自定义 Hook 帮助你迁移到更好的模式 \"},{\"url\":\"#there-is-more-than-one-way-to-do-it\",\"depth\":3,\"text\":\"不止一个方法可以做到 \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"12\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"React 有一些内置 Hook，例如 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\"。有时你需要一个用途更特殊的 Hook：例如获取数据，记录用户是否在线或者连接聊天室。虽然 React 中可能没有这些 Hook，但是你可以根据应用需求创建自己的 Hook。\"]}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"什么是自定义 Hook，以及如何编写\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何在组件间重用逻辑\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何给自定义 Hook 命名以及如何构建\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"提取自定义 Hook 的时机和原因\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"custom-hooks-sharing-logic-between-components\",\"children\":\"自定义 Hook：组件间共享逻辑 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"假设你正在开发一款重度依赖网络的应用（和大多数应用一样）。当用户使用应用时网络意外断开，你需要提醒他。你会怎么处理呢？看上去组件需要两个东西：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一个追踪网络是否在线的 state。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"一个订阅全局 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/online_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"online\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/offline_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"offline\"}]}],\" 事件并更新上述 state 的 Effect。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这会让组件与网络状态保持 \",[\"$r\",\"a\",null,{\"href\":\"/learn/synchronizing-with-effects\",\"children\":\"同步\"}],\"。你也许可以像这样开始：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport default function StatusBar() {\\n  const [isOnline, setIsOnline] = useState(true);\\n  useEffect(() => {\\n    function handleOnline() {\\n      setIsOnline(true);\\n    }\\n    function handleOffline() {\\n      setIsOnline(false);\\n    }\\n    window.addEventListener('online', handleOnline);\\n    window.addEventListener('offline', handleOffline);\\n    return () => {\\n      window.removeEventListener('online', handleOnline);\\n      window.removeEventListener('offline', handleOffline);\\n    };\\n  }, []);\\n\\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"20\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"试着开启和关闭网络，注意观察 \",[\"$r\",\"code\",null,{\"children\":\"StatusBar\"}],\" 组件应对你的行为是如何更新的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设现在你想在另一个不同的组件里 \",[\"$r\",\"strong\",null,{\"children\":\"也\"}],\" 使用同样的逻辑。你希望实现一个保存按钮，每当网络断开这个按钮就会不可用并且显示“Reconnecting…”而不是“Save progress”。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以从复制粘贴 \",[\"$r\",\"code\",null,{\"children\":\"isOnline\"}],\" state 和 Effect 到 \",[\"$r\",\"code\",null,{\"children\":\"SaveButton\"}],\" 组件开始：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport default function SaveButton() {\\n  const [isOnline, setIsOnline] = useState(true);\\n  useEffect(() => {\\n    function handleOnline() {\\n      setIsOnline(true);\\n    }\\n    function handleOffline() {\\n      setIsOnline(false);\\n    }\\n    window.addEventListener('online', handleOnline);\\n    window.addEventListener('offline', handleOffline);\\n    return () => {\\n      window.removeEventListener('online', handleOnline);\\n      window.removeEventListener('offline', handleOffline);\\n    };\\n  }, []);\\n\\n  function handleSaveClick() {\\n    console.log('✅ Progress saved');\\n  }\\n\\n  return (\\n    <button disabled={!isOnline} onClick={handleSaveClick}>\\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\\n    </button>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"38\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你关闭网络，可以发现这个按钮的外观变了。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这两个组件都能很好地工作，但不幸的是他们的逻辑重复了。他们看上去有不同的 \",[\"$r\",\"strong\",null,{\"children\":\"视觉外观\"}],\"，但你依然想复用他们的逻辑。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"extracting-your-own-custom-hook-from-a-component\",\"children\":\"从组件中提取自定义 Hook \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设有一个内置 Hook \",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus\"}],\"，它与 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useState\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\" 相似。那么你就可以简化这两个组件并移除他们之间的重复部分：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,7}\",\"children\":\"function StatusBar() {\\n  const isOnline = useOnlineStatus();\\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\\n}\\n\\nfunction SaveButton() {\\n  const isOnline = useOnlineStatus();\\n\\n  function handleSaveClick() {\\n    console.log('✅ Progress saved');\\n  }\\n\\n  return (\\n    <button disabled={!isOnline} onClick={handleSaveClick}>\\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\\n    </button>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"尽管目前还没有这样的内置 Hook，但是你可以自己写。声明一个 \",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus\"}],\" 函数，并把组件里早前写的所有重复代码移入该函数：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-16}\",\"children\":\"function useOnlineStatus() {\\n  const [isOnline, setIsOnline] = useState(true);\\n  useEffect(() => {\\n    function handleOnline() {\\n      setIsOnline(true);\\n    }\\n    function handleOffline() {\\n      setIsOnline(false);\\n    }\\n    window.addEventListener('online', handleOnline);\\n    window.addEventListener('offline', handleOffline);\\n    return () => {\\n      window.removeEventListener('online', handleOnline);\\n      window.removeEventListener('offline', handleOffline);\\n    };\\n  }, []);\\n  return isOnline;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在函数结尾处返回 \",[\"$r\",\"code\",null,{\"children\":\"isOnline\"}],\"。这可以让组件读取到该值：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useOnlineStatus } from './useOnlineStatus.js';\\n\\nfunction StatusBar() {\\n  const isOnline = useOnlineStatus();\\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\\n}\\n\\nfunction SaveButton() {\\n  const isOnline = useOnlineStatus();\\n\\n  function handleSaveClick() {\\n    console.log('✅ Progress saved');\\n  }\\n\\n  return (\\n    <button disabled={!isOnline} onClick={handleSaveClick}>\\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\\n    </button>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <SaveButton />\\n      <StatusBar />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useOnlineStatus.js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function useOnlineStatus() {\\n  const [isOnline, setIsOnline] = useState(true);\\n  useEffect(() => {\\n    function handleOnline() {\\n      setIsOnline(true);\\n    }\\n    function handleOffline() {\\n      setIsOnline(false);\\n    }\\n    window.addEventListener('online', handleOnline);\\n    window.addEventListener('offline', handleOffline);\\n    return () => {\\n      window.removeEventListener('online', handleOnline);\\n      window.removeEventListener('offline', handleOffline);\\n    };\\n  }, []);\\n  return isOnline;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"74\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"切换网络状态验证一下是否会同时更新两个组件。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在组件里没有那么多的重复逻辑了。\",[\"$r\",\"strong\",null,{\"children\":\"更重要的是，组件内部的代码描述的是想要做什么（使用在线状态！），而不是怎么做（通过订阅浏览器事件完成）\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当提取逻辑到自定义 Hook 时，你可以隐藏如何处理外部系统或者浏览器 API 这些乱七八糟的细节。组件内部的代码表达的是目标而不是具体实现。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"hook-names-always-start-with-use\",\"children\":[\"Hook 的名称必须永远以 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 开头 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React 应用是由组件构成，而组件由内置或自定义 Hook 构成。可能你经常使用别人写的自定义 Hook，但偶尔也要自己写！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你必须遵循以下这些命名公约：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"React 组件名称必须以大写字母开头\"}],\"，比如 \",[\"$r\",\"code\",null,{\"children\":\"StatusBar\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"SaveButton\"}],\"。React 组件还需要返回一些 React 能够显示的内容，比如一段 JSX。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"Hook 的名称必须以 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 开头，然后紧跟一个大写字母\"]}],\"，就像内置的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useState\"}]}],\" 或者本文早前的自定义 \",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus\"}],\" 一样。Hook 可以返回任意值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个公约保证你始终能一眼识别出组件并且知道它的 state，Effect 以及其他的 React 特性可能“隐藏”在哪里。例如如果你在组件内部看见 \",[\"$r\",\"code\",null,{\"children\":\"getColor()\"}],\" 函数调用，就可以确定它里面不可能包含 React state，因为它的名称没有以 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 开头。但是像 \",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus()\"}],\" 这样的函数调用就很可能包含对内部其他 Hook 的调用！\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"如果你为 \",[\"$r\",\"a\",null,{\"href\":\"/learn/editor-setup#linting\",\"children\":\"React 配置了\"}],\" 代码检查工具，它会强制执行这个命名公约。现在滑动到上面的 sandbox，并将 \",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus\"}],\" 重命名为 \",[\"$r\",\"code\",null,{\"children\":\"getOnlineStatus\"}],\"。注意此时代码检查工具将不会再允许你在其内部调用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\"。只有 Hook 和组件可以调用其他 Hook！\"]}]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"should-all-functions-called-during-rendering-start-with-the-use-prefix\",\"children\":\"渲染期间调用的所有函数都应该以 use 前缀开头么？ \"}],[\"$r\",\"p\",null,{\"children\":[\"不。没有 \",[\"$r\",\"strong\",null,{\"children\":\"调用\"}],\" Hook 的函数不需要 \",[\"$r\",\"strong\",null,{\"children\":\"变成\"}],\" Hook。\"]}],[\"$r\",\"p\",null,{\"children\":[\"如果你创建的函数没有调用任何 Hook 方法，在命名时应避免使用 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 前缀，把它当成一个常规函数去命名。如下案例中的 \",[\"$r\",\"code\",null,{\"children\":\"useSorted\"}],\" 函数就没有调用任何 Hook 方法，所以更推荐用 \",[\"$r\",\"code\",null,{\"children\":\"getSorted\"}],\" 来命名：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 🔴 Avoid: 没有调用其他Hook的Hook\\nfunction useSorted(items) {\\n  return items.slice().sort();\\n}\\n\\n// ✅ Good: 没有使用Hook的常规函数\\nfunction getSorted(items) {\\n  return items.slice().sort();\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"这保证你的代码可以在包含条件语句在内的任何地方调用这个常规函数：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function List({ items, shouldSort }) {\\n  let displayedItems = items;\\n  if (shouldSort) {\\n    // ✅ 在条件分支里调用getSorted()是没问题的，因为它不是Hook\\n    displayedItems = getSorted(items);\\n  }\\n  // ...\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"哪怕内部只使用了一个 Hook，你也应该给这个函数加 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 前缀（让它成为一个 Hook）：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good: 一个使用了其他Hook的Hook\\nfunction useAuth() {\\n  return useContext(Auth);\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"技术上 React 对此并不强制要求。原则上你可以写出不调用其他 Hook 的 Hook。但这常常会难以理解且受限，所以最好避免这种方式。但是它在极少数场景下可能是有益的。例如函数目前也许并没有使用任何 Hook，但是你计划未来在该函数内部添加一些 Hook 调用。那么使用 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 前缀命名就很有意义：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-4}\",\"children\":\"// ✅ Good: 之后可能使用其他Hook的Hook\\nfunction useAuth() {\\n  // TODO: 当认证功能实现以后，替换这一行：\\n  // 返回 useContext(Auth)；\\n  return TEST_USER;\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"接下来组件就不能在条件语句里调用这个函数。当你在内部实际添加了 Hook 调用时，这一点将变得很重要。如果你（现在或者之后）没有计划在内部使用 Hook，请不要让它变成 Hook。\"}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"custom-hooks-let-you-share-stateful-logic-not-state-itself\",\"children\":\"自定义 Hook 共享的是状态逻辑，而不是状态本身 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"之前的例子里，当你开启或关闭网络时，两个组件一起更新了。但是两个组件共享 state 变量 \",[\"$r\",\"code\",null,{\"children\":\"isOnline\"}],\" 这种想法是错的。看这段代码：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,7}\",\"children\":\"function StatusBar() {\\n  const isOnline = useOnlineStatus();\\n  // ...\\n}\\n\\nfunction SaveButton() {\\n  const isOnline = useOnlineStatus();\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"它的工作方式和你之前提取的重复代码一模一样：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-5,10-13}\",\"children\":\"function StatusBar() {\\n  const [isOnline, setIsOnline] = useState(true);\\n  useEffect(() => {\\n    // ...\\n  }, []);\\n  // ...\\n}\\n\\nfunction SaveButton() {\\n  const [isOnline, setIsOnline] = useState(true);\\n  useEffect(() => {\\n    // ...\\n  }, []);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这是完全独立的两个 state 变量和 Effect！只是碰巧同一时间值一样，因为你使用了相同的外部值同步两个组件（无论网络是否开启）。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了更好的说明这一点，我们需要一个不同的示例。看下面的 \",[\"$r\",\"code\",null,{\"children\":\"Form\"}],\" 组件：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [firstName, setFirstName] = useState('Mary');\\n  const [lastName, setLastName] = useState('Poppins');\\n\\n  function handleFirstNameChange(e) {\\n    setFirstName(e.target.value);\\n  }\\n\\n  function handleLastNameChange(e) {\\n    setLastName(e.target.value);\\n  }\\n\\n  return (\\n    <>\\n      <label>\\n        First name:\\n        <input value={firstName} onChange={handleFirstNameChange} />\\n      </label>\\n      <label>\\n        Last name:\\n        <input value={lastName} onChange={handleLastNameChange} />\\n      </label>\\n      <p><b>Good morning, {firstName} {lastName}.</b></p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"82\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"每个表单域都有一部分重复的逻辑：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"都有一个 state（\",[\"$r\",\"code\",null,{\"children\":\"firstName\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"lastName\"}],\"）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"都有 change 事件的处理函数（\",[\"$r\",\"code\",null,{\"children\":\"handleFirstNameChange\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"handleLastNameChange\"}],\"）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"都有为输入框指定 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 属性的 JSX。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以提取重复的逻辑到自定义 Hook \",[\"$r\",\"code\",null,{\"children\":\"useFormInput\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useFormInput } from './useFormInput.js';\\n\\nexport default function Form() {\\n  const firstNameProps = useFormInput('Mary');\\n  const lastNameProps = useFormInput('Poppins');\\n\\n  return (\\n    <>\\n      <label>\\n        First name:\\n        <input {...firstNameProps} />\\n      </label>\\n      <label>\\n        Last name:\\n        <input {...lastNameProps} />\\n      </label>\\n      <p><b>Good morning, {firstNameProps.value} {lastNameProps.value}.</b></p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useFormInput.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport function useFormInput(initialValue) {\\n  const [value, setValue] = useState(initialValue);\\n\\n  function handleChange(e) {\\n    setValue(e.target.value);\\n  }\\n\\n  const inputProps = {\\n    value: value,\\n    onChange: handleChange\\n  };\\n\\n  return inputProps;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"102\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意它只声明了 \",[\"$r\",\"strong\",null,{\"children\":\"一个\"}],\" state 变量，叫做 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但 \",[\"$r\",\"code\",null,{\"children\":\"Form\"}],\" 组件调用了 \",[\"$r\",\"strong\",null,{\"children\":\"两次\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"useFormInput\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Form() {\\n  const firstNameProps = useFormInput('Mary');\\n  const lastNameProps = useFormInput('Poppins');\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这就是为什么它工作的时候像声明了两个单独的 state 变量！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"自定义 Hook 共享的只是状态逻辑而不是状态本身。对 Hook 的每个调用完全独立于对同一个 Hook 的其他调用\"}],\"。这就是上面两个 sandbox 结果完全相同的原因。如果愿意，你可以划上去进行比较。提取自定义 Hook 前后组件的行为是一致的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你需要在多个组件之间共享 state 本身时，需要 \",[\"$r\",\"a\",null,{\"href\":\"/learn/sharing-state-between-components\",\"children\":\"将变量提升并传递下去\"}],\"。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"passing-reactive-values-between-hooks\",\"children\":\"在 Hook 之间传递响应值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"每当组件重新渲染，自定义 Hook 中的代码就会重新运行。这就是组件和自定义 Hook 都 \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"需要是纯函数\"}],\" 的原因。我们应该把自定义 Hook 的代码看作组件主体的一部分。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"由于自定义 Hook 会随着组件一起重新渲染，所以组件可以一直接收到最新的 props 和 state。想知道这意味着什么，那就看看这个聊天室的示例。修改 ServeUrl 或者 roomID：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport ChatRoom from './ChatRoom.js';\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ChatRoom.js active\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { createConnection } from './chat.js';\\nimport { showNotification } from './notifications.js';\\n\\nexport default function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  useEffect(() => {\\n    const options = {\\n      serverUrl: serverUrl,\\n      roomId: roomId\\n    };\\n    const connection = createConnection(options);\\n    connection.on('message', (msg) => {\\n      showNotification('New message: ' + msg);\\n    });\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId, serverUrl]);\\n\\n  return (\\n    <>\\n      <label>\\n        Server URL:\\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\\n      </label>\\n      <h1>Welcome to the {roomId} room!</h1>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection({ serverUrl, roomId }) {\\n  // 真正的实现会实际连接到服务器\\n  if (typeof serverUrl !== 'string') {\\n    throw Error('Expected serverUrl to be a string. Received: ' + serverUrl);\\n  }\\n  if (typeof roomId !== 'string') {\\n    throw Error('Expected roomId to be a string. Received: ' + roomId);\\n  }\\n  let intervalId;\\n  let messageCallback;\\n  return {\\n    connect() {\\n      console.log('✅ Connecting to \\\"' + roomId + '\\\" room at ' + serverUrl + '...');\\n      clearInterval(intervalId);\\n      intervalId = setInterval(() => {\\n        if (messageCallback) {\\n          if (Math.random() > 0.5) {\\n            messageCallback('hey')\\n          } else {\\n            messageCallback('lol');\\n          }\\n        }\\n      }, 3000);\\n    },\\n    disconnect() {\\n      clearInterval(intervalId);\\n      messageCallback = null;\\n      console.log('❌ Disconnected from \\\"' + roomId + '\\\" room at ' + serverUrl + '');\\n    },\\n    on(event, callback) {\\n      if (messageCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'message') {\\n        throw Error('Only \\\"message\\\" event is supported.');\\n      }\\n      messageCallback = callback;\\n    },\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme = 'dark') {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"latest\\\",\\n    \\\"react-dom\\\": \\\"latest\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\nbutton { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"118\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你修改 \",[\"$r\",\"code\",null,{\"children\":\"serverUrl\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 时，Effect 会对 \",[\"$r\",\"a\",null,{\"href\":\"/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values\",\"children\":\"你的修改做出“响应”\"}],\" 并重新同步。你可以通过每次修改 Effect 依赖项时聊天室重连的控制台消息来区分。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在将 Effect 代码移入自定义 Hook：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-13}\",\"children\":\"export function useChatRoom({ serverUrl, roomId }) {\\n  useEffect(() => {\\n    const options = {\\n      serverUrl: serverUrl,\\n      roomId: roomId\\n    };\\n    const connection = createConnection(options);\\n    connection.connect();\\n    connection.on('message', (msg) => {\\n      showNotification('New message: ' + msg);\\n    });\\n    return () => connection.disconnect();\\n  }, [roomId, serverUrl]);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这让 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件调用自定义 Hook，而不需要担心内部怎么工作：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-7}\",\"children\":\"export default function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  useChatRoom({\\n    roomId: roomId,\\n    serverUrl: serverUrl\\n  });\\n\\n  return (\\n    <>\\n      <label>\\n        Server URL:\\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\\n      </label>\\n      <h1>Welcome to the {roomId} room!</h1>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这看上去简洁多了（但是它做的是同一件事）！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意逻辑 \",[\"$r\",\"strong\",null,{\"children\":\"仍然响应\"}],\" props 和 state 的变化。尝试编辑 server URL 或选中的房间：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport ChatRoom from './ChatRoom.js';\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ChatRoom.js active\",\"children\":\"import { useState } from 'react';\\nimport { useChatRoom } from './useChatRoom.js';\\n\\nexport default function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  useChatRoom({\\n    roomId: roomId,\\n    serverUrl: serverUrl\\n  });\\n\\n  return (\\n    <>\\n      <label>\\n        Server URL:\\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\\n      </label>\\n      <h1>Welcome to the {roomId} room!</h1>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useChatRoom.js\",\"children\":\"import { useEffect } from 'react';\\nimport { createConnection } from './chat.js';\\nimport { showNotification } from './notifications.js';\\n\\nexport function useChatRoom({ serverUrl, roomId }) {\\n  useEffect(() => {\\n    const options = {\\n      serverUrl: serverUrl,\\n      roomId: roomId\\n    };\\n    const connection = createConnection(options);\\n    connection.connect();\\n    connection.on('message', (msg) => {\\n      showNotification('New message: ' + msg);\\n    });\\n    return () => connection.disconnect();\\n  }, [roomId, serverUrl]);\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection({ serverUrl, roomId }) {\\n  // 真正的实现会实际连接到服务器\\n  if (typeof serverUrl !== 'string') {\\n    throw Error('Expected serverUrl to be a string. Received: ' + serverUrl);\\n  }\\n  if (typeof roomId !== 'string') {\\n    throw Error('Expected roomId to be a string. Received: ' + roomId);\\n  }\\n  let intervalId;\\n  let messageCallback;\\n  return {\\n    connect() {\\n      console.log('✅ Connecting to \\\"' + roomId + '\\\" room at ' + serverUrl + '...');\\n      clearInterval(intervalId);\\n      intervalId = setInterval(() => {\\n        if (messageCallback) {\\n          if (Math.random() > 0.5) {\\n            messageCallback('hey')\\n          } else {\\n            messageCallback('lol');\\n          }\\n        }\\n      }, 3000);\\n    },\\n    disconnect() {\\n      clearInterval(intervalId);\\n      messageCallback = null;\\n      console.log('❌ Disconnected from \\\"' + roomId + '\\\" room at ' + serverUrl + '');\\n    },\\n    on(event, callback) {\\n      if (messageCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'message') {\\n        throw Error('Only \\\"message\\\" event is supported.');\\n      }\\n      messageCallback = callback;\\n    },\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme = 'dark') {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"latest\\\",\\n    \\\"react-dom\\\": \\\"latest\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\nbutton { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"154\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"注意你如何获取 Hook 的返回值：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"export default function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  useChatRoom({\\n    roomId: roomId,\\n    serverUrl: serverUrl\\n  });\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"并把它作为输入传给另一个 Hook：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6}\",\"children\":\"export default function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  useChatRoom({\\n    roomId: roomId,\\n    serverUrl: serverUrl\\n  });\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"每次 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件重新渲染，它就会传最新的 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"serverUrl\"}],\" 到你的 Hook。这就是每当重新渲染后他们的值不一样时你的 Effect 会重连聊天室的原因。（如果你曾经使用过音视频处理软件，像这样的 Hook 链也许会让你想起音视频效果链。好似 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 的输出作为 \",[\"$r\",\"code\",null,{\"children\":\"useChatRoom\"}],\" 的输入）。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-event-handlers-to-custom-hooks\",\"children\":\"把事件处理函数传到自定义 Hook 中 \"}],\"\\n\",[\"$r\",\"Wip\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"这个章节描述了 React 稳定版 \",[\"$r\",\"strong\",null,{\"children\":\"还未发布的一个实验性 API\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你在更多组件中使用 \",[\"$r\",\"code\",null,{\"children\":\"useChatRoom\"}],\" 时，你可能希望组件能定制它的行为。例如现在 Hook 内部收到消息的处理逻辑是硬编码：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{9-11}\",\"children\":\"export function useChatRoom({ serverUrl, roomId }) {\\n  useEffect(() => {\\n    const options = {\\n      serverUrl: serverUrl,\\n      roomId: roomId\\n    };\\n    const connection = createConnection(options);\\n    connection.connect();\\n    connection.on('message', (msg) => {\\n      showNotification('New message: ' + msg);\\n    });\\n    return () => connection.disconnect();\\n  }, [roomId, serverUrl]);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"假设你想把这个逻辑移回到组件中：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7-9}\",\"children\":\"export default function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  useChatRoom({\\n    roomId: roomId,\\n    serverUrl: serverUrl,\\n    onReceiveMessage(msg) {\\n      showNotification('New message: ' + msg);\\n    }\\n  });\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"完成这个工作需要修改自定义 Hook，把 \",[\"$r\",\"code\",null,{\"children\":\"onReceiveMessage\"}],\" 作为其命名选项之一：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,10,13}\",\"children\":\"export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\\n  useEffect(() => {\\n    const options = {\\n      serverUrl: serverUrl,\\n      roomId: roomId\\n    };\\n    const connection = createConnection(options);\\n    connection.connect();\\n    connection.on('message', (msg) => {\\n      onReceiveMessage(msg);\\n    });\\n    return () => connection.disconnect();\\n  }, [roomId, serverUrl, onReceiveMessage]); // ✅ 声明了所有的依赖\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这个修改有效果，但是当自定义 Hook 接受事件处理函数时，你还可以进一步改进。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"增加对 \",[\"$r\",\"code\",null,{\"children\":\"onReceiveMessage\"}],\" 的依赖并不理想，因为每次组件重新渲染时聊天室就会重新连接。 通过 \",[\"$r\",\"a\",null,{\"href\":\"/learn/removing-effect-dependencies#wrapping-an-event-handler-from-the-props\",\"children\":\"将这个事件处理函数包裹到 Effect Event 中来将它从依赖中移除\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,4,5,15,18}\",\"children\":\"import { useEffect, useEffectEvent } from 'react';\\n// ...\\n\\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\\n  const onMessage = useEffectEvent(onReceiveMessage);\\n\\n  useEffect(() => {\\n    const options = {\\n      serverUrl: serverUrl,\\n      roomId: roomId\\n    };\\n    const connection = createConnection(options);\\n    connection.connect();\\n    connection.on('message', (msg) => {\\n      onMessage(msg);\\n    });\\n    return () => connection.disconnect();\\n  }, [roomId, serverUrl]); // ✅ 声明所有依赖\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在每次 \",[\"$r\",\"code\",null,{\"children\":\"ChatRoom\"}],\" 组件重新渲染时聊天室都不会重连。这是一个将事件处理函数传给自定义 Hook 的完整且有效的 demo，你可以尝试一下：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport ChatRoom from './ChatRoom.js';\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ChatRoom.js active\",\"children\":\"import { useState } from 'react';\\nimport { useChatRoom } from './useChatRoom.js';\\nimport { showNotification } from './notifications.js';\\n\\nexport default function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  useChatRoom({\\n    roomId: roomId,\\n    serverUrl: serverUrl,\\n    onReceiveMessage(msg) {\\n      showNotification('New message: ' + msg);\\n    }\\n  });\\n\\n  return (\\n    <>\\n      <label>\\n        Server URL:\\n        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />\\n      </label>\\n      <h1>Welcome to the {roomId} room!</h1>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useChatRoom.js\",\"children\":\"import { useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\nimport { createConnection } from './chat.js';\\n\\nexport function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {\\n  const onMessage = useEffectEvent(onReceiveMessage);\\n\\n  useEffect(() => {\\n    const options = {\\n      serverUrl: serverUrl,\\n      roomId: roomId\\n    };\\n    const connection = createConnection(options);\\n    connection.connect();\\n    connection.on('message', (msg) => {\\n      onMessage(msg);\\n    });\\n    return () => connection.disconnect();\\n  }, [roomId, serverUrl]);\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection({ serverUrl, roomId }) {\\n  // 真正的实现会实际连接到服务器\\n  if (typeof serverUrl !== 'string') {\\n    throw Error('Expected serverUrl to be a string. Received: ' + serverUrl);\\n  }\\n  if (typeof roomId !== 'string') {\\n    throw Error('Expected roomId to be a string. Received: ' + roomId);\\n  }\\n  let intervalId;\\n  let messageCallback;\\n  return {\\n    connect() {\\n      console.log('✅ Connecting to \\\"' + roomId + '\\\" room at ' + serverUrl + '...');\\n      clearInterval(intervalId);\\n      intervalId = setInterval(() => {\\n        if (messageCallback) {\\n          if (Math.random() > 0.5) {\\n            messageCallback('hey')\\n          } else {\\n            messageCallback('lol');\\n          }\\n        }\\n      }, 3000);\\n    },\\n    disconnect() {\\n      clearInterval(intervalId);\\n      messageCallback = null;\\n      console.log('❌ Disconnected from \\\"' + roomId + '\\\" room at ' + serverUrl + '');\\n    },\\n    on(event, callback) {\\n      if (messageCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'message') {\\n        throw Error('Only \\\"message\\\" event is supported.');\\n      }\\n      messageCallback = callback;\\n    },\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme = 'dark') {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\nbutton { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"186\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意你不再需要为了使用它而去了解 \",[\"$r\",\"code\",null,{\"children\":\"useChatRoom\"}],\" 是 \",[\"$r\",\"strong\",null,{\"children\":\"如何\"}],\" 工作的。你可以把它添加到其他任意组件，传递其他任意选项，而它会以同样的方式工作。这就是自定义 Hook 的强大之处。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"when-to-use-custom-hooks\",\"children\":\"什么时候使用自定义 Hook \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你没必要对每段重复的代码都提取自定义 Hook。一些重复是好的。例如像早前提取的包裹单个 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 调用的 \",[\"$r\",\"code\",null,{\"children\":\"useFormInput\"}],\" Hook 就是没有必要的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是每当你写 Effect 时，考虑一下把它包裹在自定义 Hook 是否更清晰。\",[\"$r\",\"a\",null,{\"href\":\"/learn/you-might-not-need-an-effect\",\"children\":\"你不应该经常使用 Effect\"}],\"，所以如果你正在写 Effect 就意味着你需要“走出 React”和某些外部系统同步，或者需要做一些 React 中没有对应内置 API 的事。把 Effect 包裹进自定义 Hook 可以准确表达你的目标以及数据在里面是如何流动的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，假设 \",[\"$r\",\"code\",null,{\"children\":\"ShippingForm\"}],\" 组件展示两个下拉菜单：一个显示城市列表，另一个显示选中城市的区域列表。你可能一开始会像这样写代码：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-16,20-35}\",\"children\":\"function ShippingForm({ country }) {\\n  const [cities, setCities] = useState(null);\\n  // 这个 Effect 拉取一个国家的城市数据\\n  useEffect(() => {\\n    let ignore = false;\\n    fetch(`/api/cities?country=${country}`)\\n      .then(response => response.json())\\n      .then(json => {\\n        if (!ignore) {\\n          setCities(json);\\n        }\\n      });\\n    return () => {\\n      ignore = true;\\n    };\\n  }, [country]);\\n\\n  const [city, setCity] = useState(null);\\n  const [areas, setAreas] = useState(null);\\n  // 这个 Effect 拉取选中城市的区域列表\\n  useEffect(() => {\\n    if (city) {\\n      let ignore = false;\\n      fetch(`/api/areas?city=${city}`)\\n        .then(response => response.json())\\n        .then(json => {\\n          if (!ignore) {\\n            setAreas(json);\\n          }\\n        });\\n      return () => {\\n        ignore = true;\\n      };\\n    }\\n  }, [city]);\\n\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"尽管这部分代码是重复的，但是 \",[\"$r\",\"a\",null,{\"href\":\"/learn/removing-effect-dependencies#is-your-effect-doing-several-unrelated-things\",\"children\":\"把这些 Effect 各自分开是正确的\"}],\"。他们同步两件不同的事情，所以不应该把他们合并到同一个 Effect。而是提取其中的通用逻辑到你自己的 \",[\"$r\",\"code\",null,{\"children\":\"useData\"}],\" Hook 来简化上面的 \",[\"$r\",\"code\",null,{\"children\":\"ShippingForm\"}],\" 组件：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-18}\",\"children\":\"function useData(url) {\\n  const [data, setData] = useState(null);\\n  useEffect(() => {\\n    if (url) {\\n      let ignore = false;\\n      fetch(url)\\n        .then(response => response.json())\\n        .then(json => {\\n          if (!ignore) {\\n            setData(json);\\n          }\\n        });\\n      return () => {\\n        ignore = true;\\n      };\\n    }\\n  }, [url]);\\n  return data;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你可以在 \",[\"$r\",\"code\",null,{\"children\":\"ShippingForm\"}],\" 组件中调用 \",[\"$r\",\"code\",null,{\"children\":\"useData\"}],\" 替换两个 Effect：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,4}\",\"children\":\"function ShippingForm({ country }) {\\n  const cities = useData(`/api/cities?country=${country}`);\\n  const [city, setCity] = useState(null);\\n  const areas = useData(city ? `/api/areas?city=${city}` : null);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"提取自定义 Hook 让数据流清晰。输入 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\"，就会输出 \",[\"$r\",\"code\",null,{\"children\":\"data\"}],\"。通过把 Effect “隐藏”在 \",[\"$r\",\"code\",null,{\"children\":\"useData\"}],\" 内部，你也可以防止一些正在处理 \",[\"$r\",\"code\",null,{\"children\":\"ShippingForm\"}],\" 组件的人向里面添加 \",[\"$r\",\"a\",null,{\"href\":\"/learn/removing-effect-dependencies\",\"children\":\"不必要的依赖\"}],\"。随着时间的推移，应用中大部分 Effect 都会存在于自定义 Hook 内部。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"keep-your-custom-hooks-focused-on-concrete-high-level-use-cases\",\"children\":\"让你的自定义 Hook 专注于具体的高级用例 \"}],[\"$r\",\"p\",null,{\"children\":\"从选择自定义 Hook 名称开始。如果你难以选择一个清晰的名称，这可能意味着你的 Effect 和组件逻辑剩余的部分耦合度太高，还没有做好被提取的准备。\"}],[\"$r\",\"p\",null,{\"children\":\"理想情况下，你的自定义 Hook 名称应该清晰到即使一个不经常写代码的人也能很好地猜中自定义 Hook 的功能，输入和返回：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"✅ \",[\"$r\",\"code\",null,{\"children\":\"useData(url)\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"✅ \",[\"$r\",\"code\",null,{\"children\":\"useImpressionLog(eventName, extraData)\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"✅ \",[\"$r\",\"code\",null,{\"children\":\"useChatRoom(options)\"}]]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"当你和外部系统同步的时候，你的自定义 Hook 名称可能会更加专业，并使用该系统特定的术语。只要对熟悉这个系统的人来说名称清晰就可以：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"✅ \",[\"$r\",\"code\",null,{\"children\":\"useMediaQuery(query)\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"✅ \",[\"$r\",\"code\",null,{\"children\":\"useSocket(url)\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"✅ \",[\"$r\",\"code\",null,{\"children\":\"useIntersectionObserver(ref, options)\"}]]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"保持自定义 Hook 专注于具体的高级用例\"}],\"。避免创建和使用作为 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" API 本身的替代品和 wrapper 的自定义“生命周期” Hook：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"🔴 \",[\"$r\",\"code\",null,{\"children\":\"useMount(fn)\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"🔴 \",[\"$r\",\"code\",null,{\"children\":\"useEffectOnce(fn)\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"🔴 \",[\"$r\",\"code\",null,{\"children\":\"useUpdateEffect(fn)\"}]]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"例如这个 \",[\"$r\",\"code\",null,{\"children\":\"useMount\"}],\" Hook 试图保证一些代码只在“加载”时运行：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-5,14-15}\",\"children\":\"function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  // 🔴 Avoid: 使用自定义“生命周期” Hook\\n  useMount(() => {\\n    const connection = createConnection({ roomId, serverUrl });\\n    connection.connect();\\n\\n    post('/analytics/event', { eventName: 'visit_chat' });\\n  });\\n  // ...\\n}\\n\\n// 🔴 Avoid: 创建自定义“生命周期” Hook\\nfunction useMount(fn) {\\n  useEffect(() => {\\n    fn();\\n  }, []); // 🔴 React Hook useEffect 缺少依赖项: 'fn'\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"像 \",[\"$r\",\"code\",null,{\"children\":\"useMount\"}],\" 这样的自定义“生命周期” Hook 不是很适合 React 范式\"]}],\"。例如示例代码有一个错误（它没有对 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"serverUrl\"}],\" 的变化做出“响应” ），但是代码检查工具并不会向你发出对应的警告，因为它只能检测 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 的直接调用。并不了解你的 Hook。\"]}],[\"$r\",\"p\",null,{\"children\":\"如果你正在编写 Effect，请从直接使用 React API 开始：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  // ✅ Good: 通过用途分割的两个原始Effect\\n\\n  useEffect(() => {\\n    const connection = createConnection({ serverUrl, roomId });\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [serverUrl, roomId]);\\n\\n  useEffect(() => {\\n    post('/analytics/event', { eventName: 'visit_chat', roomId });\\n  }, [roomId]);\\n\\n  // ...\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"然后你可以（但不是必须的）为不同的高级用例提取自定义 Hook：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function ChatRoom({ roomId }) {\\n  const [serverUrl, setServerUrl] = useState('https://localhost:1234');\\n\\n  // ✅ Great: 以用途命名的自定义Hook\\n  useChatRoom({ serverUrl, roomId });\\n  useImpressionLog('visit_chat', { roomId });\\n  // ...\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"好的自定义 Hook 通过限制功能使代码调用更具声明性\"}],\"。例如 \",[\"$r\",\"code\",null,{\"children\":\"useChatRoom(options)\"}],\" 只能连接聊天室，而 \",[\"$r\",\"code\",null,{\"children\":\"useImpressionLog(eventName, extraData)\"}],\" 只能向分析系统发送展示日志。如果你的自定义 Hook API 没有约束用例且非常抽象，那么在长期的运行中，它引入的问题可能比解决的问题更多。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"custom-hooks-help-you-migrate-to-better-patterns\",\"children\":\"自定义 Hook 帮助你迁移到更好的模式 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Effect 是一个 \",[\"$r\",\"a\",null,{\"href\":\"/learn/escape-hatches\",\"children\":\"脱围机制\"}],\"：当需要“走出 React”且用例没有更好的内置解决方案时你可以使用他们。随着时间的推移，React 团队的目标是通过给更具体的问题提供更具体的解决方案来最小化应用中的 Effect 数量。把你的 Effect 包裹进自定义 Hook，当这些解决方案可用时升级代码会更加容易。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"让我们回到这个示例：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useOnlineStatus } from './useOnlineStatus.js';\\n\\nfunction StatusBar() {\\n  const isOnline = useOnlineStatus();\\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\\n}\\n\\nfunction SaveButton() {\\n  const isOnline = useOnlineStatus();\\n\\n  function handleSaveClick() {\\n    console.log('✅ Progress saved');\\n  }\\n\\n  return (\\n    <button disabled={!isOnline} onClick={handleSaveClick}>\\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\\n    </button>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <SaveButton />\\n      <StatusBar />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useOnlineStatus.js active\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function useOnlineStatus() {\\n  const [isOnline, setIsOnline] = useState(true);\\n  useEffect(() => {\\n    function handleOnline() {\\n      setIsOnline(true);\\n    }\\n    function handleOffline() {\\n      setIsOnline(false);\\n    }\\n    window.addEventListener('online', handleOnline);\\n    window.addEventListener('offline', handleOffline);\\n    return () => {\\n      window.removeEventListener('online', handleOnline);\\n      window.removeEventListener('offline', handleOffline);\\n    };\\n  }, []);\\n  return isOnline;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"192\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在上述示例中，\",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus\"}],\" 借助一组 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useState\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\" 实现。但这不是最好的解决方案。它有许多边界用例没有考虑到。例如假设当组件加载时，\",[\"$r\",\"code\",null,{\"children\":\"isOnline\"}],\" 已经为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，但是如果网络已经离线的话这就是错误的。你可以使用浏览器的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"navigator.onLine\"}]}],\" API 来检查，但是在生成初始 HTML 的服务端直接使用它是没用的。简而言之这段代码可以改进。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"幸运的是，React 18 包含了一个叫做 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useSyncExternalStore\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useSyncExternalStore\"}]}],\" 的专用 API，它可以解决你所有这些问题。这里展示了如何利用这个新 API 来重写你的 \",[\"$r\",\"code\",null,{\"children\":\"useOnlineStatus\"}],\" Hook：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useOnlineStatus } from './useOnlineStatus.js';\\n\\nfunction StatusBar() {\\n  const isOnline = useOnlineStatus();\\n  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;\\n}\\n\\nfunction SaveButton() {\\n  const isOnline = useOnlineStatus();\\n\\n  function handleSaveClick() {\\n    console.log('✅ Progress saved');\\n  }\\n\\n  return (\\n    <button disabled={!isOnline} onClick={handleSaveClick}>\\n      {isOnline ? 'Save progress' : 'Reconnecting...'}\\n    </button>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <SaveButton />\\n      <StatusBar />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useOnlineStatus.js active\",\"children\":\"import { useSyncExternalStore } from 'react';\\n\\nfunction subscribe(callback) {\\n  window.addEventListener('online', callback);\\n  window.addEventListener('offline', callback);\\n  return () => {\\n    window.removeEventListener('online', callback);\\n    window.removeEventListener('offline', callback);\\n  };\\n}\\n\\nexport function useOnlineStatus() {\\n  return useSyncExternalStore(\\n    subscribe,\\n    () => navigator.onLine, // 如何在客户端获取值\\n    () => true // 如何在服务端获取值\\n  );\\n}\\n\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"210\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意 \",[\"$r\",\"strong\",null,{\"children\":\"你不需要修改任何组件\"}],\" 就能完成这次迁移：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,7}\",\"children\":\"function StatusBar() {\\n  const isOnline = useOnlineStatus();\\n  // ...\\n}\\n\\nfunction SaveButton() {\\n  const isOnline = useOnlineStatus();\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这是把 Effect 包裹进自定义 Hook 有益的另一个原因：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你让进出 Effect 的数据流非常清晰。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你让组件专注于目标，而不是 Effect 的准确实现。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"当 React 增加新特性时，你可以在不修改任何组件的情况下移除这些 Effect。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"和 \",[\"$r\",\"a\",null,{\"href\":\"https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"设计系统\"}],\" 相似，你可能会发现从应用的组件中提取通用逻辑到自定义 Hook 是非常有帮助的。这会让你的组件代码专注于目标，并且避免经常写原始 Effect。许多很棒的自定义 Hook 是由 React 社区维护的。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"will-react-provide-any-built-in-solution-for-data-fetching\",\"children\":\"React 会为数据获取提供内置解决方案么？ \"}],[\"$r\",\"p\",null,{\"children\":\"我们仍然在规划细节，但是期望未来可以像这样写数据获取：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,4,6}\",\"children\":\"import { use } from 'react'; // 还不可用！\\n\\nfunction ShippingForm({ country }) {\\n  const cities = use(fetch(`/api/cities?country=${country}`));\\n  const [city, setCity] = useState(null);\\n  const areas = city ? use(fetch(`/api/areas?city=${city}`)) : null;\\n  // ...\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"比起在每个组件手动写原始 Effect，在应用中使用像上面 \",[\"$r\",\"code\",null,{\"children\":\"useData\"}],\" 这样的自定义 Hook，之后迁移到最终推荐方式你所需要的修改更少。但是旧的方式仍然可以有效工作，所以如果你喜欢写原始 Effect，可以继续这样做。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"there-is-more-than-one-way-to-do-it\",\"children\":\"不止一个方法可以做到 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设你想要使用浏览器的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/window/requestAnimationFrame\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"requestAnimationFrame\"}]}],\" API \",[\"$r\",\"strong\",null,{\"children\":\"从头开始\"}],\" 实现一个 fade-in 动画。你也许会从一个设置动画循环的 Effect 开始。在动画的每一帧中，你可以修改 \",[\"$r\",\"a\",null,{\"href\":\"/learn/manipulating-the-dom-with-refs\",\"children\":\"ref 持有的\"}],\" DOM 节点的 opacity 属性直到 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"。你的代码一开始可能是这样：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect, useRef } from 'react';\\n\\nfunction Welcome() {\\n  const ref = useRef(null);\\n\\n  useEffect(() => {\\n    const duration = 1000;\\n    const node = ref.current;\\n\\n    let startTime = performance.now();\\n    let frameId = null;\\n\\n    function onFrame(now) {\\n      const timePassed = now - startTime;\\n      const progress = Math.min(timePassed / duration, 1);\\n      onProgress(progress);\\n      if (progress < 1) {\\n        // 我们还有更多的帧需要绘制\\n        frameId = requestAnimationFrame(onFrame);\\n      }\\n    }\\n\\n    function onProgress(progress) {\\n      node.style.opacity = progress;\\n    }\\n\\n    function start() {\\n      onProgress(0);\\n      startTime = performance.now();\\n      frameId = requestAnimationFrame(onFrame);\\n    }\\n\\n    function stop() {\\n      cancelAnimationFrame(frameId);\\n      startTime = null;\\n      frameId = null;\\n    }\\n\\n    start();\\n    return () => stop();\\n  }, []);\\n\\n  return (\\n    <h1 className=\\\"welcome\\\" ref={ref}>\\n      Welcome\\n    </h1>\\n  );\\n}\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? 'Remove' : 'Show'}\\n      </button>\\n      <hr />\\n      {show && <Welcome />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n.welcome {\\n  opacity: 0;\\n  color: white;\\n  padding: 50px;\\n  text-align: center;\\n  font-size: 50px;\\n  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"214\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了让组件更具有可读性，你可能要将逻辑提取到自定义 Hook \",[\"$r\",\"code\",null,{\"children\":\"useFadeIn\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect, useRef } from 'react';\\nimport { useFadeIn } from './useFadeIn.js';\\n\\nfunction Welcome() {\\n  const ref = useRef(null);\\n\\n  useFadeIn(ref, 1000);\\n\\n  return (\\n    <h1 className=\\\"welcome\\\" ref={ref}>\\n      Welcome\\n    </h1>\\n  );\\n}\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? 'Remove' : 'Show'}\\n      </button>\\n      <hr />\\n      {show && <Welcome />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useFadeIn.js\",\"children\":\"import { useEffect } from 'react';\\n\\nexport function useFadeIn(ref, duration) {\\n  useEffect(() => {\\n    const node = ref.current;\\n\\n    let startTime = performance.now();\\n    let frameId = null;\\n\\n    function onFrame(now) {\\n      const timePassed = now - startTime;\\n      const progress = Math.min(timePassed / duration, 1);\\n      onProgress(progress);\\n      if (progress < 1) {\\n        // 我们还有更多的帧需要绘制\\n        frameId = requestAnimationFrame(onFrame);\\n      }\\n    }\\n\\n    function onProgress(progress) {\\n      node.style.opacity = progress;\\n    }\\n\\n    function start() {\\n      onProgress(0);\\n      startTime = performance.now();\\n      frameId = requestAnimationFrame(onFrame);\\n    }\\n\\n    function stop() {\\n      cancelAnimationFrame(frameId);\\n      startTime = null;\\n      frameId = null;\\n    }\\n\\n    start();\\n    return () => stop();\\n  }, [ref, duration]);\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n.welcome {\\n  opacity: 0;\\n  color: white;\\n  padding: 50px;\\n  text-align: center;\\n  font-size: 50px;\\n  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"218\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以让 \",[\"$r\",\"code\",null,{\"children\":\"useFadeIn\"}],\" 和原来保持一致，但是也可以进一步重构。例如你可以把设置动画循环的逻辑从 \",[\"$r\",\"code\",null,{\"children\":\"useFadeIn\"}],\" 提取到自定义 Hook \",[\"$r\",\"code\",null,{\"children\":\"useAnimationLoop\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect, useRef } from 'react';\\nimport { useFadeIn } from './useFadeIn.js';\\n\\nfunction Welcome() {\\n  const ref = useRef(null);\\n\\n  useFadeIn(ref, 1000);\\n\\n  return (\\n    <h1 className=\\\"welcome\\\" ref={ref}>\\n      Welcome\\n    </h1>\\n  );\\n}\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? 'Remove' : 'Show'}\\n      </button>\\n      <hr />\\n      {show && <Welcome />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useFadeIn.js active\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport function useFadeIn(ref, duration) {\\n  const [isRunning, setIsRunning] = useState(true);\\n\\n  useAnimationLoop(isRunning, (timePassed) => {\\n    const progress = Math.min(timePassed / duration, 1);\\n    ref.current.style.opacity = progress;\\n    if (progress === 1) {\\n      setIsRunning(false);\\n    }\\n  });\\n}\\n\\nfunction useAnimationLoop(isRunning, drawFrame) {\\n  const onFrame = useEffectEvent(drawFrame);\\n\\n  useEffect(() => {\\n    if (!isRunning) {\\n      return;\\n    }\\n\\n    const startTime = performance.now();\\n    let frameId = null;\\n\\n    function tick(now) {\\n      const timePassed = now - startTime;\\n      onFrame(timePassed);\\n      frameId = requestAnimationFrame(tick);\\n    }\\n\\n    tick();\\n    return () => cancelAnimationFrame(frameId);\\n  }, [isRunning]);\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n.welcome {\\n  opacity: 0;\\n  color: white;\\n  padding: 50px;\\n  text-align: center;\\n  font-size: 50px;\\n  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"222\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是 \",[\"$r\",\"strong\",null,{\"children\":\"没有必要\"}],\" 这样做。和常规函数一样，最终是由你决定在哪里绘制代码不同部分之间的边界。你也可以采取不一样的方法。把大部分必要的逻辑移入一个 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"JavaScript 类\"}],\"，而不是把逻辑保留在 Effect 中：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect, useRef } from 'react';\\nimport { useFadeIn } from './useFadeIn.js';\\n\\nfunction Welcome() {\\n  const ref = useRef(null);\\n\\n  useFadeIn(ref, 1000);\\n\\n  return (\\n    <h1 className=\\\"welcome\\\" ref={ref}>\\n      Welcome\\n    </h1>\\n  );\\n}\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? 'Remove' : 'Show'}\\n      </button>\\n      <hr />\\n      {show && <Welcome />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useFadeIn.js active\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { FadeInAnimation } from './animation.js';\\n\\nexport function useFadeIn(ref, duration) {\\n  useEffect(() => {\\n    const animation = new FadeInAnimation(ref.current);\\n    animation.start(duration);\\n    return () => {\\n      animation.stop();\\n    };\\n  }, [ref, duration]);\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/animation.js\",\"children\":\"export class FadeInAnimation {\\n  constructor(node) {\\n    this.node = node;\\n  }\\n  start(duration) {\\n    this.duration = duration;\\n    this.onProgress(0);\\n    this.startTime = performance.now();\\n    this.frameId = requestAnimationFrame(() => this.onFrame());\\n  }\\n  onFrame() {\\n    const timePassed = performance.now() - this.startTime;\\n    const progress = Math.min(timePassed / this.duration, 1);\\n    this.onProgress(progress);\\n    if (progress === 1) {\\n      this.stop();\\n    } else {\\n      // 我们还有更多的帧要绘制\\n      this.frameId = requestAnimationFrame(() => this.onFrame());\\n    }\\n  }\\n  onProgress(progress) {\\n    this.node.style.opacity = progress;\\n  }\\n  stop() {\\n    cancelAnimationFrame(this.frameId);\\n    this.startTime = null;\\n    this.frameId = null;\\n    this.duration = 0;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n.welcome {\\n  opacity: 0;\\n  color: white;\\n  padding: 50px;\\n  text-align: center;\\n  font-size: 50px;\\n  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"228\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Effect 可以连接 React 和外部系统。Effect 之间的配合越多（例如链接多个动画），像上面的 sandbox 一样 \",[\"$r\",\"strong\",null,{\"children\":\"完整地\"}],\" 从 Effect 和 Hook 中提取逻辑就越有意义。然后你提取的代码 \",[\"$r\",\"strong\",null,{\"children\":\"变成\"}],\" “外部系统”。这会让你的 Effect 保持简洁，因为他们只需要向已经被你移动到 React 外部的系统发送消息。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"上面这个示例假设需要使用 JavaScript 写 fade-in 逻辑。但使用纯 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"CSS 动画\"}],\" 实现这个特定的 fade-in 动画会更加简单和高效：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect, useRef } from 'react';\\nimport './welcome.css';\\n\\nfunction Welcome() {\\n  return (\\n    <h1 className=\\\"welcome\\\">\\n      Welcome\\n    </h1>\\n  );\\n}\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? 'Remove' : 'Show'}\\n      </button>\\n      <hr />\\n      {show && <Welcome />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"label, button { display: block; margin-bottom: 20px; }\\nhtml, body { min-height: 300px; }\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/welcome.css active\",\"children\":\".welcome {\\n  color: white;\\n  padding: 50px;\\n  text-align: center;\\n  font-size: 50px;\\n  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);\\n\\n  animation: fadeIn 1000ms;\\n}\\n\\n@keyframes fadeIn {\\n  0% { opacity: 0; }\\n  100% { opacity: 1; }\\n}\\n\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"234\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"某些时候你甚至不需要 Hook！\"}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"自定义 Hook 让你可以在组件间共享逻辑。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"自定义 Hook 命名必须以后跟一个大写字母的 \",[\"$r\",\"code\",null,{\"children\":\"use\"}],\" 开头。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"自定义 Hook 共享的只是状态逻辑，不是状态本身。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以将响应值从一个 Hook 传到另一个，并且他们会保持最新。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"每次组件重新渲染时，所有的 Hook 会重新运行。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"自定义 Hook 的代码应该和组件代码一样保持纯粹。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"把自定义 Hook 收到的事件处理函数包裹到 Effect Event。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"不要创建像 \",[\"$r\",\"code\",null,{\"children\":\"useMount\"}],\" 这样的自定义 Hook。保持目标具体化。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何以及在哪里选择代码边界取决于你。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"extract-a-usecounter-hook\",\"children\":[\"提取 \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\" Hook \"]}],[\"$r\",\"p\",null,{\"children\":[\"这个组件使用了一个 state 变量和一个 Effect 来展示每秒递增的一个数字。把这个逻辑提取到一个 \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\" 的自定义 Hook 中。你的目标是让 \",[\"$r\",\"code\",null,{\"children\":\"Counter\"}],\" 组件的实现看上去和这个一样：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Counter() {\\n  const count = useCounter();\\n  return <h1>Seconds passed: {count}</h1>;\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"你需要在 \",[\"$r\",\"code\",null,{\"children\":\"useCounter.js\"}],\" 中编写你的自定义 Hook，并且把它引入到 \",[\"$r\",\"code\",null,{\"children\":\"Counter.js\"}],\" 文件。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport default function Counter() {\\n  const [count, setCount] = useState(0);\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + 1);\\n    }, 1000);\\n    return () => clearInterval(id);\\n  }, []);\\n  return <h1>Seconds passed: {count}</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"// 在这个文件中编写你的自定义 Hook!\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"你的代码应该像这样：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useCounter } from './useCounter.js';\\n\\nexport default function Counter() {\\n  const count = useCounter();\\n  return <h1>Seconds passed: {count}</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function useCounter() {\\n  const [count, setCount] = useState(0);\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + 1);\\n    }, 1000);\\n    return () => clearInterval(id);\\n  }, []);\\n  return count;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"注意 \",[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 不再需要引入 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\"。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"make-the-counter-delay-configurable\",\"children\":\"让计时器的 delay 变为可配置项 \"}],[\"$r\",\"p\",null,{\"children\":[\"这个示例中有一个由滑动条控制的 state 变量 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\"，但它的值没有被使用。请将 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 值传给自定义 Hook \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\"，修改 \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\" Hook，用传过去的 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 代替硬编码 \",[\"$r\",\"code\",null,{\"children\":\"1000\"}],\" 毫秒。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\nimport { useCounter } from './useCounter.js';\\n\\nexport default function Counter() {\\n  const [delay, setDelay] = useState(1000);\\n  const count = useCounter();\\n  return (\\n    <>\\n      <label>\\n        Tick duration: {delay} ms\\n        <br />\\n        <input\\n          type=\\\"range\\\"\\n          value={delay}\\n          min=\\\"10\\\"\\n          max=\\\"2000\\\"\\n          onChange={e => setDelay(Number(e.target.value))}\\n        />\\n      </label>\\n      <hr />\\n      <h1>Ticks: {count}</h1>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function useCounter() {\\n  const [count, setCount] = useState(0);\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + 1);\\n    }, 1000);\\n    return () => clearInterval(id);\\n  }, []);\\n  return count;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"useCounter(delay)\"}],\" 将 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 传入 Hook。然后在 Hook 内部使用 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 替换硬编码值 \",[\"$r\",\"code\",null,{\"children\":\"1000\"}],\"。你需要在 Effect 依赖项中加入 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\"。这保证了 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 的变化会重置 interval。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\nimport { useCounter } from './useCounter.js';\\n\\nexport default function Counter() {\\n  const [delay, setDelay] = useState(1000);\\n  const count = useCounter(delay);\\n  return (\\n    <>\\n      <label>\\n        Tick duration: {delay} ms\\n        <br />\\n        <input\\n          type=\\\"range\\\"\\n          value={delay}\\n          min=\\\"10\\\"\\n          max=\\\"2000\\\"\\n          onChange={e => setDelay(Number(e.target.value))}\\n        />\\n      </label>\\n      <hr />\\n      <h1>Ticks: {count}</h1>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function useCounter(delay) {\\n  const [count, setCount] = useState(0);\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + 1);\\n    }, delay);\\n    return () => clearInterval(id);\\n  }, [delay]);\\n  return count;\\n}\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"extract-useinterval-out-of-usecounter\",\"children\":[\"从 \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\" 中提取 \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" \"]}],[\"$r\",\"p\",null,{\"children\":[\"现在 \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\" Hook 做两件事。设置一个 interval，并且在每个 interval tick 内递增一次 state 变量。将设置 interval 的逻辑拆分到一个独立 Hook \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\"。它应该有两个参数：\",[\"$r\",\"code\",null,{\"children\":\"onTick\"}],\" 回调函数和 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\"。本次修改后 \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\" 的实现应该如下所示：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export function useCounter(delay) {\\n  const [count, setCount] = useState(0);\\n  useInterval(() => {\\n    setCount(c => c + 1);\\n  }, delay);\\n  return count;\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"useInterval.js\"}],\" 文件中编写 \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" 并在 \",[\"$r\",\"code\",null,{\"children\":\"useCounter.js\"}],\" 文件中导入。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\nimport { useCounter } from './useCounter.js';\\n\\nexport default function Counter() {\\n  const count = useCounter(1000);\\n  return <h1>Seconds passed: {count}</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function useCounter(delay) {\\n  const [count, setCount] = useState(0);\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + 1);\\n    }, delay);\\n    return () => clearInterval(id);\\n  }, [delay]);\\n  return count;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useInterval.js\",\"children\":\"// 在这里编写你自己的 Hook!\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" 内部的逻辑应该是设置和清理计时器。除此之外不需要做任何事。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useCounter } from './useCounter.js';\\n\\nexport default function Counter() {\\n  const count = useCounter(1000);\\n  return <h1>Seconds passed: {count}</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"import { useState } from 'react';\\nimport { useInterval } from './useInterval.js';\\n\\nexport function useCounter(delay) {\\n  const [count, setCount] = useState(0);\\n  useInterval(() => {\\n    setCount(c => c + 1);\\n  }, delay);\\n  return count;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useInterval.js active\",\"children\":\"import { useEffect } from 'react';\\n\\nexport function useInterval(onTick, delay) {\\n  useEffect(() => {\\n    const id = setInterval(onTick, delay);\\n    return () => clearInterval(id);\\n  }, [onTick, delay]);\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"注意这个解决方案有一些问题，你将在下一个挑战中解决他们。\"}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-a-resetting-interval\",\"children\":\"修复计时器重置 \"}],[\"$r\",\"p\",null,{\"children\":[\"这个示例有 \",[\"$r\",\"strong\",null,{\"children\":\"两个\"}],\" 独立的计时器。\"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 组件调用 \",[\"$r\",\"code\",null,{\"children\":\"useCounter\"}],\"，这个 Hook 调用 \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" 来每秒更新一次计数器。但是 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 组件 \",[\"$r\",\"strong\",null,{\"children\":\"也\"}],\" 调用 \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" 每两秒随机更新一次页面背景色。\"]}],[\"$r\",\"p\",null,{\"children\":[\"更新页面背景色的回调函数因为一些原因从未执行过。在 \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" 内部添加一些日志。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,5}\",\"children\":\"  useEffect(() => {\\n    console.log('✅ Setting up an interval with delay ', delay)\\n    const id = setInterval(onTick, delay);\\n    return () => {\\n      console.log('❌ Clearing an interval with delay ', delay)\\n      clearInterval(id);\\n    };\\n  }, [onTick, delay]);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这些日志符合你的预期吗？如果一些不必要的 Effect 似乎重新同步了，你能猜出哪一个依赖项导致了这个情况吗？有其他方式从 Effect 中 \",[\"$r\",\"a\",null,{\"href\":\"/learn/removing-effect-dependencies\",\"children\":\"移除依赖\"}],\" 吗？\"]}],[\"$r\",\"p\",null,{\"children\":\"这个问题修复以后，你预期的应该是页面背景每两秒更新一次。\"}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"看上去你的 \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" Hook 接受事件监听器作为参数。你能想到一些包裹事件监听器的方法，让它不需要成为 Effect 的依赖项吗？\"]}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useCounter } from './useCounter.js';\\nimport { useInterval } from './useInterval.js';\\n\\nexport default function Counter() {\\n  const count = useCounter(1000);\\n\\n  useInterval(() => {\\n    const randomColor = `hsla(${Math.random() * 360}, 100%, 50%, 0.2)`;\\n    document.body.style.backgroundColor = randomColor;\\n  }, 2000);\\n\\n  return <h1>Seconds passed: {count}</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"import { useState } from 'react';\\nimport { useInterval } from './useInterval.js';\\n\\nexport function useCounter(delay) {\\n  const [count, setCount] = useState(0);\\n  useInterval(() => {\\n    setCount(c => c + 1);\\n  }, delay);\\n  return count;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useInterval.js\",\"children\":\"import { useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport function useInterval(onTick, delay) {\\n  useEffect(() => {\\n    const id = setInterval(onTick, delay);\\n    return () => {\\n      clearInterval(id);\\n    };\\n  }, [onTick, delay]);\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"和 \",[\"$r\",\"a\",null,{\"href\":\"/learn/reusing-logic-with-custom-hooks#passing-event-handlers-to-custom-hooks\",\"children\":\"早前这个页面\"}],\" 做的一样，在 \",[\"$r\",\"code\",null,{\"children\":\"useInterval\"}],\" 内部把 tick 回调函数包裹进一个 Effect Event。\"]}],[\"$r\",\"p\",null,{\"children\":[\"这将让你可以从 Effect 的依赖项中删掉 \",[\"$r\",\"code\",null,{\"children\":\"onTick\"}],\"。每次组件重新渲染时，Effect 将不会重新同步，所以页面背景颜色变化 interval 有机会触发之前不会每秒重置一次。\"]}],[\"$r\",\"p\",null,{\"children\":\"随着这个修改，两个 interval 都会像预期一样工作并且不会互相干扰：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useCounter } from './useCounter.js';\\nimport { useInterval } from './useInterval.js';\\n\\nexport default function Counter() {\\n  const count = useCounter(1000);\\n\\n  useInterval(() => {\\n    const randomColor = `hsla(${Math.random() * 360}, 100%, 50%, 0.2)`;\\n    document.body.style.backgroundColor = randomColor;\\n  }, 2000);\\n\\n  return <h1>Seconds passed: {count}</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useCounter.js\",\"children\":\"import { useState } from 'react';\\nimport { useInterval } from './useInterval.js';\\n\\nexport function useCounter(delay) {\\n  const [count, setCount] = useState(0);\\n  useInterval(() => {\\n    setCount(c => c + 1);\\n  }, delay);\\n  return count;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useInterval.js active\",\"children\":\"import { useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport function useInterval(callback, delay) {\\n  const onTick = useEffectEvent(callback);\\n  useEffect(() => {\\n    const id = setInterval(onTick, delay);\\n    return () => clearInterval(id);\\n  }, [delay]);\\n}\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"implement-a-staggering-movement\",\"children\":\"实现交错运动 \"}],[\"$r\",\"p\",null,{\"children\":[\"这个示例中，\",[\"$r\",\"code\",null,{\"children\":\"usePointerPosition()\"}],\" Hook 追踪当前指针位置。尝试移动光标或你的手指到预览区域上方，可以看到有一个红点随着你移动。它的位置被保存在变量 \",[\"$r\",\"code\",null,{\"children\":\"pos1\"}],\" 中。\"]}],[\"$r\",\"p\",null,{\"children\":\"事实上，有 5（!）个正在被渲染的不同红点。你看不见是因为他们现在都显示在同一位置。这就是你需要修复的问题。你想要实现的是一个“交错”运动：每个圆点应该“跟随”它前一个点的路径。例如如果你快速移动光标，第一个点应该立刻跟着它，第二个应该在小小的延时后跟上第一个点，第三个点应该跟着第二个点等等。\"}],[\"$r\",\"p\",null,{\"children\":[\"你需要实现自定义 Hook \",[\"$r\",\"code\",null,{\"children\":\"useDelayedValue\"}],\"。它当前的实现返回的是提供给它的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\"。而你想从 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 毫秒之前返回 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\"。你可能需要一些 state 和一个 Effect 来完成这个任务。\"]}],[\"$r\",\"p\",null,{\"children\":[\"实现 \",[\"$r\",\"code\",null,{\"children\":\"useDelayedValue\"}],\" 后，你应该看见这些点一个接一个运动。\"]}],[\"$r\",\"Hint\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"你需要在自定义 Hook 内部存储一个 state 变量 \",[\"$r\",\"code\",null,{\"children\":\"delayedValue\"}],\"。当 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 变化时，你需要运行一个 Effect。这个 Effect 应该在 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 毫秒后更新 \",[\"$r\",\"code\",null,{\"children\":\"delayedValue\"}],\"。你可能发现调用 \",[\"$r\",\"code\",null,{\"children\":\"setTimeout\"}],\" 很有帮助。\"]}],[\"$r\",\"p\",null,{\"children\":\"这个 Effect 需要清理吗？为什么？\"}]]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { usePointerPosition } from './usePointerPosition.js';\\n\\nfunction useDelayedValue(value, delay) {\\n  // TODO: 实现这个 Hook\\n  return value;\\n}\\n\\nexport default function Canvas() {\\n  const pos1 = usePointerPosition();\\n  const pos2 = useDelayedValue(pos1, 100);\\n  const pos3 = useDelayedValue(pos2, 200);\\n  const pos4 = useDelayedValue(pos3, 100);\\n  const pos5 = useDelayedValue(pos3, 50);\\n  return (\\n    <>\\n      <Dot position={pos1} opacity={1} />\\n      <Dot position={pos2} opacity={0.8} />\\n      <Dot position={pos3} opacity={0.6} />\\n      <Dot position={pos4} opacity={0.4} />\\n      <Dot position={pos5} opacity={0.2} />\\n    </>\\n  );\\n}\\n\\nfunction Dot({ position, opacity }) {\\n  return (\\n    <div style={{\\n      position: 'absolute',\\n      backgroundColor: 'pink',\\n      borderRadius: '50%',\\n      opacity,\\n      transform: `translate(${position.x}px, ${position.y}px)`,\\n      pointerEvents: 'none',\\n      left: -20,\\n      top: -20,\\n      width: 40,\\n      height: 40,\\n    }} />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/usePointerPosition.js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function usePointerPosition() {\\n  const [position, setPosition] = useState({ x: 0, y: 0 });\\n  useEffect(() => {\\n    function handleMove(e) {\\n      setPosition({ x: e.clientX, y: e.clientY });\\n    }\\n    window.addEventListener('pointermove', handleMove);\\n    return () => window.removeEventListener('pointermove', handleMove);\\n  }, []);\\n  return position;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { min-height: 300px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"这里是一个生效的版本。你将 \",[\"$r\",\"code\",null,{\"children\":\"delayedValue\"}],\" 保存为一个 state 变量。当 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 更新时，Effect 会安排一个 timeout 来更新 \",[\"$r\",\"code\",null,{\"children\":\"delayedValue\"}],\"。这就是 \",[\"$r\",\"code\",null,{\"children\":\"delayedValue\"}],\" 总是“滞后于”实际 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 的原因。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { usePointerPosition } from './usePointerPosition.js';\\n\\nfunction useDelayedValue(value, delay) {\\n  const [delayedValue, setDelayedValue] = useState(value);\\n\\n  useEffect(() => {\\n    setTimeout(() => {\\n      setDelayedValue(value);\\n    }, delay);\\n  }, [value, delay]);\\n\\n  return delayedValue;\\n}\\n\\nexport default function Canvas() {\\n  const pos1 = usePointerPosition();\\n  const pos2 = useDelayedValue(pos1, 100);\\n  const pos3 = useDelayedValue(pos2, 200);\\n  const pos4 = useDelayedValue(pos3, 100);\\n  const pos5 = useDelayedValue(pos3, 50);\\n  return (\\n    <>\\n      <Dot position={pos1} opacity={1} />\\n      <Dot position={pos2} opacity={0.8} />\\n      <Dot position={pos3} opacity={0.6} />\\n      <Dot position={pos4} opacity={0.4} />\\n      <Dot position={pos5} opacity={0.2} />\\n    </>\\n  );\\n}\\n\\nfunction Dot({ position, opacity }) {\\n  return (\\n    <div style={{\\n      position: 'absolute',\\n      backgroundColor: 'pink',\\n      borderRadius: '50%',\\n      opacity,\\n      transform: `translate(${position.x}px, ${position.y}px)`,\\n      pointerEvents: 'none',\\n      left: -20,\\n      top: -20,\\n      width: 40,\\n      height: 40,\\n    }} />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/usePointerPosition.js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport function usePointerPosition() {\\n  const [position, setPosition] = useState({ x: 0, y: 0 });\\n  useEffect(() => {\\n    function handleMove(e) {\\n      setPosition({ x: e.clientX, y: e.clientY });\\n    }\\n    window.addEventListener('pointermove', handleMove);\\n    return () => window.removeEventListener('pointermove', handleMove);\\n  }, []);\\n  return position;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { min-height: 300px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"注意这个 Effect \",[\"$r\",\"strong\",null,{\"children\":\"不\"}],\" 需要清理。如果你在清理函数中调用了 \",[\"$r\",\"code\",null,{\"children\":\"clearTimeout\"}],\"，那么每次 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 变化时，就会终止已经计划好的 timeout。为了保持运动连续，你需要触发所有 timeout。\"]}]]}]]}]]","meta":{"title":"使用自定义 Hook 复用逻辑"}},"__N_SSG":true}