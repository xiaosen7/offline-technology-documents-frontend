{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#choosing-between-event-handlers-and-effects\",\"depth\":2,\"text\":\"在事件处理函数和 Effect 中做选择 \"},{\"url\":\"#event-handlers-run-in-response-to-specific-interactions\",\"depth\":3,\"text\":\"事件处理函数只在响应特定的交互操作时运行 \"},{\"url\":\"#effects-run-whenever-synchronization-is-needed\",\"depth\":3,\"text\":\"每当需要同步，Effect 就会运行 \"},{\"url\":\"#reactive-values-and-reactive-logic\",\"depth\":2,\"text\":\"响应式值和响应式逻辑 \"},{\"url\":\"#logic-inside-event-handlers-is-not-reactive\",\"depth\":3,\"text\":\"事件处理函数内部的逻辑是非响应式的 \"},{\"url\":\"#logic-inside-effects-is-reactive\",\"depth\":3,\"text\":\"Effect 内部的逻辑是响应式的 \"},{\"url\":\"#extracting-non-reactive-logic-out-of-effects\",\"depth\":2,\"text\":\"从 Effect 中提取非响应式逻辑 \"},{\"url\":\"#declaring-an-effect-event\",\"depth\":3,\"text\":\"声明一个 Effect Event \"},{\"url\":\"#reading-latest-props-and-state-with-effect-events\",\"depth\":3,\"text\":\"使用 Effect Event 读取最新的 props 和 state \"},{\"url\":\"#limitations-of-effect-events\",\"depth\":3,\"text\":\"Effect Event 的局限性 \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"32\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"事件处理函数只有在你再次执行同样的交互时才会重新运行。Effect 和事件处理函数不一样，它只有在读取的 props 或 state 值和上一次渲染不一样时才会重新同步。有时你需要这两种行为的混合体：即一个 Effect 只在响应某些值时重新运行，但是在其他值变化时不重新运行。本章将会教你怎么实现这一点。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"怎么在事件处理函数和 Effect 之间做选择\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"为什么 Effect 是响应式的，而事件处理函数不是\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"当你想要 Effect 的部分代码变成非响应式时要做些什么\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Effect Event 是什么，以及怎么从 Effect 中提取\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"怎么使用 Effect Event 读取最新的 props 和 state\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"choosing-between-event-handlers-and-effects\",\"children\":\"在事件处理函数和 Effect 中做选择 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"首先让我们回顾一下事件处理函数和 Effect 的区别。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"假设你正在实现一个聊天室组件，需求如下：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"组件应该自动连接选中的聊天室。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"每当你点击“Send”按钮，组件应该在当前聊天界面发送一条消息。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设你已经实现了这部分代码，但是还没有确定应该放在哪里。你是应该用事件处理函数还是 Effect 呢？每当你需要回答这个问题时，请考虑一下 \",[\"$r\",\"a\",null,{\"href\":\"/learn/synchronizing-with-effects#what-are-effects-and-how-are-they-different-from-events\",\"children\":\"为什么代码需要运行\"}],\"。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"event-handlers-run-in-response-to-specific-interactions\",\"children\":\"事件处理函数只在响应特定的交互操作时运行 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"从用户角度出发，发送消息是 \",[\"$r\",\"strong\",null,{\"children\":\"因为\"}],\" 他点击了特定的“Send”按钮。如果在任意时间或者因为其他原因发送消息，用户会觉得非常混乱。这就是为什么发送消息应该使用事件处理函数。事件处理函数是让你处理特定的交互操作的：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-6}\",\"children\":\"function ChatRoom({ roomId }) {\\n  const [message, setMessage] = useState('');\\n  // ...\\n  function handleSendClick() {\\n    sendMessage(message);\\n  }\\n  // ...\\n  return (\\n    <>\\n      <input value={message} onChange={e => setMessage(e.target.value)} />\\n      <button onClick={handleSendClick}>Send</button>;\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"借助事件处理函数，你可以确保 \",[\"$r\",\"code\",null,{\"children\":\"sendMessage(message)\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"只\"}],\" 在用户点击按钮的时候运行。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"effects-run-whenever-synchronization-is-needed\",\"children\":\"每当需要同步，Effect 就会运行 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"回想一下，你还需要让组件和聊天室保持连接。代码放哪里呢？\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"运行这个代码的 \",[\"$r\",\"strong\",null,{\"children\":\"原因\"}],\" 不是特定的交互操作。用户为什么或怎么导航到聊天室屏幕的都不重要。既然用户正在看它并且能够和它交互，组件就要和选中的聊天服务器保持连接。即使聊天室组件显示的是应用的初始屏幕，用户根本还没有执行任何交互，仍然应该需要保持连接。这就是这里用 Effect 的原因：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-9}\",\"children\":\"function ChatRoom({ roomId }) {\\n  // ...\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n    return () => {\\n      connection.disconnect();\\n    };\\n  }, [roomId]);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"无论\"}],\" 用户是否执行指定交互操作，这段代码都可以保证当前选中的聊天室服务器一直有一个活跃连接。用户是否只启动了应用，或选中了不同的聊天室，又或者导航到另一个屏幕后返回，Effect 都可以确保组件和当前选中的聊天室保持同步，并在必要时 \",[\"$r\",\"a\",null,{\"href\":\"/learn/lifecycle-of-reactive-effects#why-synchronization-may-need-to-happen-more-than-once\",\"children\":\"重新连接\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { createConnection, sendMessage } from './chat.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId }) {\\n  const [message, setMessage] = useState('');\\n\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId]);\\n\\n  function handleSendClick() {\\n    sendMessage(message);\\n  }\\n\\n  return (\\n    <>\\n      <h1>Welcome to the {roomId} room!</h1>\\n      <input value={message} onChange={e => setMessage(e.target.value)} />\\n      <button onClick={handleSendClick}>Send</button>\\n    </>\\n  );\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? 'Close chat' : 'Open chat'}\\n      </button>\\n      {show && <hr />}\\n      {show && <ChatRoom roomId={roomId} />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function sendMessage(message) {\\n  console.log('🔵 You sent: ' + message);\\n}\\n\\nexport function createConnection(serverUrl, roomId) {\\n  // 真正的实现实际上会连接到服务器\\n  return {\\n    connect() {\\n      console.log('✅ Connecting to \\\"' + roomId + '\\\" room at ' + serverUrl + '...');\\n    },\\n    disconnect() {\\n      console.log('❌ Disconnected from \\\"' + roomId + '\\\" room at ' + serverUrl);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input, select { margin-right: 20px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"88\",{\"children\":[\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reactive-values-and-reactive-logic\",\"children\":\"响应式值和响应式逻辑 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"直观上，你可以说事件处理函数总是“手动”触发的，例如点击按钮。另一方面， Effect 是自动触发：每当需要保持同步的时候他们就会开始运行和重新运行。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"有一个更精确的方式来考虑这个问题。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"组件内部声明的 state 和 props 变量被称为  \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"响应式值\"}],\"。本示例中的 \",[\"$r\",\"code\",null,{\"children\":\"serverUrl\"}],\" 不是响应式值，但 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"message\"}],\" 是。他们参与组件的渲染数据流：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[2, 3, \\\"roomId\\\"], [2, 4, \\\"message\\\"]]\",\"children\":\"const serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId }) {\\n  const [message, setMessage] = useState('');\\n\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"像这样的响应式值可以因为重新渲染而变化。例如用户可能会编辑 \",[\"$r\",\"code\",null,{\"children\":\"message\"}],\" 或者在下拉菜单中选中不同的 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\"。事件处理函数和 Effect 对于变化的响应是不一样的：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"事件处理函数内部的逻辑是非响应式的\"}],\"。除非用户又执行了同样的操作（例如点击），否则这段逻辑不会再运行。事件处理函数可以在“不响应”他们变化的情况下读取响应式值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"Effect 内部的逻辑是响应式的\"}],\"。如果 Effect 要读取响应式值，\",[\"$r\",\"a\",null,{\"href\":\"/learn/lifecycle-of-reactive-effects#effects-react-to-reactive-values\",\"children\":\"你必须将它指定为依赖项\"}],\"。如果接下来的重新渲染引起那个值变化，React 就会使用新值重新运行 Effect 内的逻辑。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"让我们重新看看前面的示例来说明差异。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"logic-inside-event-handlers-is-not-reactive\",\"children\":\"事件处理函数内部的逻辑是非响应式的 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"看这行代码。这个逻辑是响应式的吗？\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[2, 2, \\\"message\\\"]]\",\"children\":\"    // ...\\n    sendMessage(message);\\n    // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"从用户角度出发，\",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"message\"}],\" 的变化并不意味着他们想要发送消息\"]}],\"。它只能表明用户正在输入。换句话说，发送消息的逻辑不应该是响应式的。它不应该仅仅因为 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"响应式值\"}],\" 变化而再次运行。这就是应该把它归入事件处理函数的原因：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"  function handleSendClick() {\\n    sendMessage(message);\\n  }\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"事件处理函数是非响应式的，所以 \",[\"$r\",\"code\",null,{\"children\":\"sendMessage(message)\"}],\" 只会在用户点击“Send”按钮的时候运行。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"logic-inside-effects-is-reactive\",\"children\":\"Effect 内部的逻辑是响应式的 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在让我们返回这几行代码：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[2, 2, \\\"roomId\\\"]]\",\"children\":\"    // ...\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n    // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"从用户角度出发，\",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 的变化意味着他们的确想要连接到不同的房间\"]}],\"。换句话说，连接房间的逻辑应该是响应式的。你 \",[\"$r\",\"strong\",null,{\"children\":\"需要\"}],\" 这几行代码和响应式值“保持同步”，并在值不同时再次运行。这就是它被归入 Effect 的原因：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n    return () => {\\n      connection.disconnect()\\n    };\\n  }, [roomId]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Effect 是响应式的，所以 \",[\"$r\",\"code\",null,{\"children\":\"createConnection(serverUrl, roomId)\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"connection.connect()\"}],\" 会因为 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 每个不同的值而运行。Effect 让聊天室连接和当前选中的房间保持了同步。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"extracting-non-reactive-logic-out-of-effects\",\"children\":\"从 Effect 中提取非响应式逻辑 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你想混合使用响应式逻辑和非响应式逻辑时，事情变得更加棘手。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如，假设你想在用户连接到聊天室时展示一个通知。并且通过从 props 中读取当前 theme（dark 或者 light）来展示对应颜色的通知：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,4-6}\",\"children\":\"function ChatRoom({ roomId, theme }) {\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.on('connected', () => {\\n      showNotification('Connected!', theme);\\n    });\\n    connection.connect();\\n    // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 是一个响应式值（它会由于重新渲染而变化），并且 \",[\"$r\",\"a\",null,{\"href\":\"/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency\",\"children\":\"Effect 读取的每一个响应式值都必须在其依赖项中声明\"}],\"。现在你必须把 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 作为 Effect 的依赖项之一：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5,11}\",\"children\":\"function ChatRoom({ roomId, theme }) {\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.on('connected', () => {\\n      showNotification('Connected!', theme);\\n    });\\n    connection.connect();\\n    return () => {\\n      connection.disconnect()\\n    };\\n  }, [roomId, theme]); // ✅ 声明所有依赖项\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"用这个例子试一下，看你能否看出这个用户体验问题：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"latest\\\",\\n    \\\"react-dom\\\": \\\"latest\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { createConnection, sendMessage } from './chat.js';\\nimport { showNotification } from './notifications.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId, theme }) {\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.on('connected', () => {\\n      showNotification('Connected!', theme);\\n    });\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId, theme]);\\n\\n  return <h1>Welcome to the {roomId} room!</h1>\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Use dark theme\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection(serverUrl, roomId) {\\n  // 真正的实现实际上会连接到服务器\\n  let connectedCallback;\\n  let timeout;\\n  return {\\n    connect() {\\n      timeout = setTimeout(() => {\\n        if (connectedCallback) {\\n          connectedCallback();\\n        }\\n      }, 100);\\n    },\\n    on(event, callback) {\\n      if (connectedCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'connected') {\\n        throw Error('Only \\\"connected\\\" event is supported.');\\n      }\\n      connectedCallback = callback;\\n    },\\n    disconnect() {\\n      clearTimeout(timeout);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme) {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 变化时，聊天会和预期一样重新连接。但是由于 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 也是一个依赖项，所以每次你在 dark 和 light 主题间切换时，聊天 \",[\"$r\",\"strong\",null,{\"children\":\"也会\"}],\" 重连。这不是很好！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"换言之，即使它在 Effect 内部（这是响应式的），你也不想让这行代码变成响应式：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"      // ...\\n      showNotification('Connected!', theme);\\n      // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你需要一个将这个非响应式逻辑和周围响应式 Effect 隔离开来的方法。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"declaring-an-effect-event\",\"children\":\"声明一个 Effect Event \"}],\"\\n\",[\"$r\",\"Wip\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"本章节描述了一个在 React 稳定版中 \",[\"$r\",\"strong\",null,{\"children\":\"还没有发布的实验性 API\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/experimental_useEffectEvent\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffectEvent\"}]}],\" 这个特殊的 Hook 从 Effect 中提取非响应式逻辑：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,4-6}\",\"children\":\"import { useEffect, useEffectEvent } from 'react';\\n\\nfunction ChatRoom({ roomId, theme }) {\\n  const onConnected = useEffectEvent(() => {\\n    showNotification('Connected!', theme);\\n  });\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里的 \",[\"$r\",\"code\",null,{\"children\":\"onConnected\"}],\" 被称为 \",[\"$r\",\"strong\",null,{\"children\":\"Effect Event\"}],\"。它是 Effect 逻辑的一部分，但是其行为更像事件处理函数。它内部的逻辑不是响应式的，而且能一直“看见”最新的 props 和 state。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你可以在 Effect 内部调用 \",[\"$r\",\"code\",null,{\"children\":\"onConnected\"}],\" Effect Event：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-4,9,13}\",\"children\":\"function ChatRoom({ roomId, theme }) {\\n  const onConnected = useEffectEvent(() => {\\n    showNotification('Connected!', theme);\\n  });\\n\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.on('connected', () => {\\n      onConnected();\\n    });\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId]); // ✅ 声明所有依赖项\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个方法解决了问题。注意你必须从 Effect 依赖项中 \",[\"$r\",\"strong\",null,{\"children\":\"移除\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onConnected\"}],\"。\",[\"$r\",\"strong\",null,{\"children\":\"Effect Event 是非响应式的并且必须从依赖项中删除\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"验证新表现是否和你预期的一样：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\nimport { createConnection, sendMessage } from './chat.js';\\nimport { showNotification } from './notifications.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId, theme }) {\\n  const onConnected = useEffectEvent(() => {\\n    showNotification('Connected!', theme);\\n  });\\n\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.on('connected', () => {\\n      onConnected();\\n    });\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId]);\\n\\n  return <h1>Welcome to the {roomId} room!</h1>\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Use dark theme\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection(serverUrl, roomId) {\\n  // 真正的实现实际上会连接到服务器\\n  let connectedCallback;\\n  let timeout;\\n  return {\\n    connect() {\\n      timeout = setTimeout(() => {\\n        if (connectedCallback) {\\n          connectedCallback();\\n        }\\n      }, 100);\\n    },\\n    on(event, callback) {\\n      if (connectedCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'connected') {\\n        throw Error('Only \\\"connected\\\" event is supported.');\\n      }\\n      connectedCallback = callback;\\n    },\\n    disconnect() {\\n      clearTimeout(timeout);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js hidden\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme) {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"178\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以将 Effect Event 看成和事件处理函数相似的东西。主要区别是事件处理函数只在响应用户交互的时候运行，而 Effect Event 是你在 Effect 中触发的。Effect Event 让你在 Effect 响应性和不应是响应式的代码间“打破链条”。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-latest-props-and-state-with-effect-events\",\"children\":\"使用 Effect Event 读取最新的 props 和 state \"}],\"\\n\",[\"$r\",\"Wip\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"本章节描述了一个在 React 稳定版中 \",[\"$r\",\"strong\",null,{\"children\":\"还没有发布的实验性 API\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Effect Event 可以修复之前许多你可能试图抑制依赖项检查工具的地方。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如，假设你有一个记录页面访问的 Effect：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Page() {\\n  useEffect(() => {\\n    logVisit();\\n  }, []);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"稍后向你的站点添加多个路由。现在 \",[\"$r\",\"code\",null,{\"children\":\"Page\"}],\" 组件接收包含当前路径的 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" props。你想把 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"logVisit\"}],\" 调用的一部分进行传递，但是依赖项检查工具会提示：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,3}\",\"children\":\"function Page({ url }) {\\n  useEffect(() => {\\n    logVisit(url);\\n  }, []); // 🔴 React Hook useEffect 缺少一个依赖项: 'url'\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"想想你想要代码做什么。你 \",[\"$r\",\"strong\",null,{\"children\":\"需要\"}],\" 为不同的 URL 记录单独的访问，因为每个 URL 代表不同的页面。换言之，\",[\"$r\",\"code\",null,{\"children\":\"logVisit\"}],\" 调用对于 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"应该\"}],\" 是响应式的。这就是为什么在这种情况下， 遵循依赖项检查工具并添加 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 作为一个依赖项很有意义：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"function Page({ url }) {\\n  useEffect(() => {\\n    logVisit(url);\\n  }, [url]); // ✅ 声明所有依赖项\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在假设你想在每次页面访问中包含购物车中的商品数量：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3,6}\",\"children\":\"function Page({ url }) {\\n  const { items } = useContext(ShoppingCartContext);\\n  const numberOfItems = items.length;\\n\\n  useEffect(() => {\\n    logVisit(url, numberOfItems);\\n  }, [url]); // 🔴 React Hook useEffect 缺少依赖项: ‘numberOfItems’\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你在 Effect 内部使用了 \",[\"$r\",\"code\",null,{\"children\":\"numberOfItems\"}],\"，所以代码检查工具会让你把它加到依赖项中。但是，你 \",[\"$r\",\"strong\",null,{\"children\":\"不\"}],\" 想要 \",[\"$r\",\"code\",null,{\"children\":\"logVisit\"}],\" 调用响应 \",[\"$r\",\"code\",null,{\"children\":\"numberOfItems\"}],\"。如果用户把某样东西放入购物车， \",[\"$r\",\"code\",null,{\"children\":\"numberOfItems\"}],\" 会变化，这 \",[\"$r\",\"strong\",null,{\"children\":\"并不意味着\"}],\" 用户再次访问了这个页面。换句话说，在某种意义上，\",[\"$r\",\"strong\",null,{\"children\":\"访问页面\"}],\" 是一个“事件”。它发生在某个准确的时刻。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"将代码分割为两部分：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-7,10}\",\"children\":\"function Page({ url }) {\\n  const { items } = useContext(ShoppingCartContext);\\n  const numberOfItems = items.length;\\n\\n  const onVisit = useEffectEvent(visitedUrl => {\\n    logVisit(visitedUrl, numberOfItems);\\n  });\\n\\n  useEffect(() => {\\n    onVisit(url);\\n  }, [url]); // ✅ 声明所有依赖项\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里的 \",[\"$r\",\"code\",null,{\"children\":\"onVisit\"}],\" 是一个 Effect Event。里面的代码不是响应式的。这就是为什么你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"numberOfItems\"}],\"（或者任意响应式值！）而不用担心引起周围代码因为变化而重新执行。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"另一方面，Effect 本身仍然是响应式的。其内部的代码使用了 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" props，所以每次因为不同的 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 重新渲染后 Effect 都会重新运行。这会依次调用 \",[\"$r\",\"code\",null,{\"children\":\"onVisit\"}],\" 这个 Effect Event。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"结果是你会因为 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 的变化去调用 \",[\"$r\",\"code\",null,{\"children\":\"logVisit\"}],\"，并且读取的一直都是最新的 \",[\"$r\",\"code\",null,{\"children\":\"numberOfItems\"}],\"。但是如果 \",[\"$r\",\"code\",null,{\"children\":\"numberOfItems\"}],\" 自己变化，不会引起任何代码的重新运行。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"你可能想知道是否可以无参数调用 \",[\"$r\",\"code\",null,{\"children\":\"onVisit()\"}],\" 并且读取内部的 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\"：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,6}\",\"children\":\"  const onVisit = useEffectEvent(() => {\\n    logVisit(url, numberOfItems);\\n  });\\n\\n  useEffect(() => {\\n    onVisit();\\n  }, [url]);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这可以起作用，但是更好的方法是将这个 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 显式传递给Effect Event。\",[\"$r\",\"strong\",null,{\"children\":[\"通过将 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 作为参数传给 Effect Event，你可以说从用户角度来看使用不同的 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 访问页面构成了一个独立的“事件”\"]}],\"。\",[\"$r\",\"code\",null,{\"children\":\"visitedUrl\"}],\" 是发生的“事件”的一部分：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-2,6}\",\"children\":\"  const onVisit = useEffectEvent(visitedUrl => {\\n    logVisit(visitedUrl, numberOfItems);\\n  });\\n\\n  useEffect(() => {\\n    onVisit(url);\\n  }, [url]);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"由于 Effect 明确“要求” \",[\"$r\",\"code\",null,{\"children\":\"visitedUrl\"}],\"，所以现在你不会不小心地从 Effect 的依赖项中移除 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\"。如果你移除了 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 依赖项（导致不同的页面访问被认为是一个），代码检查工具会向你提出警告。如果你想要 \",[\"$r\",\"code\",null,{\"children\":\"onVisit\"}],\" 能对 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 的变化做出响应，不要读取内部的 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\"（这里不是响应式的），而是应该将它 \",[\"$r\",\"strong\",null,{\"children\":\"从\"}],\" Effect 中传入。\"]}],[\"$r\",\"p\",null,{\"children\":\"如果 Effect 内部有一些异步逻辑，这就变得非常重要了：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,8}\",\"children\":\"  const onVisit = useEffectEvent(visitedUrl => {\\n    logVisit(visitedUrl, numberOfItems);\\n  });\\n\\n  useEffect(() => {\\n    setTimeout(() => {\\n      onVisit(url);\\n    }, 5000); // 延迟记录访问\\n  }, [url]);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"在这里，\",[\"$r\",\"code\",null,{\"children\":\"onVisit\"}],\" 内的 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 对应 \",[\"$r\",\"strong\",null,{\"children\":\"最新的\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\"（可能已经变化了），但是 \",[\"$r\",\"code\",null,{\"children\":\"visitedUrl\"}],\" 对应的是最开始引起这个 Effect（并且是本次 \",[\"$r\",\"code\",null,{\"children\":\"onVisit\"}],\" 调用）运行的 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 。\"]}]]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"is-it-okay-to-suppress-the-dependency-linter-instead\",\"children\":\"抑制依赖项检查是可行的吗？ \"}],[\"$r\",\"p\",null,{\"children\":\"在已经存在的代码库中，你可能有时会看见像这样的检查规则抑制：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7-9}\",\"children\":\"function Page({ url }) {\\n  const { items } = useContext(ShoppingCartContext);\\n  const numberOfItems = items.length;\\n\\n  useEffect(() => {\\n    logVisit(url, numberOfItems);\\n    // 🔴 避免像这样抑制代码检查:\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, [url]);\\n  // ...\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"等 \",[\"$r\",\"code\",null,{\"children\":\"useEffectEvent\"}],\" 成为 React 稳定部分后，我们会推荐 \",[\"$r\",\"strong\",null,{\"children\":\"永远不要抑制代码检查工具\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"抑制规则的第一个缺点是当 Effect 需要对一个已经在代码中出现过的新响应式依赖项做出“响应”时，React 不会再发出警告。在稍早之前的示例中，你将 \",[\"$r\",\"code\",null,{\"children\":\"url\"}],\" 添加为依赖项，\",[\"$r\",\"strong\",null,{\"children\":\"是因为\"}],\" React 提醒你去做这件事。如果禁用代码检查，你未来将不会再收到任何关于 Effect 修改的提醒。这引起了 bug。\"]}],[\"$r\",\"p\",null,{\"children\":[\"这个示例展示了一个由抑制代码检查引起的奇怪 bug。在这个示例中，\",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\" 应该读取当前的 state 变量 \",[\"$r\",\"code\",null,{\"children\":\"canMove\"}],\" 的值来决定这个点是否应该跟随光标。但是 \",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\" 中的 \",[\"$r\",\"code\",null,{\"children\":\"canMove\"}],\" 一直是 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":\"你能看出是为什么吗？\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport default function App() {\\n  const [position, setPosition] = useState({ x: 0, y: 0 });\\n  const [canMove, setCanMove] = useState(true);\\n\\n  function handleMove(e) {\\n    if (canMove) {\\n      setPosition({ x: e.clientX, y: e.clientY });\\n    }\\n  }\\n\\n  useEffect(() => {\\n    window.addEventListener('pointermove', handleMove);\\n    return () => window.removeEventListener('pointermove', handleMove);\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);\\n\\n  return (\\n    <>\\n      <label>\\n        <input type=\\\"checkbox\\\"\\n          checked={canMove}\\n          onChange={e => setCanMove(e.target.checked)}\\n        />\\n        The dot is allowed to move\\n      </label>\\n      <hr />\\n      <div style={{\\n        position: 'absolute',\\n        backgroundColor: 'pink',\\n        borderRadius: '50%',\\n        opacity: 0.6,\\n        transform: `translate(${position.x}px, ${position.y}px)`,\\n        pointerEvents: 'none',\\n        left: -20,\\n        top: -20,\\n        width: 40,\\n        height: 40,\\n      }} />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body {\\n  height: 200px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"这段代码的问题在于抑制依赖项检查。如果移除，你可以看到 Effect 应该依赖于 \",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\" 函数。这非常有意义：\",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\" 是在组件内声明的，是响应式值。而每个响应式值都必须被指定为依赖项，否则它可能会随着时间而过时！\"]}],[\"$r\",\"p\",null,{\"children\":[\"原代码的作者对 React “撒谎”说 Effect 不依赖于任何响应式值（\",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\"）。这就是为什么 \",[\"$r\",\"code\",null,{\"children\":\"canMove\"}],\"（以及 \",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\"）变化后 React 没有重新同步。因为 React 没有重新同步 Effect，所以作为监听器附加的 \",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\" 还是初次渲染期间创建的 \",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\" 函数。初次渲染期间，\",[\"$r\",\"code\",null,{\"children\":\"canMove\"}],\" 的值是 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，这就是为什么来自初次渲染的 \",[\"$r\",\"code\",null,{\"children\":\"handleMove\"}],\" 永远只能看到这个值。\"]}],[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":\"如果你从来没有抑制代码检查，就永远不会遇见过期值的问题。\"}]}],[\"$r\",\"p\",null,{\"children\":[\"有了 \",[\"$r\",\"code\",null,{\"children\":\"useEffectEvent\"}],\"，就不需要对代码检查工具“说谎”，并且代码也能和你预期的一样工作：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport default function App() {\\n  const [position, setPosition] = useState({ x: 0, y: 0 });\\n  const [canMove, setCanMove] = useState(true);\\n\\n  const onMove = useEffectEvent(e => {\\n    if (canMove) {\\n      setPosition({ x: e.clientX, y: e.clientY });\\n    }\\n  });\\n\\n  useEffect(() => {\\n    window.addEventListener('pointermove', onMove);\\n    return () => window.removeEventListener('pointermove', onMove);\\n  }, []);\\n\\n  return (\\n    <>\\n      <label>\\n        <input type=\\\"checkbox\\\"\\n          checked={canMove}\\n          onChange={e => setCanMove(e.target.checked)}\\n        />\\n        The dot is allowed to move\\n      </label>\\n      <hr />\\n      <div style={{\\n        position: 'absolute',\\n        backgroundColor: 'pink',\\n        borderRadius: '50%',\\n        opacity: 0.6,\\n        transform: `translate(${position.x}px, ${position.y}px)`,\\n        pointerEvents: 'none',\\n        left: -20,\\n        top: -20,\\n        width: 40,\\n        height: 40,\\n      }} />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body {\\n  height: 200px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"这不意味着 \",[\"$r\",\"code\",null,{\"children\":\"useEffectEvent\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"总是\"}],\" 正确的解决方案。你只能把它用在你不需要变成响应式的代码上。上面的 sandbox 中，你不需要 Effect 的代码响应 \",[\"$r\",\"code\",null,{\"children\":\"canMove\"}],\"。这就是提取 Effect Event 很有意义的原因。\"]}],[\"$r\",\"p\",null,{\"children\":[\"阅读 \",[\"$r\",\"a\",null,{\"href\":\"/learn/removing-effect-dependencies\",\"children\":\"移除 Effect 依赖项\"}],\" 寻找抑制代码检查的其他正确的替代方式。\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"limitations-of-effect-events\",\"children\":\"Effect Event 的局限性 \"}],\"\\n\",[\"$r\",\"Wip\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"本章节描述了一个在 React 稳定版中 \",[\"$r\",\"strong\",null,{\"children\":\"还没有发布的实验性 API\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Effect Event 的局限性在于你如何使用他们：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"只在 Effect 内部调用他们\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"永远不要把他们传给其他的组件或者 Hook\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如不要像这样声明和传递 Effect Event：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-6,8}\",\"children\":\"function Timer() {\\n  const [count, setCount] = useState(0);\\n\\n  const onTick = useEffectEvent(() => {\\n    setCount(count + 1);\\n  });\\n\\n  useTimer(onTick, 1000); // 🔴 Avoid: 传递 Effect Event\\n\\n  return <h1>{count}</h1>\\n}\\n\\nfunction useTimer(callback, delay) {\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      callback();\\n    }, delay);\\n    return () => {\\n      clearInterval(id);\\n    };\\n  }, [delay, callback]); // 需要在依赖项中指定“callback”\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"取而代之的是，永远直接在使用他们的 Effect 旁边声明 Effect Event：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{10-12,16,21}\",\"children\":\"function Timer() {\\n  const [count, setCount] = useState(0);\\n  useTimer(() => {\\n    setCount(count + 1);\\n  }, 1000);\\n  return <h1>{count}</h1>\\n}\\n\\nfunction useTimer(callback, delay) {\\n  const onTick = useEffectEvent(() => {\\n    callback();\\n  });\\n\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      onTick(); // ✅ Good: 只在 Effect 内部局部调用\\n    }, delay);\\n    return () => {\\n      clearInterval(id);\\n    };\\n  }, [delay]); // 不需要指定 “onTick” (Effect Event) 作为依赖项\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Effect Event 是 Effect 代码的非响应式“片段”。他们应该在使用他们的 Effect 的旁边。\"}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"事件处理函数在响应特定交互时运行。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Effect 在需要同步的时候运行。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"事件处理函数内部的逻辑是非响应式的。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Effect 内部的逻辑是响应式的。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以将非响应式逻辑从 Effect 移到 Effect Event 中。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"只在 Effect 内部调用 Effect Event。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"不要将 Effect Event 传给其他组件或者 Hook。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"fix-a-variable-that-doesnt-update\",\"children\":\"修复一个不更新的变量 \"}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Timer\"}],\" 组件保存了一个 \",[\"$r\",\"code\",null,{\"children\":\"count\"}],\" 的 state 变量，这个变量每秒增加一次。每次增加的值存储在 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" state 变量中。你可以使用加减按钮控制 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 变量。\"]}],[\"$r\",\"p\",null,{\"children\":[\"但是无论你点击加号按钮多少次，计数器每秒都只增加 １。这段代码存在什么问题呢？为什么 Effect 内部的 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 总是等于 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\" 呢？找出错误并修复它。\"]}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"修复这段代码，必须足够遵循这些规则。\"}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + increment);\\n    }, 1000);\\n    return () => {\\n      clearInterval(id);\\n    };\\n    // eslint-disable-next-line react-hooks/exhaustive-deps\\n  }, []);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Every second, increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"和往常一样，当你寻找 Effect 中的 bug 时，从寻找代码检查抑制开始。\"}],[\"$r\",\"p\",null,{\"children\":[\"如果你移除了抑制注释，React 就会告诉你这个 Effect 的代码依赖于 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\"，但是你通过宣称这个 Effect 不依赖于响应式值（\",[\"$r\",\"code\",null,{\"children\":\"[]\"}],\"）“欺骗”了 React。将 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 添加到依赖项数组：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + increment);\\n    }, 1000);\\n    return () => {\\n      clearInterval(id);\\n    };\\n  }, [increment]);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Every second, increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"现在当 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 变化时，React 会重新同步你的 Effect，这会重启 interval。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-a-freezing-counter\",\"children\":\"修复一个冻结的计数器 \"}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Timer\"}],\" 组件保存了一个 \",[\"$r\",\"code\",null,{\"children\":\"count\"}],\" 的 state 变量，这个变量每秒增加一次。每次增加的值存储在 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" state 变量中，你可以使用加减按钮控制它。例如，尝试点击加号按钮九次，注意现在 \",[\"$r\",\"code\",null,{\"children\":\"count\"}],\" 每次都增加 10 而不是 1。\"]}],[\"$r\",\"p\",null,{\"children\":[\"这个用户接口有一个小问题。你可能注意到如果你每秒内按压加减按钮不止一次， 那计时器本身似乎就会暂停。它只在你最后一次按压按钮的一秒后恢复。找出为什么会发生这种现象，并修复它以便计时器能 \",[\"$r\",\"strong\",null,{\"children\":\"每\"}],\" 秒滴答作响而不中断。\"]}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"似乎设置计时器的 Effect 对 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 值的变化做出了“响应”。为了调用 \",[\"$r\",\"code\",null,{\"children\":\"setCount\"}],\" 而使用当前 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 值的代码行真的需要是响应式吗？\"]}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      setCount(c => c + increment);\\n    }, 1000);\\n    return () => {\\n      clearInterval(id);\\n    };\\n  }, [increment]);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Every second, increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"问题在于 Effect 内部的代码使用了 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 这个 state 变量。因为它是 Effect 的一个依赖项，每次 \",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 变化都会引起 Effect 重新同步，这引起了 interval 清理。如果你每次有机会触发之前就清理 interval，它会表现得好像计时器已经停止了。\"]}],[\"$r\",\"p\",null,{\"children\":[\"为了解决这个问题，需要从 Effect 中提取一个 Effect Event \",[\"$r\",\"code\",null,{\"children\":\"onTick\"}],\"：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n\\n  const onTick = useEffectEvent(() => {\\n    setCount(c => c + increment);\\n  });\\n\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      onTick();\\n    }, 1000);\\n    return () => {\\n      clearInterval(id);\\n    };\\n  }, []);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Every second, increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"由于 \",[\"$r\",\"code\",null,{\"children\":\"onTick\"}],\" 是一个 Effect Event，所以内部的代码是非响应式的。\",[\"$r\",\"code\",null,{\"children\":\"increment\"}],\" 的变化不会触发任何 Effect。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-a-non-adjustable-delay\",\"children\":\"修复不可调整的延迟 \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个示例中，你可以自定义 interval 延迟。它被储存在一个由两个按钮更新的 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" state 变量中。但你即使按了“加 100 ms”按钮到 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 为 1000 毫秒（即 1 秒），可以注意到计时器仍然在快速增加（每 100 ms）。你对 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 的修改好像被忽略了。找到并修复这个 bug。\"]}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"Effect Event 内部的代码是非响应式的。哪些情况下你会 \",[\"$r\",\"strong\",null,{\"children\":\"想要\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"setInterval\"}],\" 调用重新运行呢？\"]}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n  const [delay, setDelay] = useState(100);\\n\\n  const onTick = useEffectEvent(() => {\\n    setCount(c => c + increment);\\n  });\\n\\n  const onMount = useEffectEvent(() => {\\n    return setInterval(() => {\\n      onTick();\\n    }, delay);\\n  });\\n\\n  useEffect(() => {\\n    const id = onMount();\\n    return () => {\\n      clearInterval(id);\\n    }\\n  }, []);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n      <p>\\n        Increment delay:\\n        <button disabled={delay === 100} onClick={() => {\\n          setDelay(d => d - 100);\\n        }}>–100 ms</button>\\n        <b>{delay} ms</b>\\n        <button onClick={() => {\\n          setDelay(d => d + 100);\\n        }}>+100 ms</button>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"上面这个示例的问题在于它没有考虑代码实际正在做什么就直接提取了一个叫做 \",[\"$r\",\"code\",null,{\"children\":\"onMount\"}],\" 的 Effect Event。你应该只为特定的原因提取 Effect Event：你想让代码的一部分称为非响应式。但是，\",[\"$r\",\"code\",null,{\"children\":\"setInterval\"}],\" 调用 state 变量 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 的变化 \",[\"$r\",\"strong\",null,{\"children\":\"应该\"}],\" 是响应式的。如果 \",[\"$r\",\"code\",null,{\"children\":\"delay\"}],\" 变化了，你想要重新设置 interval！为了修复这个问题，你需要将所有的响应式代码放回到 Effect 内部：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\n\\nexport default function Timer() {\\n  const [count, setCount] = useState(0);\\n  const [increment, setIncrement] = useState(1);\\n  const [delay, setDelay] = useState(100);\\n\\n  const onTick = useEffectEvent(() => {\\n    setCount(c => c + increment);\\n  });\\n\\n  useEffect(() => {\\n    const id = setInterval(() => {\\n      onTick();\\n    }, delay);\\n    return () => {\\n      clearInterval(id);\\n    }\\n  }, [delay]);\\n\\n  return (\\n    <>\\n      <h1>\\n        Counter: {count}\\n        <button onClick={() => setCount(0)}>Reset</button>\\n      </h1>\\n      <hr />\\n      <p>\\n        Increment by:\\n        <button disabled={increment === 0} onClick={() => {\\n          setIncrement(i => i - 1);\\n        }}>–</button>\\n        <b>{increment}</b>\\n        <button onClick={() => {\\n          setIncrement(i => i + 1);\\n        }}>+</button>\\n      </p>\\n      <p>\\n        Increment delay:\\n        <button disabled={delay === 100} onClick={() => {\\n          setDelay(d => d - 100);\\n        }}>–100 ms</button>\\n        <b>{delay} ms</b>\\n        <button onClick={() => {\\n          setDelay(d => d + 100);\\n        }}>+100 ms</button>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"总的来说，你应该对像 \",[\"$r\",\"code\",null,{\"children\":\"onMount\"}],\" 这样主要关注 \",[\"$r\",\"strong\",null,{\"children\":\"执行时机\"}],\" 而非 \",[\"$r\",\"strong\",null,{\"children\":\"目的\"}],\" 的函数持有怀疑态度。开始可能会感觉“更具描述性”，但是可能会模糊你的意图。根据经验来说，Effect Event 应该对应从“用户的”角度发生的事情。例如，\",[\"$r\",\"code\",null,{\"children\":\"onMessage\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"onTick\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"onVisit\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"onConnected\"}],\" 是优秀的 Effect Event 名称。它们内部的代码可能不需要是响应式的。另一方面，\",[\"$r\",\"code\",null,{\"children\":\"onMount\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"onUpdate\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"onUnmount\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"onAfterRender\"}],\" 太通用了，以至于很容易不小心就把一些”应该”是响应式的代码放入其中。这就是为什么你应该用 \",[\"$r\",\"strong\",null,{\"children\":\"用户想要什么发生\"}],\" 来给你的 Effect Event 命名，而不是用某些代码正好运行的时机命名。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"fix-a-delayed-notification\",\"children\":\"修复延迟通知 \"}],[\"$r\",\"p\",null,{\"children\":\"当你加入一个聊天室时，这个组件展示一个通知。但是它不会立刻展示通知。相反，把通知人工延迟 2 秒钟，以便用户有机会查看 UI。\"}],[\"$r\",\"p\",null,{\"children\":[\"这几乎生效了，但还是有一个 bug。尝试将下拉菜单从“general”变成“travel”并且接下来非常快速的变成“music”。如果你动作足够快，你会看到两个通知（和预期一样！），但是他们 \",[\"$r\",\"strong\",null,{\"children\":\"都是\"}],\" 展示 “Welcome to music”。\"]}],[\"$r\",\"p\",null,{\"children\":[\"修复它，让它能在你快速从“general”切换到“travel”再到“music”的时候看见两个通知，第一个是“Welcome to travel” ，第二个是“Welcome to music”（有一个额外的挑战，假设你 \",[\"$r\",\"strong\",null,{\"children\":\"已经\"}],\" 让通知显示了正确的房间，请修改代码只展示后面的通知）。\"]}],[\"$r\",\"Hint\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"你的 Effect 知道它连接的是哪一个房间。有任何你可能想要传给 Effect Event 的信息吗？\"}]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\nimport { createConnection, sendMessage } from './chat.js';\\nimport { showNotification } from './notifications.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId, theme }) {\\n  const onConnected = useEffectEvent(() => {\\n    showNotification('Welcome to ' + roomId, theme);\\n  });\\n\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.on('connected', () => {\\n      setTimeout(() => {\\n        onConnected();\\n      }, 2000);\\n    });\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId]);\\n\\n  return <h1>Welcome to the {roomId} room!</h1>\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Use dark theme\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection(serverUrl, roomId) {\\n  // 真正的实现实际上会连接到服务器\\n  let connectedCallback;\\n  let timeout;\\n  return {\\n    connect() {\\n      timeout = setTimeout(() => {\\n        if (connectedCallback) {\\n          connectedCallback();\\n        }\\n      }, 100);\\n    },\\n    on(event, callback) {\\n      if (connectedCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'connected') {\\n        throw Error('Only \\\"connected\\\" event is supported.');\\n      }\\n      connectedCallback = callback;\\n    },\\n    disconnect() {\\n      clearTimeout(timeout);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js hidden\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme) {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"在 Effect Event 内部，\",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 是 \",[\"$r\",\"strong\",null,{\"children\":\"Effect Event 被调用时刻\"}],\" 的值。\"]}],[\"$r\",\"p\",null,{\"children\":[\"Effect Event 伴随着两秒的延迟被调用。如果你快速地从 travel 切换到 music 聊天室，直到 travel 聊天室的通知显示出来，\",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 已经是 \",[\"$r\",\"code\",null,{\"children\":\"“music”\"}],\" 了。这就是为什么两个通知都是 “Welcome to music”。\"]}],[\"$r\",\"p\",null,{\"children\":[\"为了修复这个问题，不要在 Effect Event 里面读取 \",[\"$r\",\"strong\",null,{\"children\":\"最新的\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\"，而是如同下面的 \",[\"$r\",\"code\",null,{\"children\":\"connectedRoomId\"}],\" 一样让它成为 Effect Event 的参数。然后通过调用 \",[\"$r\",\"code\",null,{\"children\":\"onConnected(roomId)\"}],\" 将 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 从 Effect 中传入：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\nimport { createConnection, sendMessage } from './chat.js';\\nimport { showNotification } from './notifications.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId, theme }) {\\n  const onConnected = useEffectEvent(connectedRoomId => {\\n    showNotification('Welcome to ' + connectedRoomId, theme);\\n  });\\n\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.on('connected', () => {\\n      setTimeout(() => {\\n        onConnected(roomId);\\n      }, 2000);\\n    });\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId]);\\n\\n  return <h1>Welcome to the {roomId} room!</h1>\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Use dark theme\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection(serverUrl, roomId) {\\n  // 真正的实现实际上会连接到服务器\\n  let connectedCallback;\\n  let timeout;\\n  return {\\n    connect() {\\n      timeout = setTimeout(() => {\\n        if (connectedCallback) {\\n          connectedCallback();\\n        }\\n      }, 100);\\n    },\\n    on(event, callback) {\\n      if (connectedCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'connected') {\\n        throw Error('Only \\\"connected\\\" event is supported.');\\n      }\\n      connectedCallback = callback;\\n    },\\n    disconnect() {\\n      clearTimeout(timeout);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js hidden\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme) {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"将 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 设置为 \",[\"$r\",\"code\",null,{\"children\":\"“travel”\"}],\"（所以它连接到了 \",[\"$r\",\"code\",null,{\"children\":\"“travel”\"}],\" 聊天室）的 Effect 将会展示 \",[\"$r\",\"code\",null,{\"children\":\"“travel”\"}],\" 的通知。将 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 设置为 \",[\"$r\",\"code\",null,{\"children\":\"“music”\"}],\"（所以它连接到了 \",[\"$r\",\"code\",null,{\"children\":\"“music”\"}],\" 聊天室）的 Effect 将会展示 \",[\"$r\",\"code\",null,{\"children\":\"\\\"music\\\"\"}],\" 的通知。换言之，\",[\"$r\",\"code\",null,{\"children\":\"connectedRoomId\"}],\" 来自 Effect（是响应式的），而 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 总是使用最新值。\"]}],[\"$r\",\"p\",null,{\"children\":\"为了解决额外的挑战，保存通知的 timeout ID，并在 Effect 的清理函数中进行清理：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"toastify-js\\\": \\\"1.12.0\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\\nimport { createConnection, sendMessage } from './chat.js';\\nimport { showNotification } from './notifications.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId, theme }) {\\n  const onConnected = useEffectEvent(connectedRoomId => {\\n    showNotification('Welcome to ' + connectedRoomId, theme);\\n  });\\n\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    let notificationTimeoutId;\\n    connection.on('connected', () => {\\n      notificationTimeoutId = setTimeout(() => {\\n        onConnected(roomId);\\n      }, 2000);\\n    });\\n    connection.connect();\\n    return () => {\\n      connection.disconnect();\\n      if (notificationTimeoutId !== undefined) {\\n        clearTimeout(notificationTimeoutId);\\n      }\\n    };\\n  }, [roomId]);\\n\\n  return <h1>Welcome to the {roomId} room!</h1>\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('general');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        Choose the chat room:{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"general\\\">general</option>\\n          <option value=\\\"travel\\\">travel</option>\\n          <option value=\\\"music\\\">music</option>\\n        </select>\\n      </label>\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Use dark theme\\n      </label>\\n      <hr />\\n      <ChatRoom\\n        roomId={roomId}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"export function createConnection(serverUrl, roomId) {\\n  // 真正的实现实际上会连接到服务器\\n  let connectedCallback;\\n  let timeout;\\n  return {\\n    connect() {\\n      timeout = setTimeout(() => {\\n        if (connectedCallback) {\\n          connectedCallback();\\n        }\\n      }, 100);\\n    },\\n    on(event, callback) {\\n      if (connectedCallback) {\\n        throw Error('Cannot add the handler twice.');\\n      }\\n      if (event !== 'connected') {\\n        throw Error('Only \\\"connected\\\" event is supported.');\\n      }\\n      connectedCallback = callback;\\n    },\\n    disconnect() {\\n      clearTimeout(timeout);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/notifications.js hidden\",\"children\":\"import Toastify from 'toastify-js';\\nimport 'toastify-js/src/toastify.css';\\n\\nexport function showNotification(message, theme) {\\n  Toastify({\\n    text: message,\\n    duration: 2000,\\n    gravity: 'top',\\n    position: 'right',\\n    style: {\\n      background: theme === 'dark' ? 'black' : 'white',\\n      color: theme === 'dark' ? 'white' : 'black',\\n    },\\n  }).showToast();\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-top: 10px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"这确保了当你修改聊天室时，已经安排好（但还没展示）的通知会被取消。\"}]]}]]}]]","meta":{"title":"将事件从 Effect 中分开"}},"__N_SSG":true}