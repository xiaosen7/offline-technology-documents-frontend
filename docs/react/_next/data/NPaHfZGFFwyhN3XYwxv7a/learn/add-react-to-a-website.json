{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#add-react-in-one-minute\",\"depth\":2,\"text\":\"1 分钟拥有 React \"},{\"url\":\"#step-1-add-a-root-html-tag\",\"depth\":3,\"text\":\"步骤 1：添加一个根标签 \"},{\"url\":\"#step-2-add-the-script-tags\",\"depth\":3,\"text\":\"步骤 2：添加 script 标签 \"},{\"url\":\"#step-3-create-a-react-component\",\"depth\":3,\"text\":\"步骤 3：创建一个 React 组件 \"},{\"url\":\"#step-4-add-your-react-component-to-the-page\",\"depth\":3,\"text\":\"步骤 4：把你的 React 组件添加到页面中 \"},{\"url\":\"#step-5-minify-javascript-for-production\",\"depth\":3,\"text\":\"步骤 5：为生产环境压缩 JavaScript 代码 \"},{\"url\":\"#try-react-with-jsx\",\"depth\":2,\"text\":\"尝试使用 JSX 编写 React \"},{\"url\":\"#try-jsx\",\"depth\":3,\"text\":\"试用 JSX \"},{\"url\":\"#add-jsx-to-a-project\",\"depth\":3,\"text\":\"将 JSX 添加到项目 \"},{\"url\":\"#run-the-jsx-preprocessor\",\"depth\":3,\"text\":\"运行 JSX 预处理器 \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"无需使用 React 重构你的站点。只需花一分钟，将 React 添加到 HTML 中，且无需安装，即可立即开始编写交互式组件。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何 1 分钟内将 React 添加到 HTML 中\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"JSX 语法是什么及其用法\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何设置可用于生产环境的 JSX 预处理器\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"add-react-in-one-minute\",\"children\":\"1 分钟拥有 React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React 从一开始就是为渐进式开发而生。大多数网站并没有（也不需要）完全使用 React 进行构建。本小节中，我们将向你展示如何在现有 HTML 页面中添加交互式组件的方法。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以在你自己的网站上尝试，或者创建一个 \",[\"$r\",\"a\",null,{\"href\":\"https://gist.github.com/gaearon/edf814aeee85062bc9b9830aeaf27b88/archive/3b31c3cdcea7dfcfd38a81905a0052dd8e5f71ec.zip\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"空的 HTML 文件\"}],\" 来进行练习。只需将电脑连接到网络并安装一款文本编辑器即可，如 Notepad 或者 VSCode。（如需语法高亮，可以通过 \",[\"$r\",\"a\",null,{\"href\":\"/learn/editor-setup/\",\"children\":\"如何配置你的编辑器\"}],\" 章节来实现！)\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-1-add-a-root-html-tag\",\"children\":\"步骤 1：添加一个根标签 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"首先，打开你需要编辑的 HTML 页面。在你想用 React 展示内容的地方添加一个空的 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 标签。并给这个 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 标签一个唯一的 \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\" 属性值。例如：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"{3}\",\"children\":\"<!-- ... 其它 HTML ... -->\\n\\n<div id=\\\"like-button-root\\\"></div>\\n\\n<!-- ... 其它 HTML ... -->\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"它被称为”根”，因为这是 React 树开始的地方。你可以在 \",[\"$r\",\"code\",null,{\"children\":\"<body>\"}],\" 标签中的任何位置放置一个类似的根 HTML 标签。让它为内容留白。因为 React 会用你编写的 React 组件来替换它的内容。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以根据需要，在一个页面上设置多个根 HTML 标签。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-2-add-the-script-tags\",\"children\":\"步骤 2：添加 script 标签 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 HTML 页面的 \",[\"$r\",\"code\",null,{\"children\":\"</body>\"}],\" 结束标签之前，添加三个 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签用于加载以下文件：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://unpkg.com/react@18/umd/react.development.js\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react.development.js\"}]}],\" 可以让你定义 React 组件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react-dom.development.js\"}]}],\" 让 React 可以将 HTML 元素渲染到 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/docs/Web/API/Document_Object_Model\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DOM\"}],\" 中。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like-button.js\"}]}],\" 是你在步骤 3 中编写组件的地方！\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你的 HTML 文件的结尾处，应该如下所示：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"children\":\"    <!-- end of the page -->\\n    <script src=\\\"https://unpkg.com/react@18/umd/react.development.js\\\" crossorigin></script>\\n    <script src=\\\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\\\" crossorigin></script>\\n    <script src=\\\"like-button.js\\\"></script>\\n  </body>\\n</html>\\n\"}]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"部署时，你需要将 “development.js” 替换为 “production.min.js”！React 的 development 版本中内置了很多有用的错误信息，但同时也会降低你网站的访问速度。\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-3-create-a-react-component\",\"children\":\"步骤 3：创建一个 React 组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 HTML 页面文件的同级目录下创建一个名为 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like_button.js\"}]}],\" 的文件，并将如下代码片段添加到该文件中。这段代码定义了一个名为 LikeButton 的 React 组件。（在 \",[\"$r\",\"a\",null,{\"href\":\"/learn\",\"children\":\"快速入门\"}],\" 中，了解更多关于编写组件的信息。)\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"'use strict';\\n\\nfunction LikeButton() {\\n  const [liked, setLiked] = React.useState(false);\\n\\n  if (liked) {\\n    return 'You liked this!';\\n  }\\n\\n  return React.createElement(\\n    'button',\\n    {\\n      onClick: () => setLiked(true),\\n    },\\n    'Like'\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-4-add-your-react-component-to-the-page\",\"children\":\"步骤 4：把你的 React 组件添加到页面中 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最后，在 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like_button.js\"}]}],\" 底部添加以下三行代码。这几行代码会找到我们在步骤 1 中添加到 HTML 里的 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\"，接着创建了一个React 的根，最后在其内部展示了我们的 React 组件 —— “Like” 按钮：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const rootNode = document.getElementById('like-button-root');\\nconst root = ReactDOM.createRoot(rootNode);\\nroot.render(React.createElement(LikeButton));\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"恭喜！你刚刚已成功将第一个 React 组件添加到你的网站当中\"}],\"！\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://gist.github.com/gaearon/0b535239e7f39c524f9c7dc77c44f09e\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"查看完整的示例源码\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://gist.github.com/gaearon/0b535239e7f39c524f9c7dc77c44f09e/archive/651935b26a48ac68b2de032d874526f2d0896848.zip\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"下载完整示例（2KB 压缩包）\"}]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"you-can-reuse-components\",\"children\":\"复用你的组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可能需要在同一 HTML 页面中的多个位置展示 React 组件。如果页面中由 React 驱动的部分相互独立，那复用就显得非常必要。你可以通过在你的 HTML 中放置多个根标签，然后用 \",[\"$r\",\"code\",null,{\"children\":\"ReactDOM.createRoot()\"}],\" 在每个根标签中渲染 React 组件来实现这一点。例如：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"index.html\"}]}],\" 中，添加另外一个的容器元素 \",[\"$r\",\"code\",null,{\"children\":\"<div id=\\\"another-root\\\"></div>\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like-button.js\"}]}],\" 文件最后，再添加以下三行代码：\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,7,8,9}\",\"children\":\"const anotherRootNode = document.getElementById('another-root');\\nconst anotherRoot = ReactDOM.createRoot(anotherRootNode);\\nanotherRoot.render(React.createElement(LikeButton));\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你需要在很多地方渲染同一个组件，你可以为每个根的指定一个 \",[\"$r\",\"code\",null,{\"children\":\"class\"}],\"，而不是 \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\"，然后再把它们找出来。这是 \",[\"$r\",\"a\",null,{\"href\":\"https://gist.github.com/gaearon/779b12e05ffd5f51ffadd50b7ded5bc8\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"一个显示三个 “Like” 按钮，并向每个按钮内传递了数据的示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-5-minify-javascript-for-production\",\"children\":\"步骤 5：为生产环境压缩 JavaScript 代码 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"未经压缩的 JavaScript 可能会极大降低用户的访问速度。在将你的网站部署到生产环境之前，请务必对你的脚本文件进行压缩。\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"如果你不知道如何进行压缩\"}],\"，\",[\"$r\",\"a\",null,{\"href\":\"https://gist.github.com/gaearon/ee0201910608f15df3f8cd66aa83f98e\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"请参考该配置教程\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果你已完成了 \",[\"$r\",\"strong\",null,{\"children\":\"对应用代码的压缩\"}],\"，并且确保已部署的 HTML 加载的是以 \",[\"$r\",\"code\",null,{\"children\":\"production.min.js\"}],\" 结尾的 React 版本，那么你的网站就已完成生产部署（production-ready）：\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"children\":\"<script src=\\\"https://unpkg.com/react@18/umd/react.production.min.js\\\" crossorigin></script>\\n<script src=\\\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\\\" crossorigin></script>\\n\"}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"try-react-with-jsx\",\"children\":\"尝试使用 JSX 编写 React \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在上面的示例中，依靠的是浏览器原生就支持的特性。这也就是为什么我们在 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like_button.js\"}]}],\" 中要调用 JavaScript 的函数，用以告知 React 要显示的内容：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"return React.createElement('button', {onClick: () => setLiked(true)}, 'Like');\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然而，React 还提供了一种使用 \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"JSX\"}],\" 编写界面的方式，一种类似 HTML 的 JavaScript 语法：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"return <button onClick={() => setLiked(true)}>Like</button>;\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这两段代码是等价的。JSX 是一种在 JavaScript 中描述标签的语法。多数人觉得这样编写 UI 代码更方便 —— 无论是使用 React 还是其它库。\"}],\"\\n\",[\"$r\",\"blockquote\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以通过 \",[\"$r\",\"a\",null,{\"href\":\"https://babeljs.io/en/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=DwIwrgLhD2B2AEcDCAbAlgYwNYF4DeAFAJTw4B88EAFmgM4B0tAphAMoQCGETBe86WJgBMAXJQBOYJvAC-RGWQBQ8FfAAyaQYuAB6cFDhkgA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.17\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"在线转换器\"}],\" 试用 JSX。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"try-jsx\",\"children\":\"试用 JSX \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"试用 JSX 的最快方法是将 Babel 编译器作为 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签引入页面中。把它放置在 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like-button.js\"}]}],\" 之前，然后在 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like-button.js\"}]}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"script\"}],\" 标签上添加 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"text/babel\\\"\"}],\" 属性：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"{3,4}\",\"children\":\"  <script src=\\\"https://unpkg.com/react@18/umd/react.production.min.js\\\" crossorigin></script>\\n  <script src=\\\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\\\" crossorigin></script>\\n  <script src=\\\"https://unpkg.com/@babel/standalone/babel.min.js\\\"></script>\\n  <script src=\\\"like-button.js\\\" type=\\\"text/babel\\\"></script>\\n</body>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你可以编辑 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like-button.js\"}]}],\"，并将\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"return React.createElement(\\n  'button',\\n  {\\n    onClick: () => setLiked(true),\\n  },\\n  'Like'\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"替换为等效的 JSX 代码：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"return (\\n  <button onClick={() => setLiked(true)}>\\n    Like\\n  </button>\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一开始，你可能会觉得将 JS 和标签混合在一起会有些奇怪，但后面你会慢慢爱上它的！欲了解更多，请参阅 \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"用 JSX 编写标签\"}],\" 的介绍。这是 \",[\"$r\",\"a\",null,{\"href\":\"https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"一个使用了 JSX 的 HTML 文件示例\"}],\"，你可以下载并尝试使用。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"引入 Babel 的 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 编译器对于学习和创建简单的示例是很便捷的。但是，\",[\"$r\",\"strong\",null,{\"children\":\"它会使网站变慢，并不适用于生产环境\"}],\"。当你准备好更进一步时，应该删除 Babel 的 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签，并移除在这一步中添加的 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"text/babel\\\"\"}],\" 属性。作为替代方案，在下一小节中，我们将设置一个 JSX 的预处理器，将所有的 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签从 JSX 转为 JS。\"]}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"add-jsx-to-a-project\",\"children\":\"将 JSX 添加到项目 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"将 JSX 添加到项目中并不需要诸如 \",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project#custom-toolchains\",\"children\":\"打包工具\"}],\" 或开发服务器那样复杂的工具。本质上，添加 JSX 就像添加 CSS 预处理器一样。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在终端上进入你的项目文件夹，然后执行如下两个命令：(\",[\"$r\",\"strong\",null,{\"children\":[\"确保你的计算机安装了 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js\"}],\"！\"]}],\")：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"npm init -y\"}],\" (如果失败，请参阅, \",[\"$r\",\"a\",null,{\"href\":\"https://gist.github.com/gaearon/246f6380610e262f8a648e3e51cad40d\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"修复方案\"}],\")\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"npm install @babel/cli@7 babel-preset-react-app@10\"}]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"此处使用 npm 只是用于安装 JSX 预处理器，之后便不再需要它。React 和应用程序代码都可以继续使用 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签而不做任何更改。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"恭喜！你为你的项目成功添加了 \",[\"$r\",\"strong\",null,{\"children\":\"生产环境（production-ready）的 JSX 配置\"}],\"。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"run-the-jsx-preprocessor\",\"children\":\"运行 JSX 预处理器 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以对 JSX 文件进行预处理。当你编辑保存带有 JSX 的源文件时，这个转换过程将自动重新执行，并把 JSX 文件转换为一个全新的，浏览器可以识别的普通 JavaScript 文件，以下是设置方式：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"创建一个名为 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"src\"}]}],\" 的文件夹\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在终端执行这个命令：\",[\"$r\",\"code\",null,{\"children\":\"npx babel --watch src --out-dir . --presets babel-preset-react-app/prod \"}],\" （无需等待运行结果 —— 这个命令会自动启动一个观察器，观察对 \",[\"$r\",\"code\",null,{\"children\":\"src\"}],\" 内 JSX 的编辑。）\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"将已经 JSX 化的 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like-button.js\"}]}],\" (\",[\"$r\",\"a\",null,{\"href\":\"https://gist.githubusercontent.com/gaearon/be5ae0fbf563d6c5fe5c1563907b13d2/raw/4c0d0b8c7f4fcb341720424c28c72059f8174c62/like-button.js\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"它看起来应该像这样\"}],\")！文件移动到新的 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"src\"}]}],\" 目录下。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"监听器会创建一个预处理过的 \",[\"$r\",\"strong\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"like_button.js\"}]}],\" 文件，它包含了适用于浏览器的普通 JavaScript 代码.\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"如果你看到一个错误消息显示为：“You have mistakenly installed the \",[\"$r\",\"code\",null,{\"children\":\"babel\"}],\" package”，原因可能是未按照 \",[\"$r\",\"a\",null,{\"href\":\"#add-jsx-to-a-project\",\"children\":\"上一步骤\"}],\" 进行操作。在同一个文件夹中执行上一步骤中的命令，然后重试。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"我们刚才使用的工具叫 Babel，你可以从 \",[\"$r\",\"a\",null,{\"href\":\"https://babeljs.io/docs/en/babel-cli/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"它的文档\"}],\" 中了解更多。除了 JSX 以外，它还可以让你使用最新的 JavaScript 语法特性，而无需担心不适配旧的浏览器。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你认为你已经习惯了构建工具，并希望它们能为你做更多事，\",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project\",\"children\":\"我们在这描述了一些最流行和易上手的工具链\"}],\"。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"react-without-jsx\",\"children\":\"React without JSX \"}],[\"$r\",\"p\",null,{\"children\":\"最初引入 JSX 是为了想让 React 编写组件的感觉就像编写 HTML 一样简单，但总有例外，你不想或者不能使用 JSX，此时可以参考其他两种解决方案：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用像 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/developit/htm\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"htm\"}],\" 这样的 JSX 替代品，它使用 JavaScript 的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"模板字符串\"}],\" 来取代编译器。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":[\"$r\",\"code\",null,{\"children\":\"React.createElement()\"}]}],\" ，它具有下面解释的特殊结构\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"用 JSX 编写的代码：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"function Hello(props) {\\n  return <div>Hello {props.toWhat}</div>;\\n}\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(<Hello toWhat=\\\"World\\\" />, );\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"如果使用 \",[\"$r\",\"code\",null,{\"children\":\"React.createElement()\"}],\"，将会是这样：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Hello(props) {\\n  return React.createElement('div', null, 'Hello ', props.toWhat);\\n}\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  React.createElement(Hello, { toWhat: 'World' }, null)\\n);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"React.createElement(component, props, ...children)\"}],\"，它接受三个参数。\"]}],[\"$r\",\"p\",null,{\"children\":\"以下是它的工作原理：\"}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"一个\",[\"$r\",\"strong\",null,{\"children\":\"组件\"}],\"，它既可以是一个表示 HTML 标签名的字符串，也可以是一个函数组件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"一个对象，包含 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component\",\"children\":[\"你想传递给组件的 \",[\"$r\",\"strong\",null,{\"children\":\"props\"}]]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"其余的参数代表该组件可能拥有多个子元素，比如文本字符串或其他元素。\"}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"如果你不想每次都键入 \",[\"$r\",\"code\",null,{\"children\":\"React.createElement\"}],\"，通常的做法是使用简写：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const e = React.createElement;\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(e('div', null, 'Hello World'));\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"然后，如果你喜欢这种风格，如此编写也可以和 JSX 一样方便。\"}]]}]]}]]","meta":{"title":"在网站中添加 React","translators":["Atrist","yyyang1996","QC-L"]}},"__N_SSG":true}