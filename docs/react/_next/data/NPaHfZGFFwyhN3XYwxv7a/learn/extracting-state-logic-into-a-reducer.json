{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#consolidate-state-logic-with-a-reducer\",\"depth\":2,\"text\":\"使用 reducer 整合状态逻辑 \"},{\"url\":\"#step-1-move-from-setting-state-to-dispatching-actions\",\"depth\":3,\"text\":\"第 1 步: 将设置状态的逻辑修改成 dispatch 的一个 action \"},{\"url\":\"#step-2-write-a-reducer-function\",\"depth\":3,\"text\":\"第 2 步: 编写一个 reducer 函数 \"},{\"url\":\"#step-3-use-the-reducer-from-your-component\",\"depth\":3,\"text\":\"第 3 步: 在组件中使用 reducer \"},{\"url\":\"#comparing-usestate-and-usereducer\",\"depth\":2,\"text\":[\"对比 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" \"]},{\"url\":\"#writing-reducers-well\",\"depth\":2,\"text\":\"编写一个好的 reducers \"},{\"url\":\"#writing-concise-reducers-with-immer\",\"depth\":2,\"text\":\"使用 Immer 简化 reducers \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"8\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新逻辑整合到一个外部函数中，这个函数叫作 \",[\"$r\",\"strong\",null,{\"children\":\"reducer\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"什么是 reducer 函数\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如何将 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 重构成 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"什么时候使用 reducer\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何编写一个好的 reducer\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"consolidate-state-logic-with-a-reducer\",\"children\":\"使用 reducer 整合状态逻辑 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"随着组件复杂度的增加，你将很难一眼看清所有的组件状态更新逻辑。例如，下面的 \",[\"$r\",\"code\",null,{\"children\":\"TaskApp\"}],\" 组件有一个数组类型的状态 \",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\"，并通过三个不同的事件处理程序来实现任务的添加、删除和修改：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, setTasks] = useState(initialTasks);\\n\\n  function handleAddTask(text) {\\n    setTasks([\\n      ...tasks,\\n      {\\n        id: nextId++,\\n        text: text,\\n        done: false,\\n      },\\n    ]);\\n  }\\n\\n  function handleChangeTask(task) {\\n    setTasks(\\n      tasks.map((t) => {\\n        if (t.id === task.id) {\\n          return task;\\n        } else {\\n          return t;\\n        }\\n      })\\n    );\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    setTasks(tasks.filter((t) => t.id !== taskId));\\n  }\\n\\n  return (\\n    <>\\n      <h1>布拉格的行程安排</h1>\\n      <AddTask onAddTask={handleAddTask} />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  {id: 0, text: '参观卡夫卡博物馆', done: true},\\n  {id: 1, text: '看木偶戏', done: false},\\n  {id: 2, text: '打卡列侬墙', done: false},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({onAddTask}) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"添加任务\\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n      />\\n      <button\\n        onClick={() => {\\n          setText('');\\n          onAddTask(text);\\n        }}>\\n        添加\\n      </button>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\\n  return (\\n    <ul>\\n      {tasks.map((task) => (\\n        <li key={task.id}>\\n          <Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({task, onChange, onDelete}) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={(e) => {\\n            onChange({\\n              ...task,\\n              text: e.target.value,\\n            });\\n          }}\\n        />\\n        <button onClick={() => setIsEditing(false)}>保存</button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>编辑</button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={(e) => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked,\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>删除</button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button {\\n  margin: 5px;\\n}\\nli {\\n  list-style-type: none;\\n}\\nul,\\nli {\\n  margin: 0;\\n  padding: 0;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"86\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个组件的每个事件处理程序都通过 \",[\"$r\",\"code\",null,{\"children\":\"setTasks\"}],\" 来更新状态。随着这个组件的不断迭代，其状态逻辑也会越来越多。为了降低这种复杂度，并让所有逻辑都可以存放在一个易于理解的地方，你可以将这些状态逻辑移到组件之外的一个称为 \",[\"$r\",\"strong\",null,{\"children\":\"reducer\"}],\" 的函数中。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Reducer 是处理状态的另一种方式。你可以通过三个步骤将 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 迁移到 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\"：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"将设置状态的逻辑 \",[\"$r\",\"strong\",null,{\"children\":\"修改\"}],\" 成 dispatch 的一个 action；\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"编写\"}],\" 一个 reducer 函数；\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在你的组件中 \",[\"$r\",\"strong\",null,{\"children\":\"使用\"}],\" reducer。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-1-move-from-setting-state-to-dispatching-actions\",\"children\":\"第 1 步: 将设置状态的逻辑修改成 dispatch 的一个 action \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你的事件处理程序目前是通过设置状态来 \",[\"$r\",\"strong\",null,{\"children\":\"实现逻辑的\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleAddTask(text) {\\n  setTasks([\\n    ...tasks,\\n    {\\n      id: nextId++,\\n      text: text,\\n      done: false,\\n    },\\n  ]);\\n}\\n\\nfunction handleChangeTask(task) {\\n  setTasks(\\n    tasks.map((t) => {\\n      if (t.id === task.id) {\\n        return task;\\n      } else {\\n        return t;\\n      }\\n    })\\n  );\\n}\\n\\nfunction handleDeleteTask(taskId) {\\n  setTasks(tasks.filter((t) => t.id !== taskId));\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"移除所有的状态设置逻辑。只留下三个事件处理函数：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"handleAddTask(text)\"}],\" 在用户点击 “添加” 时被调用。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"handleChangeTask(task)\"}],\" 在用户切换任务或点击 “保存” 时被调用。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"handleDeleteTask(taskId)\"}],\" 在用户点击 “删除” 时被调用。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 reducers 管理状态与直接设置状态略有不同。它不是通过设置状态来告诉 React “要做什么”，而是通过事件处理程序 dispatch 一个 “action” 来指明 “用户刚刚做了什么”。（而状态更新逻辑则保存在其他地方！）因此，我们不再通过事件处理器直接 “设置 \",[\"$r\",\"code\",null,{\"children\":\"task\"}],\"”，而是 dispatch 一个 “添加/修改/删除任务” 的 action。这更加符合用户的思维。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleAddTask(text) {\\n  dispatch({\\n    type: 'added',\\n    id: nextId++,\\n    text: text,\\n  });\\n}\\n\\nfunction handleChangeTask(task) {\\n  dispatch({\\n    type: 'changed',\\n    task: task,\\n  });\\n}\\n\\nfunction handleDeleteTask(taskId) {\\n  dispatch({\\n    type: 'deleted',\\n    id: taskId,\\n  });\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你传递给 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 的对象叫做 “action”：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-7}\",\"children\":\"function handleDeleteTask(taskId) {\\n  dispatch(\\n    // \\\"action\\\" 对象：\\n    {\\n      type: 'deleted',\\n      id: taskId,\\n    }\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"它是一个普通的 JavaScript 对象。它的结构是由你决定的，但通常来说，它应该至少包含可以表明 \",[\"$r\",\"strong\",null,{\"children\":\"发生了什么事情\"}],\" 的信息。（在后面的步骤中，你将会学习如何添加一个 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 函数。）\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"action 对象可以有多种结构。\"}],[\"$r\",\"p\",null,{\"children\":[\"按照惯例，我们通常会添加一个字符串类型的 \",[\"$r\",\"code\",null,{\"children\":\"type\"}],\" 字段来描述发生了什么，并通过其它字段传递额外的信息。\",[\"$r\",\"code\",null,{\"children\":\"type\"}],\" 是特定于组件的，在这个例子中 \",[\"$r\",\"code\",null,{\"children\":\"added\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"addded_task\"}],\" 都可以。选一个能描述清楚发生的事件的名字！\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"dispatch({\\n  // 针对特定的组件\\n  type: 'what_happened',\\n  // 其它字段放这里\\n});\\n\"}]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-2-write-a-reducer-function\",\"children\":\"第 2 步: 编写一个 reducer 函数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"reducer 函数就是你放置状态逻辑的地方。它接受两个参数，分别为当前 state 和 action 对象，并且返回的是更新后的 state：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function yourReducer(state, action) {\\n  // 给 React 返回更新后的状态\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React 会将状态设置为你从 reducer 返回的状态。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在这个例子中，要将状态设置逻辑从事件处理程序移到 reducer 函数中，你需要：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"声明当前状态（\",[\"$r\",\"code\",null,{\"children\":\"tasks\"}],\"）作为第一个参数；\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"声明 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" 对象作为第二个参数；\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"从 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 返回 \",[\"$r\",\"strong\",null,{\"children\":\"下一个\"}],\" 状态（React 会将旧的状态设置为这个最新的状态）。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"下面是所有迁移到 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 函数的状态设置逻辑：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function tasksReducer(tasks, action) {\\n  if (action.type === 'added') {\\n    return [\\n      ...tasks,\\n      {\\n        id: action.id,\\n        text: action.text,\\n        done: false,\\n      },\\n    ];\\n  } else if (action.type === 'changed') {\\n    return tasks.map((t) => {\\n      if (t.id === action.task.id) {\\n        return action.task;\\n      } else {\\n        return t;\\n      }\\n    });\\n  } else if (action.type === 'deleted') {\\n    return tasks.filter((t) => t.id !== action.id);\\n  } else {\\n    throw Error('未知 action: ' + action.type);\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 函数接受 \",[\"$r\",\"code\",null,{\"children\":\"state\"}],\"（tasks）作为参数，因此你可以 \",[\"$r\",\"strong\",null,{\"children\":\"在组件之外声明它\"}],\"。这减少了代码的缩进级别，提升了代码的可读性。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"上面的代码使用了 \",[\"$r\",\"code\",null,{\"children\":\"if/else\"}],\" 语句，但是在 reducers 中使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/switch\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"switch 语句\"}],\" 是一种惯例。两种方式结果是相同的，但 \",[\"$r\",\"code\",null,{\"children\":\"switch\"}],\" 语句读起来一目了然。\"]}],[\"$r\",\"p\",null,{\"children\":\"在本文档的后续部分我们会像这样使用：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [\\n        ...tasks,\\n        {\\n          id: action.id,\\n          text: action.text,\\n          done: false,\\n        },\\n      ];\\n    }\\n    case 'changed': {\\n      return tasks.map((t) => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter((t) => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('未知 action: ' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"我们建议将每个 \",[\"$r\",\"code\",null,{\"children\":\"case\"}],\" 块包装到 \",[\"$r\",\"code\",null,{\"children\":\"{\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"}\"}],\" 花括号中，这样在不同 \",[\"$r\",\"code\",null,{\"children\":\"case\"}],\" 中声明的变量就不会互相冲突。此外，\",[\"$r\",\"code\",null,{\"children\":\"case\"}],\" 通常应该以 \",[\"$r\",\"code\",null,{\"children\":\"return\"}],\" 结尾。如果你忘了 \",[\"$r\",\"code\",null,{\"children\":\"return\"}],\"，代码就会 \",[\"$r\",\"code\",null,{\"children\":\"进入\"}],\" 到下一个 \",[\"$r\",\"code\",null,{\"children\":\"case\"}],\"，这就会导致错误！\"]}],[\"$r\",\"p\",null,{\"children\":[\"如果你还不熟悉 \",[\"$r\",\"code\",null,{\"children\":\"switch\"}],\" 语句，使用 \",[\"$r\",\"code\",null,{\"children\":\"if/else\"}],\" 也是可以的。\"]}]]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"why-are-reducers-called-this-way\",\"children\":\"为什么称之为 reducer? \"}],[\"$r\",\"p\",null,{\"children\":[\"尽管 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 可以 “减少” 组件内的代码量，但它实际上是以数组上的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"reduce()\"}]}],\" 方法命名的。\"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reduce()\"}],\" 允许你将数组中的多个值 “累加” 成一个值：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"const arr = [1, 2, 3, 4, 5];\\nconst sum = arr.reduce(\\n  (result, number) => result + number\\n); // 1 + 2 + 3 + 4 + 5\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"你传递给 \",[\"$r\",\"code\",null,{\"children\":\"reduce\"}],\" 的函数被称为 “reducer”。它接受 \",[\"$r\",\"code\",null,{\"children\":\"目前的结果\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"当前的值\"}],\"，然后返回 \",[\"$r\",\"code\",null,{\"children\":\"下一个结果\"}],\"。React 中的 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 和这个是一样的：它们都接受 \",[\"$r\",\"code\",null,{\"children\":\"目前的状态\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" ，然后返回 \",[\"$r\",\"code\",null,{\"children\":\"下一个状态\"}],\"。这样，action 会随着时间推移累积到状态中。\"]}],[\"$r\",\"p\",null,{\"children\":[\"你甚至可以使用 \",[\"$r\",\"code\",null,{\"children\":\"reduce()\"}],\" 方法以及 \",[\"$r\",\"code\",null,{\"children\":\"initialState\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"actions\"}],\" 数组，通过传递你的 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 函数来计算最终的状态：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import tasksReducer from './tasksReducer.js';\\n\\nlet initialState = [];\\nlet actions = [\\n  {type: 'added', id: 1, text: '参观卡夫卡博物馆'},\\n  {type: 'added', id: 2, text: '看木偶戏'},\\n  {type: 'deleted', id: 1},\\n  {type: 'added', id: 3, text: '打卡列侬墙'},\\n];\\n\\nlet finalState = actions.reduce(tasksReducer, initialState);\\n\\nconst output = document.getElementById('output');\\noutput.textContent = JSON.stringify(finalState, null, 2);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/tasksReducer.js\",\"children\":\"export default function tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [\\n        ...tasks,\\n        {\\n          id: action.id,\\n          text: action.text,\\n          done: false,\\n        },\\n      ];\\n    }\\n    case 'changed': {\\n      return tasks.map((t) => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter((t) => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('未知 action: ' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<pre id=\\\"output\\\"></pre>\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"你可能不需要自己做这些，但这与 React 所做的很相似！\"}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-3-use-the-reducer-from-your-component\",\"children\":\"第 3 步: 在组件中使用 reducer \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最后，你需要将 \",[\"$r\",\"code\",null,{\"children\":\"tasksReducer\"}],\" 导入到组件中。记得先从 React 中导入 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" Hook：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useReducer } from 'react';\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，你就可以替换掉之前的 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [tasks, setTasks] = useState(initialTasks);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"只需要像下面这样使用 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\":\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 很相似——你必须给它传递一个初始状态，它会返回一个有状态的值和一个设置该状态的函数（在这个例子中就是 dispatch 函数）。但是，它们两个之间还是有点差异的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 钩子接受 2 个参数：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一个 reducer 函数\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一个初始的 state\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"它返回如下内容：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一个有状态的值\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一个 dispatch 函数（用来 “派发” 用户操作给 reducer）\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在一切都准备就绪了！我们在这里把 reducer 定义在了组件的末尾：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task,\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId,\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <h1>布拉格的行程安排</h1>\\n      <AddTask onAddTask={handleAddTask} />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nfunction tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [\\n        ...tasks,\\n        {\\n          id: action.id,\\n          text: action.text,\\n          done: false,\\n        },\\n      ];\\n    }\\n    case 'changed': {\\n      return tasks.map((t) => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter((t) => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('未知 action: ' + action.type);\\n    }\\n  }\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  {id: 0, text: '参观卡夫卡博物馆', done: true},\\n  {id: 1, text: '看木偶戏', done: false},\\n  {id: 2, text: '打卡列侬墙', done: false}\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({onAddTask}) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"添加任务\\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n      />\\n      <button\\n        onClick={() => {\\n          setText('');\\n          onAddTask(text);\\n        }}>\\n        添加\\n      </button>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\\n  return (\\n    <ul>\\n      {tasks.map((task) => (\\n        <li key={task.id}>\\n          <Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({task, onChange, onDelete}) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={(e) => {\\n            onChange({\\n              ...task,\\n              text: e.target.value,\\n            });\\n          }}\\n        />\\n        <button onClick={() => setIsEditing(false)}>保存</button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>编辑</button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={(e) => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked,\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>删除</button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button {\\n  margin: 5px;\\n}\\nli {\\n  list-style-type: none;\\n}\\nul,\\nli {\\n  margin: 0;\\n  padding: 0;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"90\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果有需要，你甚至可以把 reducer 移到一个单独的文件中：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\nimport tasksReducer from './tasksReducer.js';\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task,\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId,\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <h1>布拉格的行程安排</h1>\\n      <AddTask onAddTask={handleAddTask} />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  {id: 0, text: '参观卡夫卡博物馆', done: true},\\n  {id: 1, text: '看木偶戏', done: false},\\n  {id: 2, text: '打卡列侬墙', done: false},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/tasksReducer.js\",\"children\":\"export default function tasksReducer(tasks, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      return [\\n        ...tasks,\\n        {\\n          id: action.id,\\n          text: action.text,\\n          done: false,\\n        },\\n      ];\\n    }\\n    case 'changed': {\\n      return tasks.map((t) => {\\n        if (t.id === action.task.id) {\\n          return action.task;\\n        } else {\\n          return t;\\n        }\\n      });\\n    }\\n    case 'deleted': {\\n      return tasks.filter((t) => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({onAddTask}) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"添加任务\\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n      />\\n      <button\\n        onClick={() => {\\n          setText('');\\n          onAddTask(text);\\n        }}>\\n        添加\\n      </button>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\\n  return (\\n    <ul>\\n      {tasks.map((task) => (\\n        <li key={task.id}>\\n          <Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({task, onChange, onDelete}) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={(e) => {\\n            onChange({\\n              ...task,\\n              text: e.target.value,\\n            });\\n          }}\\n        />\\n        <button onClick={() => setIsEditing(false)}>Save</button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>编辑</button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={(e) => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked,\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>删除</button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button {\\n  margin: 5px;\\n}\\nli {\\n  list-style-type: none;\\n}\\nul,\\nli {\\n  margin: 0;\\n  padding: 0;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"112\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当像这样分离关注点时，我们可以更容易地理解组件逻辑。现在，事件处理程序只通过派发 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" 来指定 \",[\"$r\",\"strong\",null,{\"children\":\"发生了什么\"}],\"，而 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 函数通过响应 \",[\"$r\",\"code\",null,{\"children\":\"actions\"}],\" 来决定 \",[\"$r\",\"strong\",null,{\"children\":\"状态如何更新\"}],\"。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"comparing-usestate-and-usereducer\",\"children\":[\"对比 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Reducers 并非没有缺点！以下是比较它们的几种方法：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"代码体积：\"}],\" 通常，在使用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 时，一开始只需要编写少量代码。而 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 必须提前编写 reducer 函数和需要调度的 actions。但是，当多个事件处理程序以相似的方式修改 state 时，\",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 可以减少代码量。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可读性：\"}],\" 当状态更新逻辑足够简单时，\",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 的可读性还行。但是，一旦逻辑变得复杂起来，它们会使组件变得臃肿且难以阅读。在这种情况下，\",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 允许你将状态更新逻辑与事件处理程序分离开来。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可调试性：\"}],\" 当使用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 出现问题时, 你很难发现具体原因以及为什么。 而使用 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 时， 你可以在 reducer 函数中通过打印日志的方式来观察每个状态的更新，以及为什么要更新（来自哪个 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\"）。 如果所有 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" 都没问题，你就知道问题出在了 reducer 本身的逻辑中。 然而，与使用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 相比，你必须单步执行更多的代码。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可测试性：\"}],\" reducer 是一个不依赖于组件的纯函数。这就意味着你可以单独对它进行测试。一般来说，我们最好是在真实环境中测试组件，但对于复杂的状态更新逻辑，针对特定的初始状态和 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\"，断言 reducer 返回的特定状态会很有帮助。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"个人偏好：\"}],\" 并不是所有人都喜欢用 reducer，没关系，这是个人偏好问题。你可以随时在 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 之间切换，它们能做的事情是一样的！\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你在修改某些组件状态时经常出现问题或者想给组件添加更多逻辑时，我们建议你还是使用 reducer。当然，你也不必整个项目都用 reducer，这是可以自由搭配的。你甚至可以在一个组件中同时使用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\"。\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"writing-reducers-well\",\"children\":\"编写一个好的 reducers \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"编写 \",[\"$r\",\"code\",null,{\"children\":\"reducers\"}],\" 时最好牢记以下两点：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"reducers 必须是纯粹的。\"}],\" 这一点和 \",[\"$r\",\"a\",null,{\"href\":\"/learn/queueing-a-series-of-state-updates\",\"children\":\"状态更新函数\"}],\" 是相似的，\",[\"$r\",\"code\",null,{\"children\":\"reducers\"}],\" 是在渲染时运行的！（actions 会排队直到下一次渲染)。 这就意味着 \",[\"$r\",\"code\",null,{\"children\":\"reducers\"}],\" \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"必须纯净\"}],\"，即当输入相同时，输出也是相同的。它们不应该包含异步请求、定时器或者任何副作用（对组件外部有影响的操作）。它们应该以不可变值的方式去更新 \",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state\",\"children\":\"对象\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-arrays-in-state\",\"children\":\"数组\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"每个 action 都描述了一个单一的用户交互，即使它会引发数据的多个变化。\"}],\" 举个例子，如果用户在一个由 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 管理的表单（包含五个表单项）中点击了 \",[\"$r\",\"code\",null,{\"children\":\"重置按钮\"}],\"，那么 dispatch 一个 \",[\"$r\",\"code\",null,{\"children\":\"reset_form\"}],\" 的 action 比 dispatch 五个单独的 \",[\"$r\",\"code\",null,{\"children\":\"set_field\"}],\" 的 action 更加合理。如果你在一个 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\" 中打印了所有的 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" 日志，那么这个日志应该是很清晰的，它能让你以某种步骤复现已发生的交互或响应。这对代码调试很有帮助！\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"writing-concise-reducers-with-immer\",\"children\":\"使用 Immer 简化 reducers \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"与在平常的 state 中 \",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state#write-concise-update-logic-with-immer\",\"children\":\"修改对象\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-arrays-in-state#write-concise-update-logic-with-immer\",\"children\":\"数组\"}],\" 一样，你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"Immer\"}],\" 这个库来简化 \",[\"$r\",\"code\",null,{\"children\":\"reducer\"}],\"。在这里，\",[\"$r\",\"a\",null,{\"href\":\"https://github.com/immerjs/use-immer#useimmerreducer\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useImmerReducer\"}]}],\" 让你可以通过 \",[\"$r\",\"code\",null,{\"children\":\"push\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"arr[i] =\"}],\" 来修改 state ：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useImmerReducer } from 'use-immer';\\nimport AddTask from './AddTask.js';\\nimport TaskList from './TaskList.js';\\n\\nfunction tasksReducer(draft, action) {\\n  switch (action.type) {\\n    case 'added': {\\n      draft.push({\\n        id: action.id,\\n        text: action.text,\\n        done: false,\\n      });\\n      break;\\n    }\\n    case 'changed': {\\n      const index = draft.findIndex((t) => t.id === action.task.id);\\n      draft[index] = action.task;\\n      break;\\n    }\\n    case 'deleted': {\\n      return draft.filter((t) => t.id !== action.id);\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\\nexport default function TaskApp() {\\n  const [tasks, dispatch] = useImmerReducer(tasksReducer, initialTasks);\\n\\n  function handleAddTask(text) {\\n    dispatch({\\n      type: 'added',\\n      id: nextId++,\\n      text: text,\\n    });\\n  }\\n\\n  function handleChangeTask(task) {\\n    dispatch({\\n      type: 'changed',\\n      task: task,\\n    });\\n  }\\n\\n  function handleDeleteTask(taskId) {\\n    dispatch({\\n      type: 'deleted',\\n      id: taskId,\\n    });\\n  }\\n\\n  return (\\n    <>\\n      <h1>布拉格的行程安排</h1>\\n      <AddTask onAddTask={handleAddTask} />\\n      <TaskList\\n        tasks={tasks}\\n        onChangeTask={handleChangeTask}\\n        onDeleteTask={handleDeleteTask}\\n      />\\n    </>\\n  );\\n}\\n\\nlet nextId = 3;\\nconst initialTasks = [\\n  {id: 0, text: '参观卡夫卡博物馆', done: true},\\n  {id: 1, text: '看木偶戏', done: false},\\n  {id: 2, text: '打卡列侬墙', done: false},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AddTask.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function AddTask({onAddTask}) {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input\\n        placeholder=\\\"添加任务\\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n      />\\n      <button\\n        onClick={() => {\\n          setText('');\\n          onAddTask(text);\\n        }}>\\n        添加\\n      </button>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TaskList.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function TaskList({tasks, onChangeTask, onDeleteTask}) {\\n  return (\\n    <ul>\\n      {tasks.map((task) => (\\n        <li key={task.id}>\\n          <Task task={task} onChange={onChangeTask} onDelete={onDeleteTask} />\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction Task({task, onChange, onDelete}) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  let taskContent;\\n  if (isEditing) {\\n    taskContent = (\\n      <>\\n        <input\\n          value={task.text}\\n          onChange={(e) => {\\n            onChange({\\n              ...task,\\n              text: e.target.value,\\n            });\\n          }}\\n        />\\n        <button onClick={() => setIsEditing(false)}>保存</button>\\n      </>\\n    );\\n  } else {\\n    taskContent = (\\n      <>\\n        {task.text}\\n        <button onClick={() => setIsEditing(true)}>编辑</button>\\n      </>\\n    );\\n  }\\n  return (\\n    <label>\\n      <input\\n        type=\\\"checkbox\\\"\\n        checked={task.done}\\n        onChange={(e) => {\\n          onChange({\\n            ...task,\\n            done: e.target.checked,\\n          });\\n        }}\\n      />\\n      {taskContent}\\n      <button onClick={() => onDelete(task.id)}>删除</button>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button {\\n  margin: 5px;\\n}\\nli {\\n  list-style-type: none;\\n}\\nul,\\nli {\\n  margin: 0;\\n  padding: 0;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"immer\\\": \\\"1.7.3\\\",\\n    \\\"react\\\": \\\"latest\\\",\\n    \\\"react-dom\\\": \\\"latest\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"use-immer\\\": \\\"0.5.1\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"118\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Reducers 应该是纯净的，所以它们不应该去修改 state。而 Immer 为你提供了一种特殊的 \",[\"$r\",\"code\",null,{\"children\":\"draft\"}],\" 对象，你可以通过它安全的修改 state。在底层，Immer 会基于当前 state 创建一个副本。这就是为什么通过 \",[\"$r\",\"code\",null,{\"children\":\"useImmerReducer\"}],\" 来管理 reducers 时，可以修改第一个参数，且不需要返回一个新的 state 的原因。\"]}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"把 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 转化为 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\"：\",\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"通过事件处理函数 dispatch actions；\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"编写一个 reducer 函数，它接受传入的 state 和一个 action，并返回一个新的 state；\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" 替换 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\"；\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Reducers 可能需要你写更多的代码，但是这有利于代码的调试和测试。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"Reducers 必须是纯净的。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"每个 action 都描述了一个单一的用户交互。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"使用 Immer 来帮助你在 reducer 里直接修改状态。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"dispatch-actions-from-event-handlers\",\"children\":\"通过事件处理函数 dispatch actions \"}],[\"$r\",\"p\",null,{\"children\":[\"目前，\",[\"$r\",\"code\",null,{\"children\":\"ContactList.js\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Chat.js\"}],\" 中的事件处理程序包含 \",[\"$r\",\"code\",null,{\"children\":\"// TODO\"}],\" 注释。这就是为什么输入不起作用，点击按钮也不会改变收件人的原因。\"]}],[\"$r\",\"p\",null,{\"children\":[\"将这两个 \",[\"$r\",\"code\",null,{\"children\":\"// TODO\"}],\" 替换为 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 相应的 action。如果要查看 action 的结构和类型，请查看 \",[\"$r\",\"code\",null,{\"children\":\"messengerReducer.js\"}],\" 中的 reducer。reducer 已经写好了，你不需要再修改它。你只需要在 \",[\"$r\",\"code\",null,{\"children\":\"ContactList.js\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Chat.js\"}],\" 中 dispatch 相应的 action 即可。\"]}],[\"$r\",\"Hint\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 函数在这两个组件中都是可用的，因为它已经以 prop 的形式传递进来了。因此你需要通过传入相应的 action 对象来调用 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 函数。\"]}],[\"$r\",\"p\",null,{\"children\":[\"要检查 action 的对象结构，你可以查看 reducer，看看它需要哪些字段。例如，reducer 中的 \",[\"$r\",\"code\",null,{\"children\":\"changed_selection\"}],\" 是这样的：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"case 'changed_selection': {\\n  return {\\n    ...state,\\n    selectedId: action.contactId\\n  };\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这表示你的 \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" 对象应该有一个 \",[\"$r\",\"code\",null,{\"children\":\"type: 'changed_selection'\"}],\"。同时你也可以看到代码中用到了 \",[\"$r\",\"code\",null,{\"children\":\"action.contactId\"}],\"，所以你需要传入一个 \",[\"$r\",\"code\",null,{\"children\":\"contactId\"}],\" 属性到你的 action 对象中。\"]}]]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.message;\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  message: '你好',\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n        message: '',\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        message: action.message,\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                // TODO: dispatch changed_selection\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          // TODO: 派发 edited_message\\n          // (从 e.target.value 获取输入框的值)\\n        }}\\n      />\\n      <br />\\n      <button>发送到 {contact.email}</button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"从 reducer 函数的代码中，你可以推断出 actions 需要像下面这样：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 当用户点击 \\\"Alice\\\"\\ndispatch({\\n  type: 'changed_selection',\\n  contactId: 1,\\n});\\n\\n// 当用户输入 \\\"你好！\\\"\\ndispatch({\\n  type: 'edited_message',\\n  message: '你好！',\\n});\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"下面是更新后的示例，可以实现派发相应的消息：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.message;\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  message: '你好',\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n        message: '',\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        message: action.message,\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button>发送到 {contact.email}</button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"clear-the-input-on-sending-a-message\",\"children\":\"发送消息时清空输入框 \"}],[\"$r\",\"p\",null,{\"children\":[\"目前，点击 \",[\"$r\",\"code\",null,{\"children\":\"发送\"}],\" 没有任何反应。我们需要给 \",[\"$r\",\"code\",null,{\"children\":\"发送\"}],\" 按钮添加一个事件处理程序，它将：\"]}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"显示一个包含收件人电子邮件和信息的 \",[\"$r\",\"code\",null,{\"children\":\"alert\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"清空输入框。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.message;\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  message: '你好',\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n        message: '',\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        message: action.message,\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button>发送到 {contact.email}</button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"在 “发送” 按钮的事件处理程序中，有很多方法可以用来清空输入框。一种方法是显示一个 alert，然后 dispatch 一个名为 \",[\"$r\",\"code\",null,{\"children\":\"edited_message\"}],\" 且带有空 \",[\"$r\",\"code\",null,{\"children\":\"message\"}],\" 的 action：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.message;\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  message: '你好',\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n        message: '',\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        message: action.message,\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button\\n        onClick={() => {\\n          alert(`正在发送 \\\"${message}\\\" 到 ${contact.email}`);\\n          dispatch({\\n            type: 'edited_message',\\n            message: '',\\n          });\\n        }}>\\n        发送到 {contact.email}\\n      </button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"这样当你点击 “发送” 按钮时就会清空输入框。\"}],[\"$r\",\"p\",null,{\"children\":[\"然而，从用户的角度来看，发送消息与编辑字段是不同的操作。为了体现这一点，你可以创建一个名为 \",[\"$r\",\"code\",null,{\"children\":\"sent_message\"}],\" 的新 \",[\"$r\",\"em\",null,{\"children\":\"action\"}],\"，并在 reducer 中单独处理：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.message;\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js active\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  message: '你好',\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n        message: '',\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        message: action.message,\\n      };\\n    }\\n    case 'sent_message': {\\n      return {\\n        ...state,\\n        message: '',\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button\\n        onClick={() => {\\n          alert(`正在发送 \\\"${message}\\\" 到 ${contact.email}`);\\n          dispatch({\\n            type: 'sent_message',\\n          });\\n        }}>\\n        发送到 {contact.email}\\n      </button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"结果虽然是一样的。但请记住，action 的类型应该准确描述 “用户做了什么”，而不是 “你希望状态如何改变”。这使得以后添加更多特性变的容易。\"}],[\"$r\",\"p\",null,{\"children\":[\"不管是哪一种解决方案，最重要的是你 \",[\"$r\",\"strong\",null,{\"children\":\"不要\"}],\" 把 \",[\"$r\",\"code\",null,{\"children\":\"alert\"}],\" 放置在 reducer 中。reducer 必须是一个纯函数——它应该只计算下一个状态。而不应该 “做” 其它事情，包括向用户显示消息。这应该在事件处理程序中处理。（为了便于捕获这样的错误，React 会在严格模式下多次调用你的 reducer。这就是为什么当你在 reducer 中加入一个 alert，它会触发两次的原因。）\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"restore-input-values-when-switching-between-tabs\",\"children\":\"切换 tab 时重置输入框内容 \"}],[\"$r\",\"p\",null,{\"children\":\"在这个示例中，切换收件人时总是会清空输入框。\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"case 'changed_selection': {\\n  return {\\n    ...state,\\n    selectedId: action.contactId,\\n    message: '' // 清空输入框\\n  };\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"这是因为你不希望在多个收件人之间共享单个邮件草稿。但如果你的应用程序能单独 “记住” 每个联系人的草稿，并在你切换联系人时恢复，那就更好了。\"}],[\"$r\",\"p\",null,{\"children\":[\"你的任务是改变状态的组织形式，以便能记住 \",[\"$r\",\"strong\",null,{\"children\":\"每个联系人\"}],\" 的消息草稿。你需要对 reducer、初始状态和组件进行一些修改。\"]}],[\"$r\",\"Hint\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"你可以像下面这样组织 state：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  messages: {\\n    0: 'Hello, Taylor', // contactId = 0 的草稿\\n    1: 'Hello, Alice', // contactId = 1 的草稿\\n  }\\n};\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这种 \",[\"$r\",\"code\",null,{\"children\":\"[key]: value\"}],\" \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#computed_property_names\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"计算属性\"}],\" 可以帮你更新 \",[\"$r\",\"code\",null,{\"children\":\"messages\"}],\" 对象：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"{\\n  ...state.messages,\\n  [id]: message\\n}\\n\"}]}]]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.message;\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  message: '你好',\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n        message: '',\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        message: action.message,\\n      };\\n    }\\n    case 'sent_message': {\\n      return {\\n        ...state,\\n        message: '',\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button\\n        onClick={() => {\\n          alert(`正在发送 \\\"${message}\\\" 到 ${contact.email}`);\\n          dispatch({\\n            type: 'sent_message',\\n          });\\n        }}>\\n        发送到 {contact.email}\\n      </button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"你将需要更新 reducer 来为每个联系人分别存储并更新一个消息草稿：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 当输入框内容被修改时\\ncase 'edited_message': {\\n  return {\\n    // 保存其它的 state，比如当前选中的\\n    ...state,\\n    messages: {\\n      // 保存其他联系人的消息\\n      ...state.messages,\\n      // 改变当前联系人的消息\\n      [state.selectedId]: action.message\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"你还需要更新 \",[\"$r\",\"code\",null,{\"children\":\"Messenger\"}],\" 组件来从当前选中的联系人读取信息：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const message = state.messages[state.selectedId];\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"Here is the complete solution:\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from 'react';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.messages[state.selectedId];\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  messages: {\\n    0: 'Hello, Taylor',\\n    1: 'Hello, Alice',\\n    2: 'Hello, Bob',\\n  },\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        messages: {\\n          ...state.messages,\\n          [state.selectedId]: action.message,\\n        },\\n      };\\n    }\\n    case 'sent_message': {\\n      return {\\n        ...state,\\n        messages: {\\n          ...state.messages,\\n          [state.selectedId]: '',\\n        },\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button\\n        onClick={() => {\\n          alert(`正在发送 \\\"${message}\\\" 到 ${contact.email}`);\\n          dispatch({\\n            type: 'sent_message',\\n          });\\n        }}>\\n        发送到 {contact.email}\\n      </button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"显然，你不再需要通过修改任何事件处理程序来实现不同的行为。但如果没使用 reducer 的话，你不得不在每个事件处理程序中去更新状态。\"}]]}],[\"$r\",\"h4\",null,{\"id\":\"implement-usereducer-from-scratch\",\"children\":[\"从零开始实现 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" \"]}],[\"$r\",\"p\",null,{\"children\":[\"在前面的例子中，你从 React 中导入了 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" Hook。现在，你将学习自己实现 \",[\"$r\",\"code\",null,{\"children\":\"useReducer\"}],\" Hook。你可以从这个模板开始，它不会超过 10 行代码。\"]}],[\"$r\",\"p\",null,{\"children\":\"为了验证你的修改，试着在输入框中输入文字或选择联系人。\"}],[\"$r\",\"Hint\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"下面是一个更加详细的基本实现：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export function useReducer(reducer, initialState) {\\n  const [state, setState] = useState(initialState);\\n\\n  function dispatch(action) {\\n    // ???\\n  }\\n\\n  return [state, dispatch];\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"回想一下，reducer 函数接受两个参数——当前的 state 和 action 对象——并返回下一个 state。你的 \",[\"$r\",\"code\",null,{\"children\":\"dispatch\"}],\" 应该用它做什么？\"]}]]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from './MyReact.js';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.messages[state.selectedId];\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  messages: {\\n    0: 'Hello, Taylor',\\n    1: 'Hello, Alice',\\n    2: 'Hello, Bob',\\n  },\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        messages: {\\n          ...state.messages,\\n          [state.selectedId]: action.message,\\n        },\\n      };\\n    }\\n    case 'sent_message': {\\n      return {\\n        ...state,\\n        messages: {\\n          ...state.messages,\\n          [state.selectedId]: '',\\n        },\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyReact.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport function useReducer(reducer, initialState) {\\n  const [state, setState] = useState(initialState);\\n\\n  // ???\\n\\n  return [state, dispatch];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js hidden\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button\\n        onClick={() => {\\n          alert(`正在发送 \\\"${message}\\\" 到 ${contact.email}`);\\n          dispatch({\\n            type: 'sent_message',\\n          });\\n        }}>\\n        发送到 {contact.email}\\n      </button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"dispatch 一个 action 去调用一个具有当前 state 和 action 的 reducer，并将结果存储为下一个 state。下面是它在代码中的样子：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useReducer } from './MyReact.js';\\nimport Chat from './Chat.js';\\nimport ContactList from './ContactList.js';\\nimport { initialState, messengerReducer } from './messengerReducer';\\n\\nexport default function Messenger() {\\n  const [state, dispatch] = useReducer(messengerReducer, initialState);\\n  const message = state.messages[state.selectedId];\\n  const contact = contacts.find((c) => c.id === state.selectedId);\\n  return (\\n    <div>\\n      <ContactList\\n        contacts={contacts}\\n        selectedId={state.selectedId}\\n        dispatch={dispatch}\\n      />\\n      <Chat\\n        key={contact.id}\\n        message={message}\\n        contact={contact}\\n        dispatch={dispatch}\\n      />\\n    </div>\\n  );\\n}\\n\\nconst contacts = [\\n  {id: 0, name: 'Taylor', email: 'taylor@mail.com'},\\n  {id: 1, name: 'Alice', email: 'alice@mail.com'},\\n  {id: 2, name: 'Bob', email: 'bob@mail.com'},\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/messengerReducer.js\",\"children\":\"export const initialState = {\\n  selectedId: 0,\\n  messages: {\\n    0: 'Hello, Taylor',\\n    1: 'Hello, Alice',\\n    2: 'Hello, Bob',\\n  },\\n};\\n\\nexport function messengerReducer(state, action) {\\n  switch (action.type) {\\n    case 'changed_selection': {\\n      return {\\n        ...state,\\n        selectedId: action.contactId,\\n      };\\n    }\\n    case 'edited_message': {\\n      return {\\n        ...state,\\n        messages: {\\n          ...state.messages,\\n          [state.selectedId]: action.message,\\n        },\\n      };\\n    }\\n    case 'sent_message': {\\n      return {\\n        ...state,\\n        messages: {\\n          ...state.messages,\\n          [state.selectedId]: '',\\n        },\\n      };\\n    }\\n    default: {\\n      throw Error('未知 action：' + action.type);\\n    }\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyReact.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport function useReducer(reducer, initialState) {\\n  const [state, setState] = useState(initialState);\\n\\n  function dispatch(action) {\\n    const nextState = reducer(state, action);\\n    setState(nextState);\\n  }\\n\\n  return [state, dispatch];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ContactList.js hidden\",\"children\":\"export default function ContactList({contacts, selectedId, dispatch}) {\\n  return (\\n    <section className=\\\"contact-list\\\">\\n      <ul>\\n        {contacts.map((contact) => (\\n          <li key={contact.id}>\\n            <button\\n              onClick={() => {\\n                dispatch({\\n                  type: 'changed_selection',\\n                  contactId: contact.id,\\n                });\\n              }}>\\n              {selectedId === contact.id ? <b>{contact.name}</b> : contact.name}\\n            </button>\\n          </li>\\n        ))}\\n      </ul>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Chat.js hidden\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Chat({contact, message, dispatch}) {\\n  return (\\n    <section className=\\\"chat\\\">\\n      <textarea\\n        value={message}\\n        placeholder={'和 ' + contact.name + ' 聊天'}\\n        onChange={(e) => {\\n          dispatch({\\n            type: 'edited_message',\\n            message: e.target.value,\\n          });\\n        }}\\n      />\\n      <br />\\n      <button\\n        onClick={() => {\\n          alert(`正在发送 \\\"${message}\\\" 到 ${contact.email}`);\\n          dispatch({\\n            type: 'sent_message',\\n          });\\n        }}>\\n        发送到 {contact.email}\\n      </button>\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".chat,\\n.contact-list {\\n  float: left;\\n  margin-bottom: 20px;\\n}\\nul,\\nli {\\n  list-style: none;\\n  margin: 0;\\n  padding: 0;\\n}\\nli button {\\n  width: 100px;\\n  padding: 10px;\\n  margin-right: 10px;\\n}\\ntextarea {\\n  height: 150px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"虽然在大多数情况下这并不重要，但更准确的实现是这样的：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function dispatch(action) {\\n  setState((s) => reducer(s, action));\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这是因为被派发的 actions 在下一次渲染之前都是处于排队状态的，这和 \",[\"$r\",\"a\",null,{\"href\":\"/learn/queueing-a-series-of-state-updates\",\"children\":\"状态更新函数\"}],\" 类似。\"]}]]}]]}]]","meta":{"title":"迁移状态逻辑至 Reducer 中","translators":["qinhua","yyyang1996","QC-L"]}},"__N_SSG":true}