{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#what-are-you-building\",\"depth\":3,\"text\":\"实现的是什么程序？ \"},{\"url\":\"#setup-for-the-tutorial\",\"depth\":2,\"text\":\"配置 \"},{\"url\":\"#overview\",\"depth\":2,\"text\":\"概览 \"},{\"url\":\"#inspecting-the-starter-code\",\"depth\":3,\"text\":\"看一下刚刚的代码 \"},{\"url\":\"#building-the-board\",\"depth\":3,\"text\":\"构建棋盘 \"},{\"url\":\"#passing-data-through-propss\",\"depth\":3,\"text\":\"通过 props 传递数据 \"},{\"url\":\"#making-an-interactive-component\",\"depth\":3,\"text\":\"创建一个具有交互性的组件 \"},{\"url\":\"#react-developer-tools\",\"depth\":3,\"text\":\"React 开发者工具 \"},{\"url\":\"#completing-the-game\",\"depth\":2,\"text\":\"完成这个游戏 \"},{\"url\":\"#lifting-state-up\",\"depth\":3,\"text\":\"状态提升 \"},{\"url\":\"#why-immutability-is-important\",\"depth\":3,\"text\":\"为什么不变性很重要 \"},{\"url\":\"#taking-turns\",\"depth\":3,\"text\":\"交替落子 \"},{\"url\":\"#declaring-a-winner\",\"depth\":3,\"text\":\"宣布获胜者 \"},{\"url\":\"#adding-time-travel\",\"depth\":2,\"text\":\"添加时间旅行 \"},{\"url\":\"#storing-a-history-of-moves\",\"depth\":3,\"text\":\"存储落子历史 \"},{\"url\":\"#lifting-state-up-again\",\"depth\":3,\"text\":\"再一次“状态提升” \"},{\"url\":\"#showing-the-past-moves\",\"depth\":3,\"text\":\"显示过去的落子 \"},{\"url\":\"#picking-a-key\",\"depth\":3,\"text\":\"选择 key \"},{\"url\":\"#implementing-time-travel\",\"depth\":3,\"text\":\"实现时间旅行 \"},{\"url\":\"#final-cleanup\",\"depth\":3,\"text\":\"最后清理 \"},{\"url\":\"#wrapping-up\",\"depth\":3,\"text\":\"收尾 \"}]","content":"[[\"$r\",\"MaxWidth\",\"14\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"本教程将引导你逐步实现一个简单的井字棋游戏，并且不需要你对 React 有任何了解。在此过程中你会学习到一些编写 React 程序的基本知识，完全理解它们可以让你对 React 有比较深入的理解。\"}]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"本教程专为喜欢 \",[\"$r\",\"strong\",null,{\"children\":\"理论与实战相结合\"}],\" 以及希望快速看见成果的人而设计。如果你喜欢逐步学习每个概念，请从 \",[\"$r\",\"a\",null,{\"href\":\"/learn/describing-the-ui\",\"children\":\"描述 UI\"}],\" 开始。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"教程分成以下几个部分：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#setup-for-the-tutorial\",\"children\":\"配置\"}],\" 是一些准备工作。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#overview\",\"children\":\"概览\"}],\" 介绍了 React 的 \",[\"$r\",\"strong\",null,{\"children\":\"基础知识\"}],\"：组件、props 和 state。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#completing-the-game\",\"children\":\"完成游戏\"}],\" 介绍了 React 开发中 \",[\"$r\",\"strong\",null,{\"children\":\"最常用的技术\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#adding-time-travel\",\"children\":\"添加“时间旅行”\"}],\" 可以让你更深入地了解 React 的独特优势。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"what-are-you-building\",\"children\":\"实现的是什么程序？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"本教程将使用 React 实现一个交互式的井字棋游戏。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以在下面预览最终成果：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nfunction Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    onPlay(nextSquares);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default function Game() {\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const [currentMove, setCurrentMove] = useState(0);\\n  const xIsNext = currentMove % 2 === 0;\\n  const currentSquares = history[currentMove];\\n\\n  function handlePlay(nextSquares) {\\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\\n    setHistory(nextHistory);\\n    setCurrentMove(nextHistory.length - 1);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    setCurrentMove(nextMove);\\n  }\\n\\n  const moves = history.map((squares, move) => {\\n    let description;\\n    if (move > 0) {\\n      description = 'Go to move #' + move;\\n    } else {\\n      description = 'Go to game start';\\n    }\\n    return (\\n      <li key={move}>\\n        <button onClick={() => jumpTo(move)}>{description}</button>\\n      </li>\\n    );\\n  });\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{moves}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"26\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你还不是很明白上面的代码，不用担心！本教程的目的就是帮你理解 React 及其语法。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们建议你在继续本教程之前，先看看上面的井字棋游戏。我们会注意到的一项功能是，棋盘右侧有一个编号列表，它记录了游戏中落子的历史，并随着游戏的进行而更新。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"体验完游戏以后，继续阅读本教程吧！我们将从一个更简单的模板开始。下一步将介绍相关配置，以便于你着手实现这个游戏。\"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"setup-for-the-tutorial\",\"children\":\"配置 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在下面的实时代码编辑器中，单击右上角的 \",[\"$r\",\"strong\",null,{\"children\":\"Fork\"}],\" 来在新选项卡中打开 CodeSandbox 编辑器。CodeSandbox 让你能够在浏览器中编写代码并预览效果。一切顺利的话，你应该会看见一个空方块和本教程的初始代码。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"export default function Square() {\\n  return <button className=\\\"square\\\">X</button>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"120\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"如果你想要使用本地开发环境来学习这个教程，需要按照下面的流程进行：\"}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"安装 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/zh-cn/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在之前打开的 CodeSandbox 选项卡中，按左上角的按钮打开菜单，然后选择 \",[\"$r\",\"strong\",null,{\"children\":\"Download Sandbox\"}],\"，将代码压缩包下载到本地。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"将压缩包解压，打开终端并使用 \",[\"$r\",\"code\",null,{\"children\":\"cd\"}],\" 命令切换到你解压后的目录。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"npm install\"}],\" 安装依赖。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"运行 \",[\"$r\",\"code\",null,{\"children\":\"npm start\"}],\" 启动本地服务器，按照提示在浏览器中查看运行效果。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"如果你遇到了困难，不要花费时间去找解决方案。请改为在线进行操作，稍后再尝试本地配置。\"}]]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"overview\",\"children\":\"概览 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"完成配置以后，我们先来大致了解一下 React 吧！\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"inspecting-the-starter-code\",\"children\":\"看一下刚刚的代码 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在 CodeSandbox 中，你将看到三个主要的部分：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/react-starter-code-codesandbox.png\",\"alt\":\"CodeSandbox 的初始代码\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"em\",null,{\"children\":\"Files\"}],\" 部分列出了一些文件：\",[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"index.js\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"styles.css\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"public\"}],\" 文件夹。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"em\",null,{\"children\":\"code editor\"}],\" 部分可以看到你所选中文件的源码。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"em\",null,{\"children\":\"browser\"}],\" 部分可以预览代码的实时结果。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 文件里面的内容应该是这样的：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"export default function Square() {\\n  return <button className=\\\"square\\\">X</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"em\",null,{\"children\":\"browser\"}],\" 部分应该会像下面这样在方块里面显示一个 X：\"]}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/x-filled-square.png\",\"alt\":\"里面是“X”的方块\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在，让我们仔细研究一下这些文件吧。\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"appjs\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 的代码创建了一个 \",[\"$r\",\"strong\",null,{\"children\":\"组件\"}],\"。在 React 中，组件是一段可重用代码，它通常作为 UI 界面的一部分。组件用于渲染、管理和更新应用中的 UI 元素。让我们逐行查看这段代码，看看发生了什么：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"export default function Square() {\\n  return <button className=\\\"square\\\">X</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"第一行定义了一个名为 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 的函数。JavaScript 的 \",[\"$r\",\"code\",null,{\"children\":\"export\"}],\" 关键字使此函数可以在此文件之外访问。\",[\"$r\",\"code\",null,{\"children\":\"default\"}],\" 关键字表明它是文件中的主要函数。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"export default function Square() {\\n  return <button className=\\\"square\\\">X</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"第二行返回一个按钮。JavaScript 的 \",[\"$r\",\"code\",null,{\"children\":\"return\"}],\" 关键字意味着后面的内容都作为值返回给函数的调用者。\",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 是一个 JSX 元素。JSX 元素是 JavaScript 代码和 HTML 标签的组合，用于描述要显示的内容。\",[\"$r\",\"code\",null,{\"children\":\"className=\\\"square\\\"\"}],\" 是一个 button 属性，它决定 CSS 如何设置按钮的样式。\",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 是按钮内显示的文本，\",[\"$r\",\"code\",null,{\"children\":\"</button>\"}],\" 闭合 JSX 元素以表示不应将任何后续内容放置在按钮内。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"stylescss\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"styles.css\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"单击 CodeSandbox 中的 \",[\"$r\",\"code\",null,{\"children\":\"styles.css\"}],\" 文件。该文件定义了 React 应用的样式。前两个 \",[\"$r\",\"strong\",null,{\"children\":\"CSS 选择器\"}],\"（\",[\"$r\",\"code\",null,{\"children\":\"*\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"body\"}],\"）定义了应用大部分的样式，而 \",[\"$r\",\"code\",null,{\"children\":\".square\"}],\" 选择器定义了 \",[\"$r\",\"code\",null,{\"children\":\"className\"}],\" 属性设置为 \",[\"$r\",\"code\",null,{\"children\":\"square\"}],\" 的组件的样式。这与 \",[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 文件中的 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件中的按钮是相匹配的。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"indexjs\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"index.js\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"单击 CodeSandbox 中的 \",[\"$r\",\"code\",null,{\"children\":\"index.js\"}],\" 的文件。在本教程中我们不会编辑此文件，但它是 \",[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 文件中创建的组件与 Web 浏览器之间的桥梁。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"import { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"第 1-5 行将所有必要的部分组合在一起：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React 与 Web 浏览器对话的库（React DOM）\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"组件的样式\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 里面创建的组件\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"其他文件将它们组合在一起，并将最终成果注入 \",[\"$r\",\"code\",null,{\"children\":\"public\"}],\" 文件夹里面的 \",[\"$r\",\"code\",null,{\"children\":\"index.html\"}],\" 中。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"building-the-board\",\"children\":\"构建棋盘 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"让我们回到 \",[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\"。接下来我们将专注于这个文件。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"目前棋盘只有一个方块，但你需要九个！如果你只是想着复制粘贴来制作两个像这样的方块：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"export default function Square() {\\n  return <button className=\\\"square\\\">X</button><button className=\\\"square\\\">X</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你将会得到如下错误：\"}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":[\"/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX Fragment \",[\"$r\",\"code\",null,{\"children\":\"<>...</>\"}],\"?\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 组件必须返回单个 JSX 元素，不能像两个按钮那样返回多个相邻的 JSX 元素。要解决此问题，可以使用 Fragment（\",[\"$r\",\"code\",null,{\"children\":\"<>\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"</>\"}],\"）包裹多个相邻的 JSX 元素，如下所示：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-6}\",\"children\":\"export default function Square() {\\n  return (\\n    <>\\n      <button className=\\\"square\\\">X</button>\\n      <button className=\\\"square\\\">X</button>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在你应该可以看见：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/two-x-filled-squares.png\",\"alt\":\"两个“X”方块\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"非常棒！现在你只需要通过复制粘贴来添加九个方块，然后……\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/nine-x-filled-squares.png\",\"alt\":\"9 个在同一行的方块\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但事与愿违的是这些方块并没有排列成网格，而是都在一条线上。要解决此问题，需要使用 \",[\"$r\",\"code\",null,{\"children\":\"div\"}],\" 将方块分到每一行中并添加一些 CSS 样式。当你这样做的时候，需要给每个方块一个数字，以确保你知道每个方块的位置。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 文件中，\",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件看起来像这样：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-19}\",\"children\":\"export default function Square() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">1</button>\\n        <button className=\\\"square\\\">2</button>\\n        <button className=\\\"square\\\">3</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">4</button>\\n        <button className=\\\"square\\\">5</button>\\n        <button className=\\\"square\\\">6</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">7</button>\\n        <button className=\\\"square\\\">8</button>\\n        <button className=\\\"square\\\">9</button>\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"借助 \",[\"$r\",\"code\",null,{\"children\":\"styles.css\"}],\" 中定义的 \",[\"$r\",\"code\",null,{\"children\":\"board-row\"}],\" 样式，我们将组件分到每一行的 \",[\"$r\",\"code\",null,{\"children\":\"div\"}],\" 中。最终完成了井字棋棋盘：\"]}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/number-filled-board.png\",\"alt\":\"有着数字 1 到 9 的井字棋棋盘\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是现在有个问题，名为 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 的组件实际上不再是方块了。让我们通过将名称更改为 Board 来解决这个问题：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"export default function Board() {\\n  //...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"此时你的代码应如下所示：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Board() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">1</button>\\n        <button className=\\\"square\\\">2</button>\\n        <button className=\\\"square\\\">3</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">4</button>\\n        <button className=\\\"square\\\">5</button>\\n        <button className=\\\"square\\\">6</button>\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <button className=\\\"square\\\">7</button>\\n        <button className=\\\"square\\\">8</button>\\n        <button className=\\\"square\\\">9</button>\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"176\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"嘶……要改的内容也太多了！从该页面复制和粘贴代码是很好的办法。不过如果你愿意挑战一下自己，可以只复制手动输入过的代码。\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-data-through-propss\",\"children\":\"通过 props 传递数据 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"接下来，当用户单击方块时，我们要将方块的值从空更改为“X”。根据目前构建的棋盘，你需要复制并粘贴九次更新方块的代码（每个方块都需要一次）！但是，React 的组件架构可以创建可重用的组件，以避免混乱、重复的代码。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"首先，要将定义第一个方块（\",[\"$r\",\"code\",null,{\"children\":\"<button className=\\\"square\\\">1</button>\"}],\"）的这行代码从 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件复制到新的 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-3}\",\"children\":\"function Square() {\\n  return <button className=\\\"square\\\">1</button>;\\n}\\n\\nexport default function Board() {\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然后，更新 Board 组件并使用 JSX 语法渲染 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-19}\",\"children\":\"// ...\\nexport default function Board() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"需要注意的是，这并不像 \",[\"$r\",\"code\",null,{\"children\":\"div\"}],\"，这些你自己的组件如 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\"，必须以大写字母开头。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"让我们来看一看效果：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/board-filled-with-ones.png\",\"alt\":\"都是 1 的方块\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"哦不！你失去了你以前有正确编号的方块。现在每个方块都写着“1”。要解决此问题，需要使用 \",[\"$r\",\"em\",null,{\"children\":\"props\"}],\" 将每个方块应有的值从父组件（\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\"）传递到其子组件（\",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\"）。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"更新 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件，读取从 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 传递的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"function Square({ value }) {\\n  return <button className=\\\"square\\\">1</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"function Square({ value })\"}],\" 表示可以向 Square 组件传递一个名为 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 的 props。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你如果想要显示对应的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"，可以试一下像下面这样：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"function Square({ value }) {\\n  return <button className=\\\"square\\\">value</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"糟糕！这还不是你想要的：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/board-filled-with-value.png\",\"alt\":\"都是“value”的棋盘\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"我们需要从组件中渲染名为 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 的 JavaScript 变量，而不是“value”这个词。要从 JSX“转义到 JavaScript”，你需要使用大括号。在 JSX 中的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 周围添加大括号，如下所示：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"function Square({ value }) {\\n  return <button className=\\\"square\\\">{value}</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在，你应该会看到一个空的棋盘了：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/empty-board.png\",\"alt\":\"空棋盘\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这是因为 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件还没有将 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props 传递给它渲染的每个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件。要修复这个问题，需要向 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件里面的每个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件添加 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-7,10-12,15-17}\",\"children\":\"export default function Board() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value=\\\"1\\\" />\\n        <Square value=\\\"2\\\" />\\n        <Square value=\\\"3\\\" />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value=\\\"4\\\" />\\n        <Square value=\\\"5\\\" />\\n        <Square value=\\\"6\\\" />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value=\\\"7\\\" />\\n        <Square value=\\\"8\\\" />\\n        <Square value=\\\"9\\\" />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在你应该能再次看到数字网格：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/number-filled-board.png\",\"alt\":\"有着数字 1 到 9 的井字棋棋盘\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"更新后的代码应该是这样：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"function Square({ value }) {\\n  return <button className=\\\"square\\\">{value}</button>;\\n}\\n\\nexport default function Board() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value=\\\"1\\\" />\\n        <Square value=\\\"2\\\" />\\n        <Square value=\\\"3\\\" />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value=\\\"4\\\" />\\n        <Square value=\\\"5\\\" />\\n        <Square value=\\\"6\\\" />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value=\\\"7\\\" />\\n        <Square value=\\\"8\\\" />\\n        <Square value=\\\"9\\\" />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"214\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"making-an-interactive-component\",\"children\":\"创建一个具有交互性的组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你单击它的时候，\",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件需要显示“X”。在 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 内部声明一个名为 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 的函数。然后，将 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 添加到由 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 返回的 JSX 元素的 button 的 props 中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-4,9}\",\"children\":\"function Square({ value }) {\\n  function handleClick() {\\n    console.log('clicked!');\\n  }\\n\\n  return (\\n    <button\\n      className=\\\"square\\\"\\n      onClick={handleClick}\\n    >\\n      {value}\\n    </button>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果现在单击一个方块，你应该会看到一条日志，上面写着 \",[\"$r\",\"code\",null,{\"children\":\"\\\"clicked!\\\"\"}],\"。在 CodeSandbox 中 \",[\"$r\",\"em\",null,{\"children\":\"Browser\"}],\" 部分底部的 \",[\"$r\",\"em\",null,{\"children\":\"Console\"}],\" 选项卡中。多次单击方块将再次记录 \",[\"$r\",\"code\",null,{\"children\":\"\\\"clicked!\\\"\"}],\"。具有相同消息的重复控制台日志不会在控制台中重复创建。而你会在第一次 \",[\"$r\",\"code\",null,{\"children\":\"\\\"clicked!\\\"\"}],\" 旁边看到一个递增的计数器。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"如果使用本地开发环境学习本教程，则需要打开浏览器的控制台。例如，如果使用 Chrome 浏览器，则可以使用键盘快捷键 \",[\"$r\",\"strong\",null,{\"children\":\"Shift + Ctrl + J\"}],\"（在 Windows/Linux 上）或 \",[\"$r\",\"strong\",null,{\"children\":\"Option + ⌘ + J\"}],\"（在 macOS 上）查看控制台。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"下一步，我们希望 Square 组件能够“记住”它被单击过，并用“X”填充它。为了“记住”一些东西，组件使用 \",[\"$r\",\"em\",null,{\"children\":\"state\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 提供了一个名为 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 的特殊函数，可以从组件中调用它来让它“记住”一些东西。让我们将 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 的当前值存储在 state 中，并在单击 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 时更改它。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在文件的顶部导入 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\"。从 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件中移除 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props。在调用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 的开头添加一个新行。让它返回一个名为 value 的 state 变量：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,3,4}\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square() {\\n  const [value, setValue] = useState(null);\\n\\n  function handleClick() {\\n    //...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 存储值，而 \",[\"$r\",\"code\",null,{\"children\":\"setValue\"}],\" 是可用于更改值的函数。传递给 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 用作这个 state 变量的初始值，因此此处 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 的值开始时等于 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件不再接受 props，我们从 Board 组件创建的所有九个 Square 组件中删除 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6-8,11-13,16-18}\",\"children\":\"// ...\\nexport default function Board() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在将更改 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 以在单击时显示“X”。不再使用 \",[\"$r\",\"code\",null,{\"children\":\"console.log(\\\"clicked!\\\");\"}],\" 而使用 \",[\"$r\",\"code\",null,{\"children\":\"setValue('X');\"}],\" 的事件处理程序。现在你的 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件看起来像这样：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5}\",\"children\":\"function Square() {\\n  const [value, setValue] = useState(null);\\n\\n  function handleClick() {\\n    setValue('X');\\n  }\\n\\n  return (\\n    <button\\n      className=\\\"square\\\"\\n      onClick={handleClick}\\n    >\\n      {value}\\n    </button>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过从 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理程序调用此 \",[\"$r\",\"code\",null,{\"children\":\"set\"}],\" 函数，你告诉 \",[\"$r\",\"code\",null,{\"children\":\"React\"}],\" 在单击其 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 时要重新渲染该 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\"。更新后，方块的值将为“X”，因此会在棋盘上看到“X”。点击任意方块，“X”应该出现：\"]}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/tictac-adding-x-s.gif\",\"alt\":\"向棋盘上添加“X”\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"每个 Square 都有自己的 state：存储在每个 Square 中的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 完全独立于其他的 Square。当你在组件中调用 set 函数时，React 也会自动更新内部的子组件。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"完成上述更改后，代码将如下所示：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square() {\\n  const [value, setValue] = useState(null);\\n\\n  function handleClick() {\\n    setValue('X');\\n  }\\n\\n  return (\\n    <button\\n      className=\\\"square\\\"\\n      onClick={handleClick}\\n    >\\n      {value}\\n    </button>\\n  );\\n}\\n\\nexport default function Board() {\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square />\\n        <Square />\\n        <Square />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"264\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"react-developer-tools\",\"children\":\"React 开发者工具 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 开发者工具可以检查 React 组件的 props 和 state。可以在 CodeSandbox 的 \",[\"$r\",\"em\",null,{\"children\":\"Browser\"}],\" 部分底部找到 React DevTools 选项卡：\"]}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/codesandbox-devtools.png\",\"alt\":\"CodeSandbox 中的 React 开发者工具\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"要检查屏幕上的特定组件，请使用 React 开发者工具左上角的按钮：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/devtools-select.gif\",\"alt\":\"用 React 开发者工具选中组件\"}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"对于本地开发，React 开发工具可作为 \",[\"$r\",\"a\",null,{\"href\":\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Chrome\"}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://addons.mozilla.org/zh-CN/firefox/addon/react-devtools/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Firefox\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://microsoftedge.microsoft.com/addons/detail/react-developer-tools/gpphkfbcpidddadnkolkpfckpihlkkil\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Edge\"}],\" 的浏览器扩展来使用。安装它，\",[\"$r\",\"em\",null,{\"children\":\"Component\"}],\" 选项卡将出现在你的浏览器开发者工具中，将被用于使用 React 的站点。\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"completing-the-game\",\"children\":\"完成这个游戏 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"至此，你已经拥有井字棋游戏的所有基本构建块。要玩完整的游戏，你现在需要在棋盘上交替放置“X”和“O”，并且你需要一种确定获胜者的方法。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"lifting-state-up\",\"children\":\"状态提升 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"目前，每个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件都维护着游戏 state 的一部分。要检查井字棋游戏中的赢家，\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 需要以某种方式知道 9 个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件中每个组件的 state。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你会如何处理？起初，你可能会猜测 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 需要向每个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\"“询问”\",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 的 state。尽管这种方法在 React 中在技术上是可行的，但我们不鼓励这样做，因为代码变得难以理解、容易出现错误并且难以重构。相反，最好的方法是将游戏的 state 存储在 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 父组件中，而不是每个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 中。\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件可以通过传递一个 props 来告诉每个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 显示什么，就像你将数字传递给每个 Square 时所做的那样。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":\"要从多个子组件收集数据，或让两个子组件相互通信，请改为在其父组件中声明共享 state。父组件可以通过 props 将该 state 传回给子组件。这使子组件彼此同步并与其父组件保持同步。\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"重构 React 组件时，将状态提升到父组件中很常见。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"让我们借此机会尝试一下。编辑 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件，使其声明一个名为 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 的 state 变量，该变量默认为对应于 9 个方块的 9 个空值数组：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3}\",\"children\":\"// ...\\nexport default function Board() {\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n  return (\\n    // ...\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Array(9).fill(null)\"}],\" 创建了一个包含九个元素的数组，并将它们中的每一个都设置为 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。包裹它的 \",[\"$r\",\"code\",null,{\"children\":\"useState()\"}],\" 声明了一个初始设置为该数组的 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" state 变量。数组中的每个元素对应于一个 square 的值。当你稍后填写棋盘时，\",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组将如下所示：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"['O', null, 'X', 'X', 'X', 'O', 'O', null, null]\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你的 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件需要将 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props 向下传递给它渲染的每个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6-8,11-13,16-18}\",\"children\":\"export default function Board() {\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} />\\n        <Square value={squares[1]} />\\n        <Square value={squares[2]} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} />\\n        <Square value={squares[4]} />\\n        <Square value={squares[5]} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} />\\n        <Square value={squares[7]} />\\n        <Square value={squares[8]} />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，你将编辑 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件，以从 Board 组件接收 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props。这将需要删除 Square 组件自己的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" state 和按钮的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" props：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,2}\",\"children\":\"function Square({value}) {\\n  return <button className=\\\"square\\\">{value}</button>;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"此时你应该看到一个空的井字棋棋盘：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/empty-board.png\",\"alt\":\"空的井字棋棋盘\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你的代码应该是这样的：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value }) {\\n  return <button className=\\\"square\\\">{value}</button>;\\n}\\n\\nexport default function Board() {\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} />\\n        <Square value={squares[1]} />\\n        <Square value={squares[2]} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} />\\n        <Square value={squares[4]} />\\n        <Square value={squares[5]} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} />\\n        <Square value={squares[7]} />\\n        <Square value={squares[8]} />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"328\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，每个 Square 都会收到一个 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props，对于空方块，该 props 将是 \",[\"$r\",\"code\",null,{\"children\":\"'X'\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"'O'\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，你需要更改单击 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 时发生的情况。\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件现在维护已经填充过的方块。你需要为 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 创建一种更新 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" state 的方法。由于 state 对于定义它的组件是私有的，因此你不能直接从 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 更新 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 的 state。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你将从 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件向下传递一个函数到 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件，然后让 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 在单击方块时调用该函数。我们将从单击 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件时将调用的函数开始。调用该函数 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3}\",\"children\":\"function Square({ value }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，将 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\" 函数添加到 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件的 props 中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"function Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，你将把 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\" props 连接到 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件中的一个函数，命名为 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\"。要将 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\" 连接到 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\"，需要将一个函数传递给第一个 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\" props：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7}\",\"children\":\"export default function Board() {\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={handleClick} />\\n        //...\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最后，你将在 Board 组件内定义 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数来更新并保存棋盘 state 的 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-8}\",\"children\":\"export default function Board() {\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  function handleClick() {\\n    const nextSquares = squares.slice();\\n    nextSquares[0] = \\\"X\\\";\\n    setSquares(nextSquares);\\n  }\\n\\n  return (\\n    // ...\\n  )\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数使用 JavaScript 数组的 \",[\"$r\",\"code\",null,{\"children\":\"slice()\"}],\" 方法创建 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组（\",[\"$r\",\"code\",null,{\"children\":\"nextSquares\"}],\"）的副本。然后，\",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 更新 \",[\"$r\",\"code\",null,{\"children\":\"nextSquares\"}],\" 数组，将 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 添加到第一个（\",[\"$r\",\"code\",null,{\"children\":\"[0]\"}],\" 索引）方块。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"setSquares\"}],\" 函数让 React 知道组件的 state 已经改变。这将触发使用 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" state 的组件（\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\"）及其子组件（构成棋盘的 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件）的重新渲染。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"JavaScript 支持闭包，这意味着内部函数（例如 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\"）可以访问外部函数（例如 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\"）中定义的变量和函数。\",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数可以读取 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" state 并调用 \",[\"$r\",\"code\",null,{\"children\":\"setSquares\"}],\" 方法，因为它们都是在 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 函数内部定义的。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你可以将 X 添加到棋盘上……但只能添加到左上角的方块。你的 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数被硬编码为更新左上角方块（ \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"）的索引。让我们更新 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 以便能够更新任何方块。将参数 \",[\"$r\",\"code\",null,{\"children\":\"i\"}],\" 添加到 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数，该函数采用要更新的 square 索引：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,6}\",\"children\":\"export default function Board() {\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  function handleClick(i) {\\n    const nextSquares = squares.slice();\\n    nextSquares[i] = \\\"X\\\";\\n    setSquares(nextSquares);\\n  }\\n\\n  return (\\n    // ...\\n  )\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，你需要将 \",[\"$r\",\"code\",null,{\"children\":\"i\"}],\" 传递给 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\"。你可以尝试像这样在 JSX 中直接将 square 的 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\" props 设置为 \",[\"$r\",\"code\",null,{\"children\":\"handleClick(0)\"}],\"，但这是行不通的：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"<Square value={squares[0]} onSquareClick={handleClick(0)} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为什么会是这样呢？\",[\"$r\",\"code\",null,{\"children\":\"handleClick(0)\"}],\" 调用将成为渲染 Board 组件的一部分。因为 \",[\"$r\",\"code\",null,{\"children\":\"handleClick(0)\"}],\" 通过调用 \",[\"$r\",\"code\",null,{\"children\":\"setSquares\"}],\" 改变了棋盘组件的 state，所以你的整个棋盘组件将再次重新渲染。但这再次运行了 \",[\"$r\",\"code\",null,{\"children\":\"handleClick(0)\"}],\"，导致无限循环：\"]}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":\"Too many re-renders. React limits the number of renders to prevent an infinite loop.\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为什么这个问题没有早点发生？\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你传递 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick={handleClick}\"}],\" 时，你将 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数作为 props 向下传递。你不是在调用它！但是现在你立即调用了该函数——注意 \",[\"$r\",\"code\",null,{\"children\":\"handleClick(0)\"}],\" 中的括号——这就是它运行得太早的原因。你不想在用户点击之前调用 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\"！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以通过创建调用 \",[\"$r\",\"code\",null,{\"children\":\"handleClick(0)\"}],\" 的函数（如 \",[\"$r\",\"code\",null,{\"children\":\"handleFirstSquareClick\"}],\"）、调用 \",[\"$r\",\"code\",null,{\"children\":\"handleClick(1)\"}],\" 的函数（如 \",[\"$r\",\"code\",null,{\"children\":\"handleSecondSquareClick\"}],\"）等来修复。你可以将这些函数作为 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick={handleFirstSquareClick}\"}],\" 之类的 props 传递（而不是调用）。这将解决无限循环的问题。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"但是，定义九个不同的函数并为每个函数命名过于冗余。让我们这样做：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6}\",\"children\":\"export default function Board() {\\n  // ...\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        // ...\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意新的 \",[\"$r\",\"code\",null,{\"children\":\"() =>\"}],\" 语法。这里，\",[\"$r\",\"code\",null,{\"children\":\"() => handleClick(0)\"}],\" 是一个箭头函数，它是定义函数的一种较短的方式。单击方块时，\",[\"$r\",\"code\",null,{\"children\":\"=>\"}],\"“箭头”之后的代码将运行，调用 \",[\"$r\",\"code\",null,{\"children\":\"handleClick(0)\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你需要更新其他八个方块以从你传递的箭头函数中调用 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\"。确保 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 的每次调用的参数对应于正确的 square 索引：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6-8,11-13,16-18}\",\"children\":\"export default function Board() {\\n  // ...\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n};\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在你可以再次通过单击将 X 添加到棋盘的方块上：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/tictac-adding-x-s.gif\",\"alt\":\"用 X 填充棋盘\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是这次所有的 state 管理都由 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件处理！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你的代码应该是这样的：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nexport default function Board() {\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  function handleClick(i) {\\n    const nextSquares = squares.slice();\\n    nextSquares[i] = 'X';\\n    setSquares(nextSquares);\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"384\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，我们在 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件中处理 state， \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 父组件将 props 传递给 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 子组件，以便它们可以正确显示。单击 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 时， \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 子组件现在要求 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 父组件更新棋盘的 state。当 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 的 state 改变时，\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件和每个子 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 都会自动重新渲染。保存 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件中所有方块的 state 将使得它可以确定未来的赢家。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"让我们回顾一下当用户单击你的棋盘左上角的方块以向其添加 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 时会发生什么：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"单击左上角的方块运行 \",[\"$r\",\"code\",null,{\"children\":\"button\"}],\" 从 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 接收到的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" props 的函数。\",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件从 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 通过 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\" props 接收到该函数。\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件直接在 JSX 中定义了该函数。它使用参数 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 调用 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 使用参数（\",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"）将 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组的第一个元素从 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 更新为 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" state 已更新，因此 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 及其所有子组件都将重新渲染。这会导致索引为 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" props 从 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 更改为 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最后，用户看到左上角的方块在单击后从空变为 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"DOM \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 元素的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" props 对 React 有特殊意义，因为它是一个内置组件。对于像 Square 这样的自定义组件，命名由你决定。你可以给 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"onSquareClick\"}],\" props 或 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数起任何名字，代码还是可以运行的。在 React 中，通常使用 \",[\"$r\",\"code\",null,{\"children\":\"onSomething\"}],\" 命名代表事件的 props，使用 \",[\"$r\",\"code\",null,{\"children\":\"handleSomething\"}],\" 命名处理这些事件的函数。\"]}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"why-immutability-is-important\",\"children\":\"为什么不变性很重要 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意在 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 中，你调用了 \",[\"$r\",\"code\",null,{\"children\":\".slice()\"}],\" 来创建 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组的副本而不是修改现有数组。为了解释原因，我们需要讨论不变性以及为什么学习不变性很重要。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常有两种更改数据的方法。第一种方法是通过直接更改数据的值来改变数据。第二种方法是使用具有所需变化的新副本替换数据。如果你改变 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组，它会是这样的：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"const squares = [null, null, null, null, null, null, null, null, null];\\nsquares[0] = 'X';\\n// Now `squares` is [\\\"X\\\", null, null, null, null, null, null, null, null];\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你在不改变 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组的情况下更改数据，它会是这样的：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"const squares = [null, null, null, null, null, null, null, null, null];\\nconst nextSquares = ['X', null, null, null, null, null, null, null, null];\\n// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"结果是一样的，但通过不直接改变（改变底层数据），你可以获得几个好处。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"不变性使复杂的功能更容易实现。在本教程的后面，你将实现一个“时间旅行”功能，让你回顾游戏的历史并“跳回”到过去的动作。此功能并非特定于游戏——撤消和重做某些操作的能力是应用程序的常见要求。避免数据直接突变可以让你保持以前版本的数据完好无损，并在以后重用它们。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"不变性还有另一个好处。默认情况下，当父组件的 state 发生变化时，所有子组件都会自动重新渲染。这甚至包括未受变化影响的子组件。尽管重新渲染本身不会引起用户注意（你不应该主动尝试避免它！），但出于性能原因，你可能希望跳过重新渲染显然不受其影响的树的一部分。不变性使得组件比较其数据是否已更改的成本非常低。你可以在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"memo\"}],\" API 参考\"]}],\" 中了解更多关于 React 如何选择何时重新渲染组件的信息。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"taking-turns\",\"children\":\"交替落子 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在是时候修复这个井字棋游戏的一个主要缺陷了：棋盘上无法标记“O”。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"默认情况下，你会将第一步设置为“X”。让我们通过向 Board 组件添加另一个 state 来跟踪这一点：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"function Board() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"每次玩家落子时，\",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\"（一个布尔值）将被翻转以确定下一个玩家，游戏 state 将被保存。你将更新 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数以翻转 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\" 的值：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7,8,9,10,11,13}\",\"children\":\"export default function Board() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  function handleClick(i) {\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = \\\"X\\\";\\n    } else {\\n      nextSquares[i] = \\\"O\\\";\\n    }\\n    setSquares(nextSquares);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  return (\\n    //...\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，当你点击不同的方块时，它们会在 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"O\"}],\" 之间交替，这是它们应该做的！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"但是等等，有一个问题。尝试多次点击同一个方块：\"}],\"\\n\",[\"$r\",\"img\",null,{\"src\":\"../images/tutorial/o-replaces-x.gif\",\"alt\":\"O 覆盖了 X\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 被 \",[\"$r\",\"code\",null,{\"children\":\"O\"}],\" 覆盖！虽然这会给游戏带来非常有趣的变化，但我们现在将坚持原来的规则。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你用 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"O\"}],\" 标记方块时，你没有检查该方块是否已经具有 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"O\"}],\" 值。你可以通过提早返回来解决此问题。我们将检查方块是否已经有 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"O\"}],\"。如果方块已经填满，你将尽早在 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数中 \",[\"$r\",\"code\",null,{\"children\":\"return\"}],\"——在它尝试更新棋盘 state 之前。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,3,4}\",\"children\":\"function handleClick(i) {\\n  if (squares[i]) {\\n    return;\\n  }\\n  const nextSquares = squares.slice();\\n  //...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你只能将 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"O\"}],\" 添加到空方块中！此时你的代码应该如下所示：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({value, onSquareClick}) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nexport default function Board() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  function handleClick(i) {\\n    if (squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    setSquares(nextSquares);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"404\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"declaring-a-winner\",\"children\":\"宣布获胜者 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你可以轮流对战了，接下来我们应该显示游戏何时获胜。为此，你将添加一个名为 \",[\"$r\",\"code\",null,{\"children\":\"calculateWinner\"}],\" 的辅助函数，它接受 9 个方块的数组，检查获胜者并根据需要返回 \",[\"$r\",\"code\",null,{\"children\":\"'X'\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"'O'\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。不要太担心 \",[\"$r\",\"code\",null,{\"children\":\"calculateWinner\"}],\" 函数；它不是 React 才会有的：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"export default function Board() {\\n  //...\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6]\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 之前还是之后定义 \",[\"$r\",\"code\",null,{\"children\":\"calculateWinner\"}],\" 并不重要。让我们把它放在最后，这样你就不必在每次编辑组件时都滚动过去。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你将在 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数中调用 \",[\"$r\",\"code\",null,{\"children\":\"calculateWinner(squares)\"}],\" 来检查玩家是否获胜。你可以在检查用户是否单击了已经具有 \",[\"$r\",\"code\",null,{\"children\":\"X\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"O\"}],\" 的方块的同时执行此检查。在这两种情况下，我们都希望尽早返回：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"function handleClick(i) {\\n  if (squares[i] || calculateWinner(squares)) {\\n    return;\\n  }\\n  const nextSquares = squares.slice();\\n  //...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了让玩家知道游戏何时结束，你可以显示“获胜者：X”或“获胜者：O”等文字。为此，你需要将 \",[\"$r\",\"code\",null,{\"children\":\"status\"}],\" 部分添加到 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件。如果游戏结束，将显示获胜者，如果游戏正在进行，你将显示下一轮将会是哪个玩家：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-9,13}\",\"children\":\"export default function Board() {\\n  // ...\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = \\\"Winner: \\\" + winner;\\n  } else {\\n    status = \\\"Next player: \\\" + (xIsNext ? \\\"X\\\" : \\\"O\\\");\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        // ...\\n  )\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"恭喜！你现在有一个可以运行的井字棋游戏。你也学习了 React 的基础知识。所以你是这里真正的赢家。代码应该如下所示：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({value, onSquareClick}) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nexport default function Board() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [squares, setSquares] = useState(Array(9).fill(null));\\n\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    setSquares(nextSquares);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"468\",{\"children\":[\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"adding-time-travel\",\"children\":\"添加时间旅行 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"作为最后的练习，让我们能够“回到”到游戏中之前的动作。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"storing-a-history-of-moves\",\"children\":\"存储落子历史 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你改变了 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组，实现时间旅行将非常困难。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是，你在每次落子后都使用 \",[\"$r\",\"code\",null,{\"children\":\"slice()\"}],\" 创建 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组的新副本，并将其视为不可变的。这将允许你存储 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组的每个过去的版本，并在已经发生的轮次之间“来回”。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"把过去的 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组存储在另一个名为 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 的数组中，把它存储为一个新的 state 变量。\",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 数组表示所有棋盘的 state，从第一步到最后一步，其形状如下：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"[\\n  // Before first move\\n  [null, null, null, null, null, null, null, null, null],\\n  // After first move\\n  [null, null, null, null, 'X', null, null, null, null],\\n  // After second move\\n  [null, null, null, null, 'X', null, null, null, 'O'],\\n  // ...\\n]\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"lifting-state-up-again\",\"children\":\"再一次“状态提升” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你现在将编写一个名为 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 的新顶级组件来显示过去的着法列表。这就是放置包含整个游戏历史的 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" state 的地方。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"将 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" state 放入 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件将使你可以从其 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 子组件中删除 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" state。就像你将 state 从 \",[\"$r\",\"code\",null,{\"children\":\"Square\"}],\" 组件“提升”到 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件一样，你现在将把它从 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 提升到顶层 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件。这使 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件可以完全控制 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 的数据，并使它让 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 渲染来自 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 的之前的回合。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"首先，添加一个带有 \",[\"$r\",\"code\",null,{\"children\":\"export default\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件。让它渲染 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件和一些标签：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,5-16}\",\"children\":\"function Board() {\\n  // ...\\n}\\n\\nexport default function Game() {\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{/*TODO*/}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，你要删除 \",[\"$r\",\"code\",null,{\"children\":\"function Board() {\"}],\" 声明之前的 \",[\"$r\",\"code\",null,{\"children\":\"export default\"}],\" 关键字，并将它们添加到 \",[\"$r\",\"code\",null,{\"children\":\"function Game() {\"}],\" 声明之前。这会告诉你的 \",[\"$r\",\"code\",null,{\"children\":\"index.js\"}],\" 文件使用 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件而不是你的 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件作为顶层组件。\",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件返回的额外 \",[\"$r\",\"code\",null,{\"children\":\"div\"}],\" 正在为你稍后添加到棋盘的游戏信息腾出空间。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"向 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件添加一些 state 以跟踪下一个玩家和落子历史：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"export default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，\",[\"$r\",\"code\",null,{\"children\":\"[Array(9).fill(null)]\"}],\" 是一个包含单个元素的数组，它本身是一个包含 9 个 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 的数组。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要渲染当前落子的方块，你需要从 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 中读取最后一个 squares 数组。你不需要 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\"——你已经有足够的信息可以在渲染过程中计算它：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"export default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const currentSquares = history[history.length - 1];\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，在 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件中创建一个 \",[\"$r\",\"code\",null,{\"children\":\"handlePlay\"}],\" 函数，\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件将调用该函数来更新游戏。将 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"currentSquares\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"handlePlay\"}],\" 作为 props 传递给 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6-8,13}\",\"children\":\"export default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const currentSquares = history[history.length - 1];\\n\\n  function handlePlay(nextSquares) {\\n    // TODO\\n  }\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n        //...\\n  )\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"让 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件完全由它接收到的 props 控制。更改 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件以采用三个 props：\",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\"和一个新的 \",[\"$r\",\"code\",null,{\"children\":\"onPlay\"}],\" 函数，当玩家落子时，\",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 可以使用更新的 square 数组调用该函数。接下来，删除调用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 函数的前两行：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"function Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    //...\\n  }\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，将 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件里面的 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 中的 \",[\"$r\",\"code\",null,{\"children\":\"setSquares\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"setXIsNext\"}],\" 调用替换为对新 \",[\"$r\",\"code\",null,{\"children\":\"onPlay\"}],\" 函数的一次调用，这样 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件就可以在用户单击方块时更新 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{12}\",\"children\":\"function Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = \\\"X\\\";\\n    } else {\\n      nextSquares[i] = \\\"O\\\";\\n    }\\n    onPlay(nextSquares);\\n  }\\n  //...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 组件完全由 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件传递给它的 props 控制。你需要在 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件中实现 \",[\"$r\",\"code\",null,{\"children\":\"handlePlay\"}],\" 函数才能使游戏重新运行。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"handlePlay\"}],\" 被调用应该做什么？请记住，Board 以前使用更新后的数组调用 \",[\"$r\",\"code\",null,{\"children\":\"setSquares\"}],\"；现在它将更新后的 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组传递给 \",[\"$r\",\"code\",null,{\"children\":\"onPlay\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"handlePlay\"}],\" 函数需要更新 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 的 state 以触发重新渲染，但是你没有可以再调用的 \",[\"$r\",\"code\",null,{\"children\":\"setSquares\"}],\" 函数——你现在正在使用 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" state 变量来存储这些信息。你需要追加更新后的 \",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 数组来更新 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 作为新的历史入口。你还需要切换 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\"，就像 Board 过去所做的那样：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-5}\",\"children\":\"export default function Game() {\\n  //...\\n  function handlePlay(nextSquares) {\\n    setHistory([...history, nextSquares]);\\n    setXIsNext(!xIsNext);\\n  }\\n  //...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这里，\",[\"$r\",\"code\",null,{\"children\":\"[...history, nextSquares]\"}],\" 创建了一个新数组，其中包含 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 中的所有元素，后跟 \",[\"$r\",\"code\",null,{\"children\":\"nextSquares\"}],\"。（你可以将 \",[\"$r\",\"code\",null,{\"children\":\"...history\"}],\" 展开语法理解为“枚举 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 中的所有元素”。）\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，如果 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 是 \",[\"$r\",\"code\",null,{\"children\":\"[[null,null,null], [\\\"X\\\",null,null]]\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"nextSquares\"}],\" 是 \",[\"$r\",\"code\",null,{\"children\":\"[\\\"X\\\",null,\\\"O\\\"]\"}],\"，那么新的 \",[\"$r\",\"code\",null,{\"children\":\"[...history, nextSquares]\"}],\" 数组就是 \",[\"$r\",\"code\",null,{\"children\":\"[[null,null,null], [\\\"X\\\",null,null], [\\\"X\\\",null,\\\"O\\\"]]\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"此时，你已将 state 移至 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件中，并且 UI 应该完全正常工作，就像重构之前一样。这是此时代码的样子：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nfunction Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    onPlay(nextSquares);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const currentSquares = history[history.length - 1];\\n\\n  function handlePlay(nextSquares) {\\n    setHistory([...history, nextSquares]);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{/*TODO*/}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"490\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"showing-the-past-moves\",\"children\":\"显示过去的落子 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"由于你正在记录井字棋游戏的历史，因此你现在可以向玩家显示过去的动作列表。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"像 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 这样的 React 元素是常规的 JavaScript 对象；你可以在你的应用程序中传递它们。要在 React 中渲染多个项目，你可以使用 React 元素数组。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你已经有一组 state 为 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 的数组，所以现在你需要将其转换为一组 React 元素。在 JavaScript 中，要将一个数组转换为另一个数组，可以使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"数组的 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 方法\"]}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"[1, 2, 3].map((x) => x * 2) // [2, 4, 6]\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你将使用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 将你的 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 动作转换为代表屏幕上按钮的 React 元素，并显示一个按钮列表以“跳转”到过去的动作。让我们在 Game 组件中用 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 代替 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{11-13,15-27,35}\",\"children\":\"export default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const currentSquares = history[history.length - 1];\\n\\n  function handlePlay(nextSquares) {\\n    setHistory([...history, nextSquares]);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    // TODO\\n  }\\n\\n  const moves = history.map((squares, move) => {\\n    let description;\\n    if (move > 0) {\\n      description = 'Go to move #' + move;\\n    } else {\\n      description = 'Go to game start';\\n    }\\n    return (\\n      <li>\\n        <button onClick={() => jumpTo(move)}>{description}</button>\\n      </li>\\n    );\\n  });\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{moves}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以在下面看到你的代码应该是什么样子。请注意，你应该会在开发者工具控制台中看到一条错误消息：\"}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"warning\",\"children\":[\"$r\",\"p\",null,{\"children\":\"Warning: Each child in an array or iterator should have a unique “key” prop. Check the render method of `Game`.\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你将在下一节中修复此错误。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nfunction Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    onPlay(nextSquares);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const currentSquares = history[history.length - 1];\\n\\n  function handlePlay(nextSquares) {\\n    setHistory([...history, nextSquares]);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    // TODO\\n  }\\n\\n  const moves = history.map((squares, move) => {\\n    let description;\\n    if (move > 0) {\\n      description = 'Go to move #' + move;\\n    } else {\\n      description = 'Go to game start';\\n    }\\n    return (\\n      <li>\\n        <button onClick={() => jumpTo(move)}>{description}</button>\\n      </li>\\n    );\\n  });\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{moves}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"534\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你在传递给 \",[\"$r\",\"code\",null,{\"children\":\"map\"}],\" 的函数中遍历 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 数组时，\",[\"$r\",\"code\",null,{\"children\":\"squares\"}],\" 参数遍历 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 的每个元素，\",[\"$r\",\"code\",null,{\"children\":\"move\"}],\" 参数遍历每个数组索引：\",[\"$r\",\"code\",null,{\"children\":\"0\"}],\" 、\",[\"$r\",\"code\",null,{\"children\":\"1\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"2\"}],\"……（在大多数情况下，你需要数组元素，但要渲染落子列表，你只需要索引。）\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"对于井字棋游戏历史中的每一步，你创建一个列表项 \",[\"$r\",\"code\",null,{\"children\":\"<li>\"}],\"，其中包含一个按钮 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\"。该按钮有一个 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理程序，它调用一个名为 \",[\"$r\",\"code\",null,{\"children\":\"jumpTo\"}],\" 的函数（你尚未实现）。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在，你应该会看到游戏中发生的动作列表和开发人员工具控制台中的错误。让我们讨论一下“关键”错误的含义。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"picking-a-key\",\"children\":\"选择 key \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你渲染一个列表时，React 会存储一些关于每个渲染列表项的信息。当你更新一个列表时，React 需要确定发生了什么变化。你可以添加、删除、重新排列或更新列表的项目。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"想象一下从\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"children\":\"<li>Alexa: 7 tasks left</li>\\n<li>Ben: 5 tasks left</li>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"到\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"children\":\"<li>Ben: 9 tasks left</li>\\n<li>Claudia: 8 tasks left</li>\\n<li>Alexa: 5 tasks left</li>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"除了更新的计数之外，阅读本文的人可能会说你交换了 Alexa 和 Ben 的顺序，并在 Alexa 和 Ben 之间插入了 Claudia。然而，React 是一个计算机程序，不知道你的意图，因此你需要为每个列表项指定一个 key 属性，以将每个列表项与其兄弟项区分开来。如果你的数据来自数据库，Alexa、Ben 和 Claudia 的数据库 ID 可以用作 key：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"<li key={user.id}>\\n  {user.name}: {user.taskCount} tasks left\\n</li>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"重新渲染列表时，React 获取每个列表项的 key 并搜索前一个列表的项以查找匹配的 key。如果当前列表有一个之前不存在的 key，React 会创建一个组件。如果当前列表缺少前一个列表中存在的 key，React 会销毁前一个组件。如果两个 key 匹配，则落子相应的组件。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"key 告诉 React 每个组件的身份，这使得 React 可以在重新渲染时保持 state。如果组件的 key 发生变化，组件将被销毁，新 state 将重新创建。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"key\"}],\" 是 React 中一个特殊的保留属性。创建元素时，React 提取 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" 属性并将 key 直接存储在返回的元素上。尽管 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" 看起来像是作为 props 传递的，但 React 会自动使用 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" 来决定要更新哪些组件。组件无法询问其父组件指定的 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"强烈建议你在构建动态列表时分配适当的 key\"}],\"。如果你没有合适的 key，你可能需要考虑重组你的数据，以便你这样做。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果没有指定 key，React 会报错，默认使用数组索引作为 key。在尝试重新排序列表项或插入/删除列表项时，使用数组索引作为 key 是有问题的。显式传递 \",[\"$r\",\"code\",null,{\"children\":\"key={i}\"}],\" 可以消除错误，但与数组索引有相同的问题，在大多数情况下不推荐使用。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"key 不需要是全局唯一的；它们只需要在组件及其同级组件之间是唯一的。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"implementing-time-travel\",\"children\":\"实现时间旅行 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在井字棋游戏的历史中，过去的每一步都有一个唯一的 ID 与之相关联：它是动作的序号。落子永远不会被重新排序、删除或从中间插入，因此使用落子的索引作为 key 是安全的。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 函数中，你可以将 key 添加为 \",[\"$r\",\"code\",null,{\"children\":\"<li key={move}>\"}],\"，如果你重新加载渲染的游戏，React 的“key”错误应该会消失：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"const moves = history.map((squares, move) => {\\n  //...\\n  return (\\n    <li key={move}>\\n      <button onClick={() => jumpTo(move)}>{description}</button>\\n    </li>\\n  );\\n});\\n\"}]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nfunction Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    onPlay(nextSquares);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const currentSquares = history[history.length - 1];\\n\\n  function handlePlay(nextSquares) {\\n    setHistory([...history, nextSquares]);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    // TODO\\n  }\\n\\n  const moves = history.map((squares, move) => {\\n    let description;\\n    if (move > 0) {\\n      description = 'Go to move #' + move;\\n    } else {\\n      description = 'Go to game start';\\n    }\\n    return (\\n      <li key={move}>\\n        <button onClick={() => jumpTo(move)}>{description}</button>\\n      </li>\\n    );\\n  });\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{moves}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"556\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在你可以实现 \",[\"$r\",\"code\",null,{\"children\":\"jumpTo\"}],\" 之前，你需要 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件来跟踪用户当前正在查看的步骤。为此，定义一个名为 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 的新 state 变量，默认为 \",[\"$r\",\"code\",null,{\"children\":\"0\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"export default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const [currentMove, setCurrentMove] = useState(0);\\n  const currentSquares = history[history.length - 1];\\n  //...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来，更新 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 中的 \",[\"$r\",\"code\",null,{\"children\":\"jumpTo\"}],\" 函数来更新 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\"。如果你将 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 更改为偶数，你还将设置 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\" 为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-5}\",\"children\":\"export default function Game() {\\n  // ...\\n  function jumpTo(nextMove) {\\n    setCurrentMove(nextMove);\\n    setXIsNext(nextMove % 2 === 0);\\n  }\\n  //...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你现在将对 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"handlePlay\"}],\" 函数进行两处更改，该函数在你单击方块时调用。\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果你“回到过去”然后从那一点开始采取新的行动，你只想保持那一点的历史。不是在 \",[\"$r\",\"code\",null,{\"children\":\"history\"}],\" 中的所有项目（\",[\"$r\",\"code\",null,{\"children\":\"...\"}],\" 扩展语法）之后添加 \",[\"$r\",\"code\",null,{\"children\":\"nextSquares\"}],\"，而是在 \",[\"$r\",\"code\",null,{\"children\":\"history.slice(0, currentMove + 1)\"}],\" 中的所有项目之后添加它，这样你就只保留旧历史的那部分。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"每次落子时，你都需要更新 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 以指向最新的历史条目。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-4}\",\"children\":\"function handlePlay(nextSquares) {\\n  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\\n  setHistory(nextHistory);\\n  setCurrentMove(nextHistory.length - 1);\\n  setXIsNext(!xIsNext);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最后，你将修改 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 组件以渲染当前选定的着法，而不是始终渲染最后的着法：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5}\",\"children\":\"export default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const [currentMove, setCurrentMove] = useState(0);\\n  const currentSquares = history[currentMove];\\n\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你点击游戏历史中的任何一步，井字棋棋盘应立即更新以显示该步骤发生后棋盘的样子。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({value, onSquareClick}) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nfunction Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    onPlay(nextSquares);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default function Game() {\\n  const [xIsNext, setXIsNext] = useState(true);\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const [currentMove, setCurrentMove] = useState(0);\\n  const currentSquares = history[currentMove];\\n\\n  function handlePlay(nextSquares) {\\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\\n    setHistory(nextHistory);\\n    setCurrentMove(nextHistory.length - 1);\\n    setXIsNext(!xIsNext);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    setCurrentMove(nextMove);\\n    setXIsNext(nextMove % 2 === 0);\\n  }\\n\\n  const moves = history.map((squares, move) => {\\n    let description;\\n    if (move > 0) {\\n      description = 'Go to move #' + move;\\n    } else {\\n      description = 'Go to game start';\\n    }\\n    return (\\n      <li key={move}>\\n        <button onClick={() => jumpTo(move)}>{description}</button>\\n      </li>\\n    );\\n  });\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{moves}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"578\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"final-cleanup\",\"children\":\"最后清理 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果仔细查看代码，你可能会注意到当 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 为偶数时为 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext === true\"}],\"，而当 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 为奇数时为 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext === false\"}],\"。换句话说，如果你知道 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 的值，那么你总能算出 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\" 应该是什么。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你没有理由将这两者都存储在 state 中。事实上，总是尽量避免冗余的 state。简化你在 state 中存储的内容可以减少错误并使你的代码更易于理解。更改 \",[\"$r\",\"code\",null,{\"children\":\"Game\"}],\" 使其不将 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\" 存储为单独的 state 变量，而是根据 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 计算出来：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,11,15}\",\"children\":\"export default function Game() {\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const [currentMove, setCurrentMove] = useState(0);\\n  const xIsNext = currentMove % 2 === 0;\\n  const currentSquares = history[currentMove];\\n\\n  function handlePlay(nextSquares) {\\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\\n    setHistory(nextHistory);\\n    setCurrentMove(nextHistory.length - 1);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    setCurrentMove(nextMove);\\n  }\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你不再需要 \",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\" state 声明或对 \",[\"$r\",\"code\",null,{\"children\":\"setXIsNext\"}],\" 的调用。现在，\",[\"$r\",\"code\",null,{\"children\":\"xIsNext\"}],\" 不可能与 \",[\"$r\",\"code\",null,{\"children\":\"currentMove\"}],\" 不同步，即使你的代码写错了。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"wrapping-up\",\"children\":\"收尾 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"祝贺！你已经创建了一个井字棋游戏，你实现了：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你现在可以玩的井字棋游戏\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"玩家在赢的时候有提示\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"随着游戏的进行存储游戏的历史\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"允许玩家回顾游戏的历史并查看棋盘的以前的版本\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"干得好！我们希望你现在觉得你对 React 的工作原理有了很好的了解。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在这里对照一下最终的结果吧：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nfunction Square({ value, onSquareClick }) {\\n  return (\\n    <button className=\\\"square\\\" onClick={onSquareClick}>\\n      {value}\\n    </button>\\n  );\\n}\\n\\nfunction Board({ xIsNext, squares, onPlay }) {\\n  function handleClick(i) {\\n    if (calculateWinner(squares) || squares[i]) {\\n      return;\\n    }\\n    const nextSquares = squares.slice();\\n    if (xIsNext) {\\n      nextSquares[i] = 'X';\\n    } else {\\n      nextSquares[i] = 'O';\\n    }\\n    onPlay(nextSquares);\\n  }\\n\\n  const winner = calculateWinner(squares);\\n  let status;\\n  if (winner) {\\n    status = 'Winner: ' + winner;\\n  } else {\\n    status = 'Next player: ' + (xIsNext ? 'X' : 'O');\\n  }\\n\\n  return (\\n    <>\\n      <div className=\\\"status\\\">{status}</div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />\\n        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />\\n        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />\\n        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />\\n        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />\\n      </div>\\n      <div className=\\\"board-row\\\">\\n        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />\\n        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />\\n        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />\\n      </div>\\n    </>\\n  );\\n}\\n\\nexport default function Game() {\\n  const [history, setHistory] = useState([Array(9).fill(null)]);\\n  const [currentMove, setCurrentMove] = useState(0);\\n  const xIsNext = currentMove % 2 === 0;\\n  const currentSquares = history[currentMove];\\n\\n  function handlePlay(nextSquares) {\\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\\n    setHistory(nextHistory);\\n    setCurrentMove(nextHistory.length - 1);\\n  }\\n\\n  function jumpTo(nextMove) {\\n    setCurrentMove(nextMove);\\n  }\\n\\n  const moves = history.map((squares, move) => {\\n    let description;\\n    if (move > 0) {\\n      description = 'Go to move #' + move;\\n    } else {\\n      description = 'Go to game start';\\n    }\\n    return (\\n      <li key={move}>\\n        <button onClick={() => jumpTo(move)}>{description}</button>\\n      </li>\\n    );\\n  });\\n\\n  return (\\n    <div className=\\\"game\\\">\\n      <div className=\\\"game-board\\\">\\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />\\n      </div>\\n      <div className=\\\"game-info\\\">\\n        <ol>{moves}</ol>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nfunction calculateWinner(squares) {\\n  const lines = [\\n    [0, 1, 2],\\n    [3, 4, 5],\\n    [6, 7, 8],\\n    [0, 3, 6],\\n    [1, 4, 7],\\n    [2, 5, 8],\\n    [0, 4, 8],\\n    [2, 4, 6],\\n  ];\\n  for (let i = 0; i < lines.length; i++) {\\n    const [a, b, c] = lines[i];\\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\\n      return squares[a];\\n    }\\n  }\\n  return null;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"meta\":\"src/styles.css\",\"children\":\"* {\\n  box-sizing: border-box;\\n}\\n\\nbody {\\n  font-family: sans-serif;\\n  margin: 20px;\\n  padding: 0;\\n}\\n\\n.square {\\n  background: #fff;\\n  border: 1px solid #999;\\n  float: left;\\n  font-size: 24px;\\n  font-weight: bold;\\n  line-height: 34px;\\n  height: 34px;\\n  margin-right: -1px;\\n  margin-top: -1px;\\n  padding: 0;\\n  text-align: center;\\n  width: 34px;\\n}\\n\\n.board-row:after {\\n  clear: both;\\n  content: '';\\n  display: table;\\n}\\n\\n.status {\\n  margin-bottom: 10px;\\n}\\n.game {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.game-info {\\n  margin-left: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你有额外的时间或想练习新的 React 技能，这里有一些你可以改进井字棋游戏的想法，按难度递增的顺序列出：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"仅针对当前着手，显示“You are at move #…”而不是按钮。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"重写 \",[\"$r\",\"code\",null,{\"children\":\"Board\"}],\" 以使用两个循环来制作方块而不是对它们进行硬编码。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"添加一个切换按钮，使可以按升序或降序对落子的步数进行排序。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"当有人获胜时，突出显示致使获胜的三个方块（当没有人获胜时，显示一条关于结果为平局的消息）。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在“落子”的历史列表中以 (row, col) 格式显示每步的位置。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在本教程中，你已经接触到了 React 概念，包括元素、组件、props 和 state。现在你已经了解了这些概念在构建游戏时是如何工作的，请查看 \",[\"$r\",\"a\",null,{\"href\":\"/learn/thinking-in-react\",\"children\":\"React 哲学\"}],\" 以了解这些 React 概念在构建应用的 UI 时是如何工作的。\"]}]]}]]","meta":{"title":"教程：井字棋游戏"}},"__N_SSG":true}