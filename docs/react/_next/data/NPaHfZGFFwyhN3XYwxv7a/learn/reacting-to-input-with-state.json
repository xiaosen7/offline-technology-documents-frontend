{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#how-declarative-ui-compares-to-imperative\",\"depth\":2,\"text\":\"声明式 UI 与命令式 UI 的比较 \"},{\"url\":\"#thinking-about-ui-declaratively\",\"depth\":2,\"text\":\"声明式地考虑 UI \"},{\"url\":\"#step-1-identify-your-components-different-visual-states\",\"depth\":3,\"text\":\"步骤 1：定位组件中不同的视图状态 \"},{\"url\":\"#step-2-determine-what-triggers-those-state-changes\",\"depth\":3,\"text\":\"步骤 2：确定是什么触发了这些状态的改变 \"},{\"url\":\"#步骤-3通过-usestate-step-3-represent-the-state-in-memory-with-usestate-表示内存中的-state\",\"depth\":3,\"text\":[\"步骤 3：通过 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" \",\" 表示内存中的 state\"]},{\"url\":\"#step-4-remove-any-non-essential-state-variables\",\"depth\":3,\"text\":\"步骤 4：删除任何不必要的 state 变量 \"},{\"url\":\"#step-5-connect-the-event-handlers-to-set-state\",\"depth\":3,\"text\":\"步骤 5：连接事件处理函数以设置 state \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"12\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"React 控制 UI 的方式是声明式的。你不必直接控制 UI 的各个部分，只需要声明组件可以处于的不同状态，并根据用户的输入在它们之间切换。这与设计师对 UI 的思考方式很相似。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"了解声明式 UI 编程与命令式 UI 编程有何不同\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"了解如何列举组件可能处于的不同视图状态\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"了解如何在代码中触发不同视图状态的变化\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"how-declarative-ui-compares-to-imperative\",\"children\":\"声明式 UI 与命令式 UI 的比较 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你设计 UI 交互时，可能会去思考 UI 如何根据用户的操作而响应\",[\"$r\",\"strong\",null,{\"children\":\"变化\"}],\"。想象一个让用户提交答案的表单：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当你向表单输入数据时，“提交”按钮会随之变成\",[\"$r\",\"strong\",null,{\"children\":\"可用状态\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当你点击“提交”后，表单和提交按钮都会随之变成\",[\"$r\",\"strong\",null,{\"children\":\"不可用状态\"}],\"，并且会加载动画会随之\",[\"$r\",\"strong\",null,{\"children\":\"出现\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果网络请求成功，表单会随之\",[\"$r\",\"strong\",null,{\"children\":\"隐藏\"}],\"，同时“提交成功”的信息会随之\",[\"$r\",\"strong\",null,{\"children\":\"出现\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果网络请求失败，错误信息会随之\",[\"$r\",\"strong\",null,{\"children\":\"出现\"}],\"，同时表单又变为\",[\"$r\",\"strong\",null,{\"children\":\"可用状态\"}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"strong\",null,{\"children\":\"命令式编程\"}],\" 中，以上的过程直接告诉你如何去实现交互。你必须去根据要发生的事情写一些明确的命令去操作 UI。对此有另一种理解方式，想象一下，当你坐在车里的某个人旁边，然后一步一步地告诉他该去哪。\"]}],\"\\n\"]}],[\"$r\",\"Illustration\",null,{\"src\":\"/images/docs/illustrations/i_imperative-ui-programming.png\",\"alt\":\"看起来很焦急的司机代表 JavaScript，乘客命令司机执行一系列复杂的转弯导航。\"}],[\"$r\",\"MaxWidth\",\"18\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"他并不知道你想去哪，只想跟着命令行动。（并且如果你发出了错误的命令，那么你就会到达错误的地方）正因为你必须从加载动画到按钮地“命令”每个元素，所以这种告诉计算机\",[\"$r\",\"strong\",null,{\"children\":\"如何\"}],\"去更新 UI 的编程方式被称为\",[\"$r\",\"strong\",null,{\"children\":\"命令式编程\"}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个命令式 UI 编程的例子中，表单\",[\"$r\",\"strong\",null,{\"children\":\"没有使用\"}],\" React 生成，而是使用原生的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DOM\"}],\":\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"async function handleFormSubmit(e) {\\n  e.preventDefault();\\n  disable(textarea);\\n  disable(button);\\n  show(loadingMessage);\\n  hide(errorMessage);\\n  try {\\n    await submitForm(textarea.value);\\n    show(successMessage);\\n    hide(form);\\n  } catch (err) {\\n    show(errorMessage);\\n    errorMessage.textContent = err.message;\\n  } finally {\\n    hide(loadingMessage);\\n    enable(textarea);\\n    enable(button);\\n  }\\n}\\n\\nfunction handleTextareaChange() {\\n  if (textarea.value.length === 0) {\\n    disable(button);\\n  } else {\\n    enable(button);\\n  }\\n}\\n\\nfunction hide(el) {\\n  el.style.display = 'none';\\n}\\n\\nfunction show(el) {\\n  el.style.display = '';\\n}\\n\\nfunction enable(el) {\\n  el.disabled = false;\\n}\\n\\nfunction disable(el) {\\n  el.disabled = true;\\n}\\n\\nfunction submitForm(answer) {\\n  // Pretend it's hitting the network.\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      if (answer.toLowerCase() === 'istanbul') {\\n        resolve();\\n      } else {\\n        reject(new Error('Good guess but a wrong answer. Try again!'));\\n      }\\n    }, 1500);\\n  });\\n}\\n\\nlet form = document.getElementById('form');\\nlet textarea = document.getElementById('textarea');\\nlet button = document.getElementById('button');\\nlet loadingMessage = document.getElementById('loading');\\nlet errorMessage = document.getElementById('error');\\nlet successMessage = document.getElementById('success');\\nform.onsubmit = handleFormSubmit;\\ntextarea.oninput = handleTextareaChange;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"sandbox.config.json hidden\",\"children\":\"{\\n  \\\"hardReloadOnChange\\\": true\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<form id=\\\"form\\\">\\n  <h2>City quiz</h2>\\n  <p>\\n    What city is located on two continents?\\n  </p>\\n  <textarea id=\\\"textarea\\\"></textarea>\\n  <br />\\n  <button id=\\\"button\\\" disabled>Submit</button>\\n  <p id=\\\"loading\\\" style=\\\"display: none\\\">Loading...</p>\\n  <p id=\\\"error\\\" style=\\\"display: none; color: red;\\\"></p>\\n</form>\\n<h1 id=\\\"success\\\" style=\\\"display: none\\\">That's right!</h1>\\n\\n<style>\\n* { box-sizing: border-box; }\\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\\n</style>\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"26\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"对于独立系统来说，命令式地控制用户界面的效果也不错，但是当处于更加复杂的系统中时，这会造成管理的困难程度指数级地增长。如同示例一样，想象一下，当你想更新这样一个包含着不同表单的页面时，你想要添加一个新 UI 元素或一个新的交互，为了保证不会因此产生新的 bug（例如忘记去显示或隐藏一些东西），你必须十分小心地去检查所有已经写好的代码。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React 正是为了解决这样的问题而诞生的。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 React 中，你不必直接去操作 UI —— 你不必直接启用、关闭、显示或隐藏组件。相反，你只需要 \",[\"$r\",\"strong\",null,{\"children\":\"声明你想要显示的内容，\"}],\" React 就会通过计算得出该如何去更新 UI。想象一下，当你上了一辆出租车并且告诉司机你想去哪，而不是事无巨细地告诉他该如何走。将你带到目的地是司机的工作，他们甚至可能知道一些你没有想过并且不知道的捷径！\"]}],\"\\n\"]}],[\"$r\",\"Illustration\",null,{\"src\":\"/images/docs/illustrations/i_declarative-ui-programming.png\",\"alt\":\"React 开着车，一个乘客想要去地图上的一个特定的地方。React 会思考如何带你到目的地。\"}],[\"$r\",\"MaxWidth\",\"44\",{\"children\":[\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"thinking-about-ui-declaratively\",\"children\":\"声明式地考虑 UI \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你已经从上面的例子看到如何去实现一个表单了，为了更好地理解如何在 React 中思考，接下来你将会学到如何用 React 重新实现这个 UI：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"定位\"}],\"你的组件中不同的视图状态\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"确定\"}],\"是什么触发了这些 state 的改变\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"表示\"}],\"内存中的 state（需要使用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\"）\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"删除\"}],\"任何不必要的 state 变量\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"连接\"}],\"事件处理函数去设置 state\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-1-identify-your-components-different-visual-states\",\"children\":\"步骤 1：定位组件中不同的视图状态 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在计算机科学中，你或许听过可处于多种“状态”之一的 \",[\"$r\",\"a\",null,{\"href\":\"https://en.wikipedia.org/wiki/Finite-state_machine\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"“状态机”\"}],\"。如果你有与设计师一起工作，那么你可能已经见过不同“视图状态”的模拟图。正因为 React 站在设计与计算机科学的交点上，因此这两种思想都是灵感的来源。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"首先，你需要去可视化 UI 界面中用户可能看到的所有不同的“状态”：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"无数据\"}],\"：表单有一个不可用状态的“提交”按钮。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"输入中\"}],\"：表单有一个可用状态的“提交”按钮。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"提交中\"}],\"：表单完全处于不可用状态，加载动画出现。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"成功时\"}],\"：显示“成功”的消息而非表单。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"错误时\"}],\"：与输入状态类似，但会多错误的消息。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"像一个设计师一样，你会想要在你添加逻辑之前去“模拟”不同的状态或创建“模拟状态”。例如下面的例子，这是一个对表单可视部分的模拟。这个模拟被一个 \",[\"$r\",\"code\",null,{\"children\":\"status\"}],\" 的属性控制，并且这个属性的默认值为 \",[\"$r\",\"code\",null,{\"children\":\"empty\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Form({\\n  status = 'empty'\\n}) {\\n  if (status === 'success') {\\n    return <h1>That's right!</h1>\\n  }\\n  return (\\n    <>\\n      <h2>City quiz</h2>\\n      <p>\\n        In which city is there a billboard that turns air into drinkable water?\\n      </p>\\n      <form>\\n        <textarea />\\n        <br />\\n        <button>\\n          Submit\\n        </button>\\n      </form>\\n    </>\\n  )\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"48\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以随意命名这个属性，名字并不重要。试着将 \",[\"$r\",\"code\",null,{\"children\":\"status = 'empty'\"}],\" 改为 \",[\"$r\",\"code\",null,{\"children\":\"status = 'success'\"}],\"，然后你就会看到成功的信息出现。模拟可以让你在书写逻辑前快速迭代 UI。这是同一组件的一个更加充实的原型，仍然由 \",[\"$r\",\"code\",null,{\"children\":\"status\"}],\" 属性“控制”：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Form({\\n  // Try 'submitting', 'error', 'success':\\n  status = 'empty'\\n}) {\\n  if (status === 'success') {\\n    return <h1>That's right!</h1>\\n  }\\n  return (\\n    <>\\n      <h2>City quiz</h2>\\n      <p>\\n        In which city is there a billboard that turns air into drinkable water?\\n      </p>\\n      <form>\\n        <textarea disabled={\\n          status === 'submitting'\\n        } />\\n        <br />\\n        <button disabled={\\n          status === 'empty' ||\\n          status === 'submitting'\\n        }>\\n          Submit\\n        </button>\\n        {status === 'error' &&\\n          <p className=\\\"Error\\\">\\n            Good guess but a wrong answer. Try again!\\n          </p>\\n        }\\n      </form>\\n      </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".Error { color: red; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"58\",{\"children\":[\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"displaying-many-visual-states-at-once\",\"children\":\"同时展示大量的视图状态 \"}],[\"$r\",\"p\",null,{\"children\":\"如果一个组件有多个视图状态，你可以很方便地将它们展示在一个页面中：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js active\",\"children\":\"import Form from './Form.js';\\n\\nlet statuses = [\\n  'empty',\\n  'typing',\\n  'submitting',\\n  'success',\\n  'error',\\n];\\n\\nexport default function App() {\\n  return (\\n    <>\\n      {statuses.map(status => (\\n        <section key={status}>\\n          <h4>Form ({status}):</h4>\\n          <Form status={status} />\\n        </section>\\n      ))}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Form.js\",\"children\":\"export default function Form({ status }) {\\n  if (status === 'success') {\\n    return <h1>That's right!</h1>\\n  }\\n  return (\\n    <form>\\n      <textarea disabled={\\n        status === 'submitting'\\n      } />\\n      <br />\\n      <button disabled={\\n        status === 'empty' ||\\n        status === 'submitting'\\n      }>\\n        Submit\\n      </button>\\n      {status === 'error' &&\\n        <p className=\\\"Error\\\">\\n          Good guess but a wrong answer. Try again!\\n        </p>\\n      }\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"section { border-bottom: 1px solid #aaa; padding: 20px; }\\nh4 { color: #222; }\\nbody { margin: 0; }\\n.Error { color: red; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"类似这样的页面通常被称作“living styleguide”或“storybook”。\"}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-2-determine-what-triggers-those-state-changes\",\"children\":\"步骤 2：确定是什么触发了这些状态的改变 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以触发 state 的更新来响应两种输入：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"人为\"}],\"输入。比如点击按钮、在表单中输入内容，或导航到链接。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"计算机\"}],\"输入。比如网络请求得到反馈、定时器被触发，或加载一张图片。\"]}],\"\\n\"]}],\"\\n\"]}],[\"$r\",\"IllustrationBlock\",null,{\"children\":[[\"$r\",\"Illustration\",null,{\"caption\":\"人为输入\",\"alt\":\"一个手指。\",\"src\":\"/images/docs/illustrations/i_inputs1.png\"}],[\"$r\",\"Illustration\",null,{\"caption\":\"计算机输入\",\"alt\":\"许多的 0 和 1。\",\"src\":\"/images/docs/illustrations/i_inputs2.png\"}]]}],[\"$r\",\"MaxWidth\",\"106\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"以上两种情况中，\",[\"$r\",\"strong\",null,{\"children\":[\"你必须设置 \",[\"$r\",\"a\",null,{\"href\":\"/learn/state-a-components-memory#anatomy-of-usestate\",\"children\":\"state 变量\"}],\" 去更新 UI\"]}],\"。对于正在开发中的表单来说，你需要改变 state 以响应几个不同的输入：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"改变输入框中的文本时\"}],\"（人为）应该根据输入框的内容是否是\",[\"$r\",\"strong\",null,{\"children\":\"空值\"}],\"，从而决定将表单的状态从空值状态切换到\",[\"$r\",\"strong\",null,{\"children\":\"输入中\"}],\"或切换回原状态。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"点击提交按钮时\"}],\"（人为）应该将表单的状态切换到\",[\"$r\",\"strong\",null,{\"children\":\"提交中\"}],\"的状态。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"网络请求成功后\"}],\"（计算机）应该将表单的状态切换到\",[\"$r\",\"strong\",null,{\"children\":\"成功\"}],\"的状态。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"网络请求失败后\"}],\"（计算机）应该将表单的状态切换到\",[\"$r\",\"strong\",null,{\"children\":\"失败\"}],\"的状态，与此同时，显示错误信息。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"注意，人为输入通常需要 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events\",\"children\":\"事件处理函数\"}],\"！\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为了可视化这个流程，请尝试在纸上画出圆形标签以表示每个状态，两个状态之间的改变用箭头表示。你可以像这样画出很多流程并且在写代码前解决许多 bug。\"}],\"\\n\",[\"$r\",\"DiagramGroup\",null,{\"children\":[\"$r\",\"Diagram\",null,{\"name\":\"responding_to_input_flow\",\"height\":350,\"width\":688,\"alt\":\"流程图从左到右共有 5 个节点。第一个 'empty' 节点通过 'start typing' 分支与 'typing' 节点相连。'typing' 节点则通过 'press submit' 分支与拥有两个分支的 'submitting' 节点相连。其中 'submitting' 节点左侧通过 'network error' 分支与 'error' 节点相连，而右侧则是通过 'network success' 分支与 'success' 节点相连。\",\"children\":[\"$r\",\"p\",null,{\"children\":\"表单的各种状态\"}]}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"步骤-3通过-usestate-step-3-represent-the-state-in-memory-with-usestate-表示内存中的-state\",\"children\":[\"步骤 3：通过 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" \",\" 表示内存中的 state\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接下来你会需要在内存中通过 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useState\"}]}],\" 表示组件中的视图状态。诀窍很简单：state 的每个部分都是“处于变化中的”，并且\",[\"$r\",\"strong\",null,{\"children\":\"你需要让“变化的部分”尽可能的少\"}],\"。更复杂的程序会产生更多 bug！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"先从\",[\"$r\",\"strong\",null,{\"children\":\"绝对必须\"}],\"存在的状态开始。例如，你需要存储输入的 \",[\"$r\",\"code\",null,{\"children\":\"answer\"}],\" 以及用于存储最后一个错误的 \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" （如果存在的话）：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [answer, setAnswer] = useState('');\\nconst [error, setError] = useState(null);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"接下来，你需要一个状态变量来代表你想要显示的那个可视状态。通常有多种方式在内存中表示它，因此你需要进行实验。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你很难立即想出最好的办法，那就先从添加足够多的 state 开始，\",[\"$r\",\"strong\",null,{\"children\":\"确保\"}],\"所有可能的视图状态都囊括其中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [isEmpty, setIsEmpty] = useState(true);\\nconst [isTyping, setIsTyping] = useState(false);\\nconst [isSubmitting, setIsSubmitting] = useState(false);\\nconst [isSuccess, setIsSuccess] = useState(false);\\nconst [isError, setIsError] = useState(false);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你最初的想法或许不是最好的，但是没关系，重构 state 也是步骤中的一部分！\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-4-remove-any-non-essential-state-variables\",\"children\":\"步骤 4：删除任何不必要的 state 变量 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你会想要避免 state 内容中的重复，从而只需要关注那些必要的部分。花一点时间来重构你的 state 结构，会让你的组件更容易被理解，减少重复并且避免歧义。你的目的是\",[\"$r\",\"strong\",null,{\"children\":\"防止出现在内存中的 state 不代表任何你希望用户看到的有效 UI 的情况。\"}],\"（比如你绝对不会想要在展示错误信息的同时禁用掉输入框，导致用户无法纠正错误！）\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这有一些你可以问自己的， 关于 state 变量的问题：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"这个 state 是否会导致矛盾\"}],\"？例如，\",[\"$r\",\"code\",null,{\"children\":\"isTyping\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"isSubmitting\"}],\" 的状态不能同时为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。矛盾的产生通常说明了这个 state 没有足够的约束条件。两个布尔值有四种可能的组合，但是只有三种对应有效的状态。为了将“不可能”的状态移除，你可以将他们合并到一个 \",[\"$r\",\"code\",null,{\"children\":\"'status'\"}],\" 中，它的值必须是 \",[\"$r\",\"code\",null,{\"children\":\"'typing'\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"'submitting'\"}],\" 以及 \",[\"$r\",\"code\",null,{\"children\":\"'success'\"}],\" 这三个中的一个。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"相同的信息是否已经在另一个 state 变量中存在\"}],\"？另一个矛盾：\",[\"$r\",\"code\",null,{\"children\":\"isEmpty\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"isTyping\"}],\" 不能同时为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。通过使它们成为独立的 state 变量，可能会导致它们不同步并导致 bug。幸运的是，你可以移除 \",[\"$r\",\"code\",null,{\"children\":\"isEmpty\"}],\" 转而用 \",[\"$r\",\"code\",null,{\"children\":\"message.length === 0\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"你是否可以通过另一个 state 变量的相反值得到相同的信息\"}],\"？\",[\"$r\",\"code\",null,{\"children\":\"isError\"}],\" 是多余的，因为你可以检查 \",[\"$r\",\"code\",null,{\"children\":\"error !== null\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在清理之后，你只剩下 3 个（从原本的 7 个！）\",[\"$r\",\"em\",null,{\"children\":\"必要\"}],\"的 state 变量：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const [answer, setAnswer] = useState('');\\nconst [error, setError] = useState(null);\\nconst [status, setStatus] = useState('typing'); // 'typing', 'submitting', or 'success'\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"正是因为你不能在不破坏功能的情况下删除其中任何一个状态变量，因此你可以确定这些都是必要的。\"}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"eliminating-impossible-states-with-a-reducer\",\"children\":\"通过 reducer 来减少“不可能” state \"}],[\"$r\",\"p\",null,{\"children\":[\"尽管这三个变量对于表示这个表单的状态来说已经足够好了，仍然是有一些中间状态并不是完全有意义的。例如一个非空的 \",[\"$r\",\"code\",null,{\"children\":\"error\"}],\" 当 \",[\"$r\",\"code\",null,{\"children\":\"status\"}],\" 的值为 \",[\"$r\",\"code\",null,{\"children\":\"success\"}],\" 时没有意义。为了更精确地模块化状态，你可以 \",[\"$r\",\"a\",null,{\"href\":\"/learn/extracting-state-logic-into-a-reducer\",\"children\":\"将状态提取到一个 reducer 中\"}],\"。Reducer 可以让您合并多个状态变量到一个对象中并巩固所有相关的逻辑！\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"step-5-connect-the-event-handlers-to-set-state\",\"children\":\"步骤 5：连接事件处理函数以设置 state \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"最后，创建事件处理函数去设置 state 变量。下面是绑定好事件的最终表单：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [answer, setAnswer] = useState('');\\n  const [error, setError] = useState(null);\\n  const [status, setStatus] = useState('typing');\\n\\n  if (status === 'success') {\\n    return <h1>That's right!</h1>\\n  }\\n\\n  async function handleSubmit(e) {\\n    e.preventDefault();\\n    setStatus('submitting');\\n    try {\\n      await submitForm(answer);\\n      setStatus('success');\\n    } catch (err) {\\n      setStatus('typing');\\n      setError(err);\\n    }\\n  }\\n\\n  function handleTextareaChange(e) {\\n    setAnswer(e.target.value);\\n  }\\n\\n  return (\\n    <>\\n      <h2>City quiz</h2>\\n      <p>\\n        In which city is there a billboard that turns air into drinkable water?\\n      </p>\\n      <form onSubmit={handleSubmit}>\\n        <textarea\\n          value={answer}\\n          onChange={handleTextareaChange}\\n          disabled={status === 'submitting'}\\n        />\\n        <br />\\n        <button disabled={\\n          answer.length === 0 ||\\n          status === 'submitting'\\n        }>\\n          Submit\\n        </button>\\n        {error !== null &&\\n          <p className=\\\"Error\\\">\\n            {error.message}\\n          </p>\\n        }\\n      </form>\\n    </>\\n  );\\n}\\n\\nfunction submitForm(answer) {\\n  // Pretend it's hitting the network.\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      let shouldError = answer.toLowerCase() !== 'lima'\\n      if (shouldError) {\\n        reject(new Error('Good guess but a wrong answer. Try again!'));\\n      } else {\\n        resolve();\\n      }\\n    }, 1500);\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".Error { color: red; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"112\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"尽管这些代码相对与最初的命令式的例子来说更长，但是却更加健壮。将所有的交互变为 state 的改变，可以让你避免之后引入新的视图状态后导致现有 state 被破坏。同时也使你在不必改变交互逻辑的情况下，更改每个状态对应的 UI。\"}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"声明式编程意味着为每个视图状态声明 UI 而非细致地控制 UI（命令式）。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当开发一个组件时：\",\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"写出你的组件中所有的视图状态。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"确定是什么触发了这些 state 的改变。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"通过 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" 模块化内存中的 state。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"删除任何不必要的 state 变量。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"连接事件处理函数去设置 state。\"}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"add-and-remove-a-css-class\",\"children\":\"添加和删除一个 CSS class \"}],[\"$r\",\"p\",null,{\"children\":[\"尝试实现当点击图片时\",[\"$r\",\"strong\",null,{\"children\":\"删除\"}],\"外部 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 的 CSS class \",[\"$r\",\"code\",null,{\"children\":\"background--active\"}],\"，并将 \",[\"$r\",\"code\",null,{\"children\":\"picture--active\"}],\" 的 CSS class 添加到 \",[\"$r\",\"code\",null,{\"children\":\"<img>\"}],\" 上。当再次点击背景图片时将恢复最开始的 CSS class。\"]}],[\"$r\",\"p\",null,{\"children\":\"视觉上，你应该期望当点击图片时会移除紫色的背景，并且高亮图片的边框。点击图片外面时高亮背景并且删除图片边框的高亮效果。\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Picture() {\\n  return (\\n    <div className=\\\"background background--active\\\">\\n      <img\\n        className=\\\"picture\\\"\\n        alt=\\\"Rainbow houses in Kampung Pelangi, Indonesia\\\"\\n        src=\\\"https://i.imgur.com/5qwVYb1.jpeg\\\"\\n      />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { margin: 0; padding: 0; height: 250px; }\\n\\n.background {\\n  width: 100vw;\\n  height: 100vh;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: #eee;\\n}\\n\\n.background--active {\\n  background: #a6b5ff;\\n}\\n\\n.picture {\\n  width: 200px;\\n  height: 200px;\\n  border-radius: 10px;\\n  border: 5px solid transparent;\\n}\\n\\n.picture--active {\\n  border: 5px solid #a6b5ff;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"这个组件有两个视图状态：当图片处于激活状态时以及当图片处于非激活状态时：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当图片处于激活状态时，CSS class 是 \",[\"$r\",\"code\",null,{\"children\":\"background\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"picture picture--active\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当图片处于非激活状态时，CSS class 是 \",[\"$r\",\"code\",null,{\"children\":\"background background--active\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"picture\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"一个布尔类型的 state 已经足够表示图片是否处于激活状态。最初的工作仅仅是移除或添加 CSS class。然而在 React 中你需要去\",[\"$r\",\"strong\",null,{\"children\":\"描述\"}],\"什么是你想要看到的而非\",[\"$r\",\"strong\",null,{\"children\":\"操作\"}],\" UI 元素。因此你需要基于当前 state 去计算这两个 CSS class。同时你需要去 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#stopping-propagation\",\"children\":\"阻止冒泡行为\"}],\"，只有这样点击图片的时候不会触发点击背景的回调。\"]}],[\"$r\",\"p\",null,{\"children\":\"通过点击图片然后点击图片外围来确定这个版本可用：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Picture() {\\n  const [isActive, setIsActive] = useState(false);\\n\\n  let backgroundClassName = 'background';\\n  let pictureClassName = 'picture';\\n  if (isActive) {\\n    pictureClassName += ' picture--active';\\n  } else {\\n    backgroundClassName += ' background--active';\\n  }\\n\\n  return (\\n    <div\\n      className={backgroundClassName}\\n      onClick={() => setIsActive(false)}\\n    >\\n      <img\\n        onClick={e => {\\n          e.stopPropagation();\\n          setIsActive(true);\\n        }}\\n        className={pictureClassName}\\n        alt=\\\"Rainbow houses in Kampung Pelangi, Indonesia\\\"\\n        src=\\\"https://i.imgur.com/5qwVYb1.jpeg\\\"\\n      />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { margin: 0; padding: 0; height: 250px; }\\n\\n.background {\\n  width: 100vw;\\n  height: 100vh;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: #eee;\\n}\\n\\n.background--active {\\n  background: #a6b5ff;\\n}\\n\\n.picture {\\n  width: 200px;\\n  height: 200px;\\n  border-radius: 10px;\\n  border: 5px solid transparent;\\n}\\n\\n.picture--active {\\n  border: 5px solid #a6b5ff;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"或者，你可以返回两个单独的 JSX 代码块：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Picture() {\\n  const [isActive, setIsActive] = useState(false);\\n  if (isActive) {\\n    return (\\n      <div\\n        className=\\\"background\\\"\\n        onClick={() => setIsActive(false)}\\n      >\\n        <img\\n          className=\\\"picture picture--active\\\"\\n          alt=\\\"Rainbow houses in Kampung Pelangi, Indonesia\\\"\\n          src=\\\"https://i.imgur.com/5qwVYb1.jpeg\\\"\\n          onClick={e => e.stopPropagation()}\\n        />\\n      </div>\\n    );\\n  }\\n  return (\\n    <div className=\\\"background background--active\\\">\\n      <img\\n        className=\\\"picture\\\"\\n        alt=\\\"Rainbow houses in Kampung Pelangi, Indonesia\\\"\\n        src=\\\"https://i.imgur.com/5qwVYb1.jpeg\\\"\\n        onClick={() => setIsActive(true)}\\n      />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { margin: 0; padding: 0; height: 250px; }\\n\\n.background {\\n  width: 100vw;\\n  height: 100vh;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: #eee;\\n}\\n\\n.background--active {\\n  background: #a6b5ff;\\n}\\n\\n.picture {\\n  width: 200px;\\n  height: 200px;\\n  border-radius: 10px;\\n  border: 5px solid transparent;\\n}\\n\\n.picture--active {\\n  border: 5px solid #a6b5ff;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"请记住，如果两个不同的 JSX 代码块描述着相同的树结构，它们的嵌套（第一个 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" → 第一个 \",[\"$r\",\"code\",null,{\"children\":\"<img>\"}],\"）必须对齐。否则切换 \",[\"$r\",\"code\",null,{\"children\":\"isActive\"}],\" 会再次在后面创建整个树结构并且 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"重置 state\"}],\"。这也就是为什么当一个相似的 JSX 树结构在两个情况下都返回的时候，最好将它们写成一个单独的 JSX。\"]}]]}],[\"$r\",\"h4\",null,{\"id\":\"profile-editor\",\"children\":\"个人信息编辑器 \"}],[\"$r\",\"p\",null,{\"children\":\"这是一个通过纯 JavaScript 和 DOM 实现的小型表单。先来随便使用一下来看看它有什么功能吧：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"function handleFormSubmit(e) {\\n  e.preventDefault();\\n  if (editButton.textContent === 'Edit Profile') {\\n    editButton.textContent = 'Save Profile';\\n    hide(firstNameText);\\n    hide(lastNameText);\\n    show(firstNameInput);\\n    show(lastNameInput);\\n  } else {\\n    editButton.textContent = 'Edit Profile';\\n    hide(firstNameInput);\\n    hide(lastNameInput);\\n    show(firstNameText);\\n    show(lastNameText);\\n  }\\n}\\n\\nfunction handleFirstNameChange() {\\n  firstNameText.textContent = firstNameInput.value;\\n  helloText.textContent = (\\n    'Hello ' +\\n    firstNameInput.value + ' ' +\\n    lastNameInput.value + '!'\\n  );\\n}\\n\\nfunction handleLastNameChange() {\\n  lastNameText.textContent = lastNameInput.value;\\n  helloText.textContent = (\\n    'Hello ' +\\n    firstNameInput.value + ' ' +\\n    lastNameInput.value + '!'\\n  );\\n}\\n\\nfunction hide(el) {\\n  el.style.display = 'none';\\n}\\n\\nfunction show(el) {\\n  el.style.display = '';\\n}\\n\\nlet form = document.getElementById('form');\\nlet editButton = document.getElementById('editButton');\\nlet firstNameInput = document.getElementById('firstNameInput');\\nlet firstNameText = document.getElementById('firstNameText');\\nlet lastNameInput = document.getElementById('lastNameInput');\\nlet lastNameText = document.getElementById('lastNameText');\\nlet helloText = document.getElementById('helloText');\\nform.onsubmit = handleFormSubmit;\\nfirstNameInput.oninput = handleFirstNameChange;\\nlastNameInput.oninput = handleLastNameChange;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"sandbox.config.json hidden\",\"children\":\"{\\n  \\\"hardReloadOnChange\\\": true\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<form id=\\\"form\\\">\\n  <label>\\n    First name:\\n    <b id=\\\"firstNameText\\\">Jane</b>\\n    <input\\n      id=\\\"firstNameInput\\\"\\n      value=\\\"Jane\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <label>\\n    Last name:\\n    <b id=\\\"lastNameText\\\">Jacobs</b>\\n    <input\\n      id=\\\"lastNameInput\\\"\\n      value=\\\"Jacobs\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <button type=\\\"submit\\\" id=\\\"editButton\\\">Edit Profile</button>\\n  <p><i id=\\\"helloText\\\">Hello, Jane Jacobs!</i></p>\\n</form>\\n\\n<style>\\n* { box-sizing: border-box; }\\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\\nlabel { display: block; margin-bottom: 20px; }\\n</style>\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"这个表单在两种模式间切换：编辑模式，你可以看到输入框；查看模式，你只能看到结果。按钮的标签会根据你所处的模式在“编辑”和“保存”两者中切换。当你改变输入框的内容时，欢迎信息会最下面实时更新。\"}],[\"$r\",\"p\",null,{\"children\":\"你的任务是在下方的沙盒中用 React 再次实现它。为了方便，标签已经转换为 JSX，但是你需要让它像原版那样显示和隐藏输入框。\"}],[\"$r\",\"p\",null,{\"children\":\"也要确保它在底下更新文本内容！\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function EditProfile() {\\n  return (\\n    <form>\\n      <label>\\n        First name:{' '}\\n        <b>Jane</b>\\n        <input />\\n      </label>\\n      <label>\\n        Last name:{' '}\\n        <b>Jacobs</b>\\n        <input />\\n      </label>\\n      <button type=\\\"submit\\\">\\n        Edit Profile\\n      </button>\\n      <p><i>Hello, Jane Jacobs!</i></p>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-bottom: 20px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"你需要两个 state 变量来保存输入框中的内容：\",[\"$r\",\"code\",null,{\"children\":\"firstName\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"lastName\"}],\"。同时你还会需要一个 \",[\"$r\",\"code\",null,{\"children\":\"isEditing\"}],\" 的 state 变量来保存是否显示输入框的状态。你应该\",[\"$r\",\"strong\",null,{\"children\":\"不\"}],\"需要 \",[\"$r\",\"code\",null,{\"children\":\"fullName\"}],\" 变量，因为全名可以由\",[\"$r\",\"code\",null,{\"children\":\"firstName\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"lastName\"}],\" 组合而成。\"]}],[\"$r\",\"p\",null,{\"children\":[\"最终，你应该根据 \",[\"$r\",\"code\",null,{\"children\":\"isEditing\"}],\" 的值使用 \",[\"$r\",\"a\",null,{\"href\":\"/learn/conditional-rendering\",\"children\":\"条件渲染\"}],\" 来决定显示还是隐藏输入框。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function EditProfile() {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [firstName, setFirstName] = useState('Jane');\\n  const [lastName, setLastName] = useState('Jacobs');\\n\\n  return (\\n    <form onSubmit={e => {\\n      e.preventDefault();\\n      setIsEditing(!isEditing);\\n    }}>\\n      <label>\\n        First name:{' '}\\n        {isEditing ? (\\n          <input\\n            value={firstName}\\n            onChange={e => {\\n              setFirstName(e.target.value)\\n            }}\\n          />\\n        ) : (\\n          <b>{firstName}</b>\\n        )}\\n      </label>\\n      <label>\\n        Last name:{' '}\\n        {isEditing ? (\\n          <input\\n            value={lastName}\\n            onChange={e => {\\n              setLastName(e.target.value)\\n            }}\\n          />\\n        ) : (\\n          <b>{lastName}</b>\\n        )}\\n      </label>\\n      <button type=\\\"submit\\\">\\n        {isEditing ? 'Save' : 'Edit'} Profile\\n      </button>\\n      <p><i>Hello, {firstName} {lastName}!</i></p>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; margin-bottom: 20px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"这个解决方案与最初命令式的代码相比，它们有什么不同？\"}]]}],[\"$r\",\"h4\",null,{\"id\":\"refactor-the-imperative-solution-without-react\",\"children\":\"不使用 React 去重构命令式的解决方案 \"}],[\"$r\",\"p\",null,{\"children\":\"这是之前的挑战中的没有使用 React 而写的命令式代码：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"function handleFormSubmit(e) {\\n  e.preventDefault();\\n  if (editButton.textContent === 'Edit Profile') {\\n    editButton.textContent = 'Save Profile';\\n    hide(firstNameText);\\n    hide(lastNameText);\\n    show(firstNameInput);\\n    show(lastNameInput);\\n  } else {\\n    editButton.textContent = 'Edit Profile';\\n    hide(firstNameInput);\\n    hide(lastNameInput);\\n    show(firstNameText);\\n    show(lastNameText);\\n  }\\n}\\n\\nfunction handleFirstNameChange() {\\n  firstNameText.textContent = firstNameInput.value;\\n  helloText.textContent = (\\n    'Hello ' +\\n    firstNameInput.value + ' ' +\\n    lastNameInput.value + '!'\\n  );\\n}\\n\\nfunction handleLastNameChange() {\\n  lastNameText.textContent = lastNameInput.value;\\n  helloText.textContent = (\\n    'Hello ' +\\n    firstNameInput.value + ' ' +\\n    lastNameInput.value + '!'\\n  );\\n}\\n\\nfunction hide(el) {\\n  el.style.display = 'none';\\n}\\n\\nfunction show(el) {\\n  el.style.display = '';\\n}\\n\\nlet form = document.getElementById('form');\\nlet editButton = document.getElementById('editButton');\\nlet firstNameInput = document.getElementById('firstNameInput');\\nlet firstNameText = document.getElementById('firstNameText');\\nlet lastNameInput = document.getElementById('lastNameInput');\\nlet lastNameText = document.getElementById('lastNameText');\\nlet helloText = document.getElementById('helloText');\\nform.onsubmit = handleFormSubmit;\\nfirstNameInput.oninput = handleFirstNameChange;\\nlastNameInput.oninput = handleLastNameChange;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"sandbox.config.json hidden\",\"children\":\"{\\n  \\\"hardReloadOnChange\\\": true\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<form id=\\\"form\\\">\\n  <label>\\n    First name:\\n    <b id=\\\"firstNameText\\\">Jane</b>\\n    <input\\n      id=\\\"firstNameInput\\\"\\n      value=\\\"Jane\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <label>\\n    Last name:\\n    <b id=\\\"lastNameText\\\">Jacobs</b>\\n    <input\\n      id=\\\"lastNameInput\\\"\\n      value=\\\"Jacobs\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <button type=\\\"submit\\\" id=\\\"editButton\\\">Edit Profile</button>\\n  <p><i id=\\\"helloText\\\">Hello, Jane Jacobs!</i></p>\\n</form>\\n\\n<style>\\n* { box-sizing: border-box; }\\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\\nlabel { display: block; margin-bottom: 20px; }\\n</style>\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"如果不用 React，你能否将这段代码重构得像 React 版本一样健壮？如果要让它的 state 像 React 版本一样清晰且明确，那么这段代码又会写成怎样的呢？\"}],[\"$r\",\"p\",null,{\"children\":[\"如果你不知道该从哪里入手，下面的代码已经有了大部分的结构。如果你从这里开始的话，只需要在 \",[\"$r\",\"code\",null,{\"children\":\"updateDOM\"}],\" 函数中补充缺失的逻辑即可。（需要时请参考原始代码）\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"let firstName = 'Jane';\\nlet lastName = 'Jacobs';\\nlet isEditing = false;\\n\\nfunction handleFormSubmit(e) {\\n  e.preventDefault();\\n  setIsEditing(!isEditing);\\n}\\n\\nfunction handleFirstNameChange(e) {\\n  setFirstName(e.target.value);\\n}\\n\\nfunction handleLastNameChange(e) {\\n  setLastName(e.target.value);\\n}\\n\\nfunction setFirstName(value) {\\n  firstName = value;\\n  updateDOM();\\n}\\n\\nfunction setLastName(value) {\\n  lastName = value;\\n  updateDOM();\\n}\\n\\nfunction setIsEditing(value) {\\n  isEditing = value;\\n  updateDOM();\\n}\\n\\nfunction updateDOM() {\\n  if (isEditing) {\\n    editButton.textContent = 'Save Profile';\\n    // TODO: show inputs, hide content\\n  } else {\\n    editButton.textContent = 'Edit Profile';\\n    // TODO: hide inputs, show content\\n  }\\n  // TODO: update text labels\\n}\\n\\nfunction hide(el) {\\n  el.style.display = 'none';\\n}\\n\\nfunction show(el) {\\n  el.style.display = '';\\n}\\n\\nlet form = document.getElementById('form');\\nlet editButton = document.getElementById('editButton');\\nlet firstNameInput = document.getElementById('firstNameInput');\\nlet firstNameText = document.getElementById('firstNameText');\\nlet lastNameInput = document.getElementById('lastNameInput');\\nlet lastNameText = document.getElementById('lastNameText');\\nlet helloText = document.getElementById('helloText');\\nform.onsubmit = handleFormSubmit;\\nfirstNameInput.oninput = handleFirstNameChange;\\nlastNameInput.oninput = handleLastNameChange;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"sandbox.config.json hidden\",\"children\":\"{\\n  \\\"hardReloadOnChange\\\": true\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<form id=\\\"form\\\">\\n  <label>\\n    First name:\\n    <b id=\\\"firstNameText\\\">Jane</b>\\n    <input\\n      id=\\\"firstNameInput\\\"\\n      value=\\\"Jane\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <label>\\n    Last name:\\n    <b id=\\\"lastNameText\\\">Jacobs</b>\\n    <input\\n      id=\\\"lastNameInput\\\"\\n      value=\\\"Jacobs\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <button type=\\\"submit\\\" id=\\\"editButton\\\">Edit Profile</button>\\n  <p><i id=\\\"helloText\\\">Hello, Jane Jacobs!</i></p>\\n</form>\\n\\n<style>\\n* { box-sizing: border-box; }\\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\\nlabel { display: block; margin-bottom: 20px; }\\n</style>\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"缺失的逻辑包括切换输入框和内容的显示以及更新标签的内容：\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"let firstName = 'Jane';\\nlet lastName = 'Jacobs';\\nlet isEditing = false;\\n\\nfunction handleFormSubmit(e) {\\n  e.preventDefault();\\n  setIsEditing(!isEditing);\\n}\\n\\nfunction handleFirstNameChange(e) {\\n  setFirstName(e.target.value);\\n}\\n\\nfunction handleLastNameChange(e) {\\n  setLastName(e.target.value);\\n}\\n\\nfunction setFirstName(value) {\\n  firstName = value;\\n  updateDOM();\\n}\\n\\nfunction setLastName(value) {\\n  lastName = value;\\n  updateDOM();\\n}\\n\\nfunction setIsEditing(value) {\\n  isEditing = value;\\n  updateDOM();\\n}\\n\\nfunction updateDOM() {\\n  if (isEditing) {\\n    editButton.textContent = 'Save Profile';\\n    hide(firstNameText);\\n    hide(lastNameText);\\n    show(firstNameInput);\\n    show(lastNameInput);\\n  } else {\\n    editButton.textContent = 'Edit Profile';\\n    hide(firstNameInput);\\n    hide(lastNameInput);\\n    show(firstNameText);\\n    show(lastNameText);\\n  }\\n  firstNameText.textContent = firstName;\\n  lastNameText.textContent = lastName;\\n  helloText.textContent = (\\n    'Hello ' +\\n    firstName + ' ' +\\n    lastName + '!'\\n  );\\n}\\n\\nfunction hide(el) {\\n  el.style.display = 'none';\\n}\\n\\nfunction show(el) {\\n  el.style.display = '';\\n}\\n\\nlet form = document.getElementById('form');\\nlet editButton = document.getElementById('editButton');\\nlet firstNameInput = document.getElementById('firstNameInput');\\nlet firstNameText = document.getElementById('firstNameText');\\nlet lastNameInput = document.getElementById('lastNameInput');\\nlet lastNameText = document.getElementById('lastNameText');\\nlet helloText = document.getElementById('helloText');\\nform.onsubmit = handleFormSubmit;\\nfirstNameInput.oninput = handleFirstNameChange;\\nlastNameInput.oninput = handleLastNameChange;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"sandbox.config.json hidden\",\"children\":\"{\\n  \\\"hardReloadOnChange\\\": true\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<form id=\\\"form\\\">\\n  <label>\\n    First name:\\n    <b id=\\\"firstNameText\\\">Jane</b>\\n    <input\\n      id=\\\"firstNameInput\\\"\\n      value=\\\"Jane\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <label>\\n    Last name:\\n    <b id=\\\"lastNameText\\\">Jacobs</b>\\n    <input\\n      id=\\\"lastNameInput\\\"\\n      value=\\\"Jacobs\\\"\\n      style=\\\"display: none\\\">\\n  </label>\\n  <button type=\\\"submit\\\" id=\\\"editButton\\\">Edit Profile</button>\\n  <p><i id=\\\"helloText\\\">Hello, Jane Jacobs!</i></p>\\n</form>\\n\\n<style>\\n* { box-sizing: border-box; }\\nbody { font-family: sans-serif; margin: 20px; padding: 0; }\\nlabel { display: block; margin-bottom: 20px; }\\n</style>\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"你所写的 \",[\"$r\",\"code\",null,{\"children\":\"updateDOM\"}],\" 函数展示了当你设置 state 时，React 在幕后都做了什么。（而且 React 不会修改对应 state 没改变的 DOM）\"]}]]}]]}]]","meta":{"title":"用 State 响应输入","translators":["BBboy01","KimYangOfCat","TinaaaaP"]}},"__N_SSG":true}