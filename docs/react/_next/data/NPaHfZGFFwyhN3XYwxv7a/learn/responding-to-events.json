{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#adding-event-handlers\",\"depth\":2,\"text\":\"添加事件处理函数 \"},{\"url\":\"#reading-props-in-event-handlers\",\"depth\":3,\"text\":\"在事件处理函数中读取 props \"},{\"url\":\"#passing-event-handlers-as-props\",\"depth\":3,\"text\":\"将事件处理函数作为 props 传递 \"},{\"url\":\"#naming-event-handler-props\",\"depth\":3,\"text\":\"命名事件处理函数 prop \"},{\"url\":\"#event-propagation\",\"depth\":2,\"text\":\"事件传播 \"},{\"url\":\"#stopping-propagation\",\"depth\":3,\"text\":\"阻止传播 \"},{\"url\":\"#passing-handlers-as-alternative-to-propagation\",\"depth\":3,\"text\":\"传递处理函数作为事件传播的替代方案 \"},{\"url\":\"#preventing-default-behavior\",\"depth\":3,\"text\":\"阻止默认行为 \"},{\"url\":\"#can-event-handlers-have-side-effects\",\"depth\":2,\"text\":\"事件处理函数可以包含副作用吗？ \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"8\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"使用 React 可以在 JSX 中添加 \",[\"$r\",\"strong\",null,{\"children\":\"事件处理函数\"}],\"。其中事件处理函数为自定义函数，它将在响应交互（如点击、悬停、表单输入框获得焦点等）时触发。\"]}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"编写事件处理函数的不同方法\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何从父组件传递事件处理逻辑\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"事件如何传播以及如何停止它们\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"adding-event-handlers\",\"children\":\"添加事件处理函数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如需添加一个事件处理函数，你需要先定义一个函数，然后 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component\",\"children\":\"将其作为 prop 传入\"}],\" 合适的 JSX 标签。例如，这里有一个没绑定任何事件的按钮：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Button() {\\n  return (\\n    <button>\\n      未绑定任何事件\\n    </button>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"14\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"按照如下三个步骤，即可让它在用户点击时显示消息：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件 \",[\"$r\",\"strong\",null,{\"children\":\"内部\"}],\" 声明一个名为 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 的函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"实现函数内部的逻辑（使用 \",[\"$r\",\"code\",null,{\"children\":\"alert\"}],\" 来显示消息）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"添加 \",[\"$r\",\"code\",null,{\"children\":\"onClick={handleClick}\"}],\" 到 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" JSX 中。\"]}],\"\\n\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Button() {\\n  function handleClick() {\\n    alert('你点击了我！');\\n  }\\n\\n  return (\\n    <button onClick={handleClick}>\\n      点我\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"38\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以定义 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数然后 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component\",\"children\":\"将其作为 prop 传入\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\"。其中 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 是一个 \",[\"$r\",\"strong\",null,{\"children\":\"事件处理函数\"}],\" 。事件处理函数有如下特点:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"通常在你的组件 \",[\"$r\",\"strong\",null,{\"children\":\"内部\"}],\" 定义。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"名称以 \",[\"$r\",\"code\",null,{\"children\":\"handle\"}],\" 开头，后跟事件名称。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"blockquote\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"按照惯例，通常将事件处理程序命名为 \",[\"$r\",\"code\",null,{\"children\":\"handle\"}],\"，后接事件名。你会经常看到 \",[\"$r\",\"code\",null,{\"children\":\"onClick={handleClick}\"}],\"，\",[\"$r\",\"code\",null,{\"children\":\"onMouseEnter={handleMouseEnter}\"}],\" 等。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"或者，你也可以在 JSX 中定义一个内联的事件处理函数：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"<button onClick={function handleClick() {\\n  alert('你点击了我！');\\n}}>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"或者，直接使用更为简洁箭头函数：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"<button onClick={() => {\\n  alert('你点击了我！');\\n}}>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"以上所有方式都是等效的。当函数体较短时，内联事件处理函数会很方便。\"}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"传递给事件处理函数的函数应直接传递，而非调用。例如：\"}],[\"$r\",\"table\",null,{\"children\":[[\"$r\",\"thead\",null,{\"children\":[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"th\",null,{\"children\":\"传递一个函数（正确）\"}],[\"$r\",\"th\",null,{\"children\":\"调用一个函数（错误）\"}]]}]}],[\"$r\",\"tbody\",null,{\"children\":[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"td\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"<button onClick={handleClick}>\"}]}],[\"$r\",\"td\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"<button onClick={handleClick()}>\"}]}]]}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"区别很微妙。在第一个示例中，\",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数作为 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 事件处理函数传递。这会让 React 记住它，并且只在用户点击按钮时调用你的函数。\"]}],[\"$r\",\"p\",null,{\"children\":[\"在第二个示例中，\",[\"$r\",\"code\",null,{\"children\":\"handleClick()\"}],\" 中最后的 \",[\"$r\",\"code\",null,{\"children\":\"()\"}],\" 会在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/render-and-commit\",\"children\":\"渲染\"}],\" 过程中 \",[\"$r\",\"strong\",null,{\"children\":\"立即\"}],\" 触发函数，即使没有任何点击。这是因为在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/javascript-in-jsx-with-curly-braces\",\"children\":[\"JSX \",[\"$r\",\"code\",null,{\"children\":\"{\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"}\"}]]}],\" 之间的 JavaScript 会立即执行。\"]}],[\"$r\",\"p\",null,{\"children\":\"当你编写内联代码时，同样的陷阱可能会以不同的方式出现：\"}],[\"$r\",\"table\",null,{\"children\":[[\"$r\",\"thead\",null,{\"children\":[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"th\",null,{\"children\":\"传递一个函数（正确）\"}],[\"$r\",\"th\",null,{\"children\":\"调用一个函数（错误）\"}]]}]}],[\"$r\",\"tbody\",null,{\"children\":[\"$r\",\"tr\",null,{\"children\":[[\"$r\",\"td\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"<button onClick={() => alert('...')}>\"}]}],[\"$r\",\"td\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"<button onClick={alert('...')}>\"}]}]]}]}]]}],[\"$r\",\"p\",null,{\"children\":\"如果按如下方式传递内联代码，并不会在点击时触发，而是会在每次组件渲染时触发：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"// 这个 alert 在组件渲染时触发，而不是点击时触发！\\n<button onClick={alert('你点击了我！')}>\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"如果你想要定义内联事件处理函数，请将其包装在匿名函数中，如下所示：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-jsx\",\"children\":\"<button onClick={() => alert('你点击了我！')}>\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"这里创建了一个稍后调用的函数，而不会在每次渲染时执行其内部代码。\"}],[\"$r\",\"p\",null,{\"children\":\"在这两种情况下，你都应该传递一个函数：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<button onClick={handleClick}>\"}],\" 传递了 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<button onClick={() => alert('...')}>\"}],\" 传递了 \",[\"$r\",\"code\",null,{\"children\":\"() => alert('...')\"}],\" 函数。\"]}],\"\\n\"]}],[\"$r\",\"blockquote\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://zh.javascript.info/arrow-functions-basics\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"了解更多箭头函数的信息\"}],\"。\"]}],\"\\n\"]}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-props-in-event-handlers\",\"children\":\"在事件处理函数中读取 props \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于事件处理函数声明于组件内部，因此它们可以直接访问组件的 props。示例中的按钮，当点击时会弹出带有 \",[\"$r\",\"code\",null,{\"children\":\"message\"}],\" prop 的 alert：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function AlertButton({ message, children }) {\\n  return (\\n    <button onClick={() => alert(message)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nexport default function Toolbar() {\\n  return (\\n    <div>\\n      <AlertButton message=\\\"正在播放！\\\">\\n        播放电影\\n      </AlertButton>\\n      <AlertButton message=\\\"正在上传！\\\">\\n        上传图片\\n      </AlertButton>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"48\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"此处有两个按钮，会展示不同的消息。你可以尝试更改传递给它们的消息。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-event-handlers-as-props\",\"children\":\"将事件处理函数作为 props 传递 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常，我们会在父组件中定义子组件的事件处理函数。比如：置于不同位置的 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件，可能最终执行的功能也不同 —— 也许是播放电影，也许是上传图片。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为此，将组件从父组件接收的 prop 作为事件处理函数传递，如下所示：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Button({ onClick, children }) {\\n  return (\\n    <button onClick={onClick}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nfunction PlayButton({ movieName }) {\\n  function handlePlayClick() {\\n    alert(`正在播放 ${movieName}！`);\\n  }\\n\\n  return (\\n    <Button onClick={handlePlayClick}>\\n      播放 \\\"{movieName}\\\"\\n    </Button>\\n  );\\n}\\n\\nfunction UploadButton() {\\n  return (\\n    <Button onClick={() => alert('正在上传！')}>\\n      上传图片\\n    </Button>\\n  );\\n}\\n\\nexport default function Toolbar() {\\n  return (\\n    <div>\\n      <PlayButton movieName=\\\"魔女宅急便\\\" />\\n      <UploadButton />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"66\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"示例中，\",[\"$r\",\"code\",null,{\"children\":\"Toolbar\"}],\" 组件渲染了一个 \",[\"$r\",\"code\",null,{\"children\":\"PlayButton\"}],\" 组件和 \",[\"$r\",\"code\",null,{\"children\":\"UploadButton\"}],\" 组件：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"PlayButton\"}],\" 将 \",[\"$r\",\"code\",null,{\"children\":\"handlePlayClick\"}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" prop 传入 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件内部。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"UploadButton\"}],\" 将 \",[\"$r\",\"code\",null,{\"children\":\"() => alert('正在上传！')\"}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" prop 传入 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件内部。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最后，你的 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件接收一个名为 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 的 prop。它直接将这个 prop 以 \",[\"$r\",\"code\",null,{\"children\":\"onClick={onClick}\"}],\" 方式传递给浏览器内置的 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\"。当点击按钮时，React 会调用传入的函数。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你遵循某个 \",[\"$r\",\"a\",null,{\"href\":\"https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"设计系统\"}],\" 时，按钮之类的组件通常会包含样式，但不会指定行为。而 \",[\"$r\",\"code\",null,{\"children\":\"PlayButton\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"UploadButton\"}],\" 之类的组件则会向下传递事件处理函数。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"naming-event-handler-props\",\"children\":\"命名事件处理函数 prop \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"内置组件（\",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\"）仅支持 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#common-props\",\"children\":\"浏览器事件名称\"}],\"，例如 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\"。但是，当你构建自己的组件时，你可以按你个人喜好命名事件处理函数的 prop。\"]}],\"\\n\",[\"$r\",\"blockquote\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"按照惯例，事件处理函数 props 应该以 \",[\"$r\",\"code\",null,{\"children\":\"on\"}],\" 开头，后跟一个大写字母。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，\",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" prop 本来也可以被命名为 \",[\"$r\",\"code\",null,{\"children\":\"onSmash\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Button({ onSmash, children }) {\\n  return (\\n    <button onClick={onSmash}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <div>\\n      <Button onSmash={() => alert('正在播放！')}>\\n        播放电影\\n      </Button>\\n      <Button onSmash={() => alert('正在上传！')}>\\n        上传图片\\n      </Button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"上述示例中，\",[\"$r\",\"code\",null,{\"children\":\"<button onClick={onSmash}>\"}],\" 代表浏览器内置的 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\"（小写）仍然需要使用 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" prop，而自定义的 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件接收到的 prop 名称可由你决定！\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你的组件支持多种交互时，你可以根据不同的应用程序命名事件处理函数 prop。例如，一个 \",[\"$r\",\"code\",null,{\"children\":\"Toolbar\"}],\" 组件接收 \",[\"$r\",\"code\",null,{\"children\":\"onPlayMovie\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"onUploadImage\"}],\" 两个事件处理函数：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function App() {\\n  return (\\n    <Toolbar\\n      onPlayMovie={() => alert('正在播放！')}\\n      onUploadImage={() => alert('正在上传！')}\\n    />\\n  );\\n}\\n\\nfunction Toolbar({ onPlayMovie, onUploadImage }) {\\n  return (\\n    <div>\\n      <Button onClick={onPlayMovie}>\\n        播放电影\\n      </Button>\\n      <Button onClick={onUploadImage}>\\n        上传图片\\n      </Button>\\n    </div>\\n  );\\n}\\n\\nfunction Button({ onClick, children }) {\\n  return (\\n    <button onClick={onClick}>\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-right: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"84\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，\",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 组件并不需要知道 \",[\"$r\",\"code\",null,{\"children\":\"Toolbar\"}],\" 将会对 \",[\"$r\",\"code\",null,{\"children\":\"onPlayMovie\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"onUploadImage\"}],\" 做 \",[\"$r\",\"strong\",null,{\"children\":\"什么\"}],\" 。上述示例是 \",[\"$r\",\"code\",null,{\"children\":\"Toolbar\"}],\" 的实现细节。其中，\",[\"$r\",\"code\",null,{\"children\":\"Toolbar\"}],\" 将它们作为 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理函数传递给了 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件，其实还可以通过键盘快捷键来触发它们。根据应用程序特定的交互方式（如 \",[\"$r\",\"code\",null,{\"children\":\"onPlayMovie\"}],\"）来命名 prop ，可以让你灵活地更改以后使用它们的方式。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"确保为事件处理程序使用适当的 HTML 标签。例如，要处理点击事件，请使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<button onClick={handleClick}>\"}]}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"<div onClick={handleClick}>\"}],\"。使用真正的浏览器 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 启用内置的浏览器行为，如键盘导航。如果你不喜欢按钮的默认浏览器样式，并且想让它看起来更像一个链接或不同的 UI 元素，你可以使用 CSS 来实现。\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Learn/Accessibility/HTML\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"了解有关编写无障碍标签的更多信息\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"event-propagation\",\"children\":\"事件传播 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"事件处理函数还将捕获任何来自子组件的事件。通常，我们会说事件会沿着树向上“冒泡”或“传播”：它从事件发生的地方开始，然后沿着树向上传播。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"下面这个 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 包含两个按钮。\",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 和每个按钮都有自己的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理函数。你认为点击按钮时会触发哪些处理函数？\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Toolbar() {\\n  return (\\n    <div className=\\\"Toolbar\\\" onClick={() => {\\n      alert('你点击了 toolbar ！');\\n    }}>\\n      <button onClick={() => alert('正在播放！')}>\\n        播放电影\\n      </button>\\n      <button onClick={() => alert('正在上传！')}>\\n        上传图片\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".Toolbar {\\n  background: #aaa;\\n  padding: 5px;\\n}\\nbutton { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"96\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你点击任一按钮，它自身的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 将首先执行，然后父级 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 会接着执行。因此会出现两条消息。如果你点击 toolbar 本身，将只有父级 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 会执行。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"在 React 中所有事件都会传播，除了 \",[\"$r\",\"code\",null,{\"children\":\"onScroll\"}],\"，它仅适用于你附加到的 JSX 标签。\"]}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"stopping-propagation\",\"children\":\"阻止传播 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"事件处理函数接收一个 \",[\"$r\",\"strong\",null,{\"children\":\"事件对象\"}],\" 作为唯一的参数。按照惯例，它通常被称为 \",[\"$r\",\"code\",null,{\"children\":\"e\"}],\" ，代表 “event”（事件）。你可以使用此对象来读取有关事件的信息。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个事件对象还允许你阻止传播。如果你想阻止一个事件到达父组件，你需要像下面 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件那样调用 \",[\"$r\",\"code\",null,{\"children\":\"e.stopPropagation()\"}],\" ：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Button({ onClick, children }) {\\n  return (\\n    <button onClick={e => {\\n      e.stopPropagation();\\n      onClick();\\n    }}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nexport default function Toolbar() {\\n  return (\\n    <div className=\\\"Toolbar\\\" onClick={() => {\\n      alert('你点击了 toolbar ！');\\n    }}>\\n      <Button onClick={() => alert('正在播放！')}>\\n        播放电影\\n      </Button>\\n      <Button onClick={() => alert('正在上传！')}>\\n        上传图片\\n      </Button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".Toolbar {\\n  background: #aaa;\\n  padding: 5px;\\n}\\nbutton { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"120\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你点击按钮时：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React 调用了传递给 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"定义在 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 中的处理函数执行了如下操作：\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"e.stopPropagation()\"}],\"，阻止事件进一步冒泡。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 函数，它是从 \",[\"$r\",\"code\",null,{\"children\":\"Toolbar\"}],\" 组件传递过来的 prop。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"Toolbar\"}],\" 组件中定义的函数，显示按钮对应的 alert。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"由于传播被阻止，父级 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理函数不会执行。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于调用了 \",[\"$r\",\"code\",null,{\"children\":\"e.stopPropagation()\"}],\"，点击按钮现在将只显示一个 alert（来自 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\"），而并非两个（分别来自 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 和父级 toolbar \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\"）。点击按钮与点击周围的 toolbar 不同，因此阻止传播对这个 UI 是有意义的。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"capture-phase-events\",\"children\":\"捕获阶段事件 \"}],[\"$r\",\"p\",null,{\"children\":[\"极少数情况下，你可能需要捕获子元素上的所有事件，\",[\"$r\",\"strong\",null,{\"children\":\"即便它们阻止了传播\"}],\"。例如，你可能想对每次点击进行埋点记录，传播逻辑暂且不论。那么你可以通过在事件名称末尾添加 \",[\"$r\",\"code\",null,{\"children\":\"Capture\"}],\" 来实现这一点：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<div onClickCapture={() => { /* 这会首先执行 */ }}>\\n  <button onClick={e => e.stopPropagation()} />\\n  <button onClick={e => e.stopPropagation()} />\\n</div>\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"每个事件分三个阶段传播：\"}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它向下传播，调用所有的 \",[\"$r\",\"code\",null,{\"children\":\"onClickCapture\"}],\" 处理函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它执行被点击元素的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它向上传播，调用所有的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 处理函数。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"捕获事件对于路由或数据分析之类的代码很有用，但你可能不会在应用程序代码中使用它们。\"}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-handlers-as-alternative-to-propagation\",\"children\":\"传递处理函数作为事件传播的替代方案 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意，此处的点击事件处理函数先执行了一行代码，\",[\"$r\",\"strong\",null,{\"children\":\"然后\"}],\"调用了父组件传递的 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" prop：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,5}\",\"children\":\"function Button({ onClick, children }) {\\n  return (\\n    <button onClick={e => {\\n      e.stopPropagation();\\n      onClick();\\n    }}>\\n      {children}\\n    </button>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你也可以在调用父元素 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 函数之前，向这个处理函数添加更多代码。此模式是事件传播的另一种 \",[\"$r\",\"strong\",null,{\"children\":\"替代方案\"}],\" 。它让子组件处理事件，同时也让父组件指定一些额外的行为。与事件传播不同，它并非自动。但使用这种模式的好处是你可以清楚地追踪因某个事件的触发而执行的整条代码链。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你依赖于事件传播，而且很难追踪哪些处理程序在执行，及其执行的原因，可以尝试这种方法。\"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"preventing-default-behavior\",\"children\":\"阻止默认行为 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"某些浏览器事件具有与事件相关联的默认行为。例如，点击 \",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" 表单内部的按钮会触发表单提交事件，默认情况下将重新加载整个页面：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Signup() {\\n  return (\\n    <form onSubmit={() => alert('提交表单！')}>\\n      <input />\\n      <button>发送</button>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-left: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"124\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以调用事件对象中的 \",[\"$r\",\"code\",null,{\"children\":\"e.preventDefault()\"}],\" 来阻止这种情况发生：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Signup() {\\n  return (\\n    <form onSubmit={e => {\\n      e.preventDefault();\\n      alert('提交表单！');\\n    }}>\\n      <input />\\n      <button>发送</button>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"button { margin-left: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"138\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"不要混淆 \",[\"$r\",\"code\",null,{\"children\":\"e.stopPropagation()\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"e.preventDefault()\"}],\"。它们都很有用，但二者并不相关：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/docs/Web/API/Event/stopPropagation\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"e.stopPropagation()\"}]}],\" 阻止触发绑定在外层标签上的事件处理函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/docs/Web/API/Event/preventDefault\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"e.preventDefault()\"}]}],\" 阻止少数事件的默认浏览器行为。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"can-event-handlers-have-side-effects\",\"children\":\"事件处理函数可以包含副作用吗？ \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当然可以！事件处理函数是执行副作用的最佳位置。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"与渲染函数不同，事件处理函数不需要是 \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"纯函数\"}],\"，因此它是用来 \",[\"$r\",\"em\",null,{\"children\":\"更改\"}],\" 某些值的绝佳位置。例如，更改输入框的值以响应键入，或者更改列表以响应按钮的触发。但是，为了更改某些信息，你首先需要某种方式存储它。在 React 中，这是通过 \",[\"$r\",\"a\",null,{\"href\":\"/learn/state-a-components-memory\",\"children\":\"state（组件的记忆）\"}],\" 来完成的。你将在下一章节了解所有相关信息。\"]}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你可以通过将函数作为 prop 传递给元素如 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 来处理事件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"必须传递事件处理函数，\",[\"$r\",\"strong\",null,{\"children\":\"而非函数调用！\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onClick={handleClick}\"}],\" ，不是 \",[\"$r\",\"code\",null,{\"children\":\"onClick={handleClick()}\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以单独或者内联定义事件处理函数。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"事件处理函数在组件内部定义，所以它们可以访问 props。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以在父组件中定义一个事件处理函数，并将其作为 prop 传递给子组件。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"你可以根据特定于应用程序的名称定义事件处理函数的 prop。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"事件会向上传播。通过事件的第一个参数调用 \",[\"$r\",\"code\",null,{\"children\":\"e.stopPropagation()\"}],\" 来防止这种情况。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"事件可能具有不需要的浏览器默认行为。调用 \",[\"$r\",\"code\",null,{\"children\":\"e.preventDefault()\"}],\" 来阻止这种情况。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"从子组件显式调用事件处理函数 prop 是事件传播的另一种优秀替代方案。\"}],\"\\n\"]}]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"fix-an-event-handler\",\"children\":\"修复事件处理函数 \"}],[\"$r\",\"p\",null,{\"children\":[\"点击此按钮理论上应该在黑白主题之间切换页面背景。然而，当你点击它时，什么也没有发生。解决这个问题。（无需担心 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 的内部逻辑。）\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function LightSwitch() {\\n  function handleClick() {\\n    let bodyStyle = document.body.style;\\n    if (bodyStyle.backgroundColor === 'black') {\\n      bodyStyle.backgroundColor = 'white';\\n    } else {\\n      bodyStyle.backgroundColor = 'black';\\n    }\\n  }\\n\\n  return (\\n    <button onClick={handleClick()}>\\n      切换背景\\n    </button>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"这是由于 \",[\"$r\",\"code\",null,{\"children\":\"<button onClick={handleClick()}>\"}],\" 在渲染过程中 \",[\"$r\",\"em\",null,{\"children\":\"调用\"}],\" 了 \",[\"$r\",\"code\",null,{\"children\":\"handleClick\"}],\" 函数，而没有将其进行 \",[\"$r\",\"em\",null,{\"children\":\"传递\"}],\"。移除 \",[\"$r\",\"code\",null,{\"children\":\"()\"}],\" 调用改为 \",[\"$r\",\"code\",null,{\"children\":\"<button onClick={handleClick}>\"}],\" 进而修复问题：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function LightSwitch() {\\n  function handleClick() {\\n    let bodyStyle = document.body.style;\\n    if (bodyStyle.backgroundColor === 'black') {\\n      bodyStyle.backgroundColor = 'white';\\n    } else {\\n      bodyStyle.backgroundColor = 'black';\\n    }\\n  }\\n\\n  return (\\n    <button onClick={handleClick}>\\n      切换背景\\n    </button>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"p\",null,{\"children\":[\"或者，你可以把函数调用包裹在另一个函数内，例如 \",[\"$r\",\"code\",null,{\"children\":\"<button onClick={() => handleClick()}>\"}],\" ：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function LightSwitch() {\\n  function handleClick() {\\n    let bodyStyle = document.body.style;\\n    if (bodyStyle.backgroundColor === 'black') {\\n      bodyStyle.backgroundColor = 'white';\\n    } else {\\n      bodyStyle.backgroundColor = 'black';\\n    }\\n  }\\n\\n  return (\\n    <button onClick={() => handleClick()}>\\n      切换背景\\n    </button>\\n  );\\n}\\n\"}]}]}]]}],[\"$r\",\"h4\",null,{\"id\":\"wire-up-the-events\",\"children\":\"关联事件 \"}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"ColorSwitch\"}],\" 组件渲染了一个按钮。它应该改变页面颜色。将它与从父组件接收的 \",[\"$r\",\"code\",null,{\"children\":\"onChangeColor\"}],\" 事件处理函数关联，以便在点击按钮时改变颜色。\"]}],[\"$r\",\"p\",null,{\"children\":[\"如此操作后，你会发现点击按钮时，也会增加页面点击计数器的值。而编写父组件的同事坚持认为 \",[\"$r\",\"code\",null,{\"children\":\"onChangeColor\"}],\" 不应该使得计数器的值递增。应该如何处理？修改问题使得点击按钮 \",[\"$r\",\"strong\",null,{\"children\":\"只\"}],\" 改变颜色，并且 \",[\"$r\",\"strong\",null,{\"children\":\"不\"}],\" 增加计数器。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ColorSwitch.js active\",\"children\":\"export default function ColorSwitch({\\n  onChangeColor\\n}) {\\n  return (\\n    <button>\\n      改变颜色\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\nimport ColorSwitch from './ColorSwitch.js';\\n\\nexport default function App() {\\n  const [clicks, setClicks] = useState(0);\\n\\n  function handleClickOutside() {\\n    setClicks(c => c + 1);\\n  }\\n\\n  function getRandomLightColor() {\\n    let r = 150 + Math.round(100 * Math.random());\\n    let g = 150 + Math.round(100 * Math.random());\\n    let b = 150 + Math.round(100 * Math.random());\\n    return `rgb(${r}, ${g}, ${b})`;\\n  }\\n\\n  function handleChangeColor() {\\n    let bodyStyle = document.body.style;\\n    bodyStyle.backgroundColor = getRandomLightColor();\\n  }\\n\\n  return (\\n    <div style={{ width: '100%', height: '100%' }} onClick={handleClickOutside}>\\n      <ColorSwitch onChangeColor={handleChangeColor} />\\n      <br />\\n      <br />\\n      <h2>页面点击次数：{clicks}</h2>\\n    </div>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"首先，你需要添加事件处理函数，例如 \",[\"$r\",\"code\",null,{\"children\":\"<button onClick={onChangeColor}>\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"然而，同时又引入了计数器递增的问题。正如你的同事所坚持的那样，\",[\"$r\",\"code\",null,{\"children\":\"onChangeColor\"}],\" 并不符合预期，这主要是因为事件发生向上传播，并且上层的某些事件处理函数执行了递增操作。为了解决这个问题，你需要阻止事件冒泡。但是不要忘记调用 \",[\"$r\",\"code\",null,{\"children\":\"onChangeColor\"}],\"。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ColorSwitch.js active\",\"children\":\"export default function ColorSwitch({\\n  onChangeColor\\n}) {\\n  return (\\n    <button onClick={e => {\\n      e.stopPropagation();\\n      onChangeColor();\\n    }}>\\n      改变颜色\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\nimport ColorSwitch from './ColorSwitch.js';\\n\\nexport default function App() {\\n  const [clicks, setClicks] = useState(0);\\n\\n  function handleClickOutside() {\\n    setClicks(c => c + 1);\\n  }\\n\\n  function getRandomLightColor() {\\n    let r = 150 + Math.round(100 * Math.random());\\n    let g = 150 + Math.round(100 * Math.random());\\n    let b = 150 + Math.round(100 * Math.random());\\n    return `rgb(${r}, ${g}, ${b})`;\\n  }\\n\\n  function handleChangeColor() {\\n    let bodyStyle = document.body.style;\\n    bodyStyle.backgroundColor = getRandomLightColor();\\n  }\\n\\n  return (\\n    <div style={{ width: '100%', height: '100%' }} onClick={handleClickOutside}>\\n      <ColorSwitch onChangeColor={handleChangeColor} />\\n      <br />\\n      <br />\\n      <h2>页面点击次数：{clicks}</h2>\\n    </div>\\n  );\\n}\\n\"}]}]]}]]}]]}]]","meta":{"title":"响应事件","translators":["Jiacheng787","QC-L","Neo42","Zhou Chenyang"]}},"__N_SSG":true}