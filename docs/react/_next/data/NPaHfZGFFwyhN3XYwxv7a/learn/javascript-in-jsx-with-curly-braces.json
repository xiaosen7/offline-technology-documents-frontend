{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#passing-strings-with-quotes\",\"depth\":2,\"text\":\"使用引号传递字符串 \"},{\"url\":\"#using-curly-braces-a-window-into-the-javascript-world\",\"depth\":2,\"text\":\"使用大括号：一扇进入 JavaScript 世界的窗户 \"},{\"url\":\"#where-to-use-curly-braces\",\"depth\":3,\"text\":\"可以在哪使用大括号 \"},{\"url\":\"#using-double-curlies-css-and-other-objects-in-jsx\",\"depth\":2,\"text\":\"使用 “双大括号”：JSX 中的 CSS 和 对象 \"},{\"url\":\"#more-fun-with-javascript-objects-and-curly-braces\",\"depth\":2,\"text\":\"JavaScript 对象和大括号的更多可能 \"},{\"url\":\"#recap\",\"depth\":2,\"text\":\"Recap\"},{\"url\":\"#challenges\",\"depth\":2,\"text\":\"Challenges\"}]","content":"[[\"$r\",\"MaxWidth\",\"8\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"JSX 允许你在 JavaScript 中编写类似 HTML 的标签，从而使渲染的逻辑和内容可以写在一起。有时候，你可能想要在标签中添加一些 JavaScript 逻辑或者引用动态的属性。这种情况下，你可以在 JSX 的大括号内来编写 JavaScript。\"}]}],\"\\n\",[\"$r\",\"YouWillLearn\",null,{\"children\":[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如何使用引号传递字符串\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在 JSX 的大括号内引用 JavaScript 变量\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在 JSX 的大括号内调用 JavaScript 函数\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在 JSX 的大括号内使用 JavaScript 对象\"}],\"\\n\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"passing-strings-with-quotes\",\"children\":\"使用引号传递字符串 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你想把一个字符串属性传递给 JSX 时，把它放到单引号或双引号中：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Avatar() {\\n  return (\\n    <img\\n      className=\\\"avatar\\\"\\n      src=\\\"https://i.imgur.com/7vQD0fPs.jpg\\\"\\n      alt=\\\"Gregorio Y. Zara\\\"\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".avatar { border-radius: 50%; height: 90px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"14\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里的 \",[\"$r\",\"code\",null,{\"children\":\"\\\"https://i.imgur.com/7vQD0fPs.jpg\\\"\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"\\\"Gregorio Y. Zara\\\"\"}],\" 就是被作为字符串传递的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是如果你想要动态地指定 \",[\"$r\",\"code\",null,{\"children\":\"src\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"alt\"}],\" 的值呢？你可以 \",[\"$r\",\"strong\",null,{\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"{\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"}\"}],\" 替代 \",[\"$r\",\"code\",null,{\"children\":\"\\\"\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"\\\"\"}],\" 以使用 JavaScript 变量\"]}],\" ：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function Avatar() {\\n  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';\\n  const description = 'Gregorio Y. Zara';\\n  return (\\n    <img\\n      className=\\\"avatar\\\"\\n      src={avatar}\\n      alt={description}\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".avatar { border-radius: 50%; height: 90px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"22\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意 \",[\"$r\",\"code\",null,{\"children\":\"className=\\\"avatar\\\"\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"src={avatar}\"}],\" 之间的区别，\",[\"$r\",\"code\",null,{\"children\":\"className=\\\"avatar\\\"\"}],\" 指定了一个就叫 \",[\"$r\",\"code\",null,{\"children\":\"\\\"avatar\\\"\"}],\" 的使图片在样式上变圆的 CSS 类名，而 \",[\"$r\",\"code\",null,{\"children\":\"src={avatar}\"}],\" 这种写法会去读取 JavaScript 中 \",[\"$r\",\"code\",null,{\"children\":\"avatar\"}],\" 这个变量的值。这是因为大括号可以使你直接在标签中使用 JavaScript！\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"using-curly-braces-a-window-into-the-javascript-world\",\"children\":\"使用大括号：一扇进入 JavaScript 世界的窗户 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"JSX 是一种编写 JavaScript 的特殊方式。这为在大括号 \",[\"$r\",\"code\",null,{\"children\":\"{ }\"}],\" 中使用 JavaScript 带来了可能。下面的示例中声明了科学家的名字，\",[\"$r\",\"code\",null,{\"children\":\"name\"}],\"，然后在 \",[\"$r\",\"code\",null,{\"children\":\"<h1>\"}],\" 后的大括号内嵌入它：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function TodoList() {\\n  const name = 'Gregorio Y. Zara';\\n  return (\\n    <h1>{name}'s To Do List</h1>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"28\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"试着将 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" 的值从 \",[\"$r\",\"code\",null,{\"children\":\"'Gregorio Y. Zara'\"}],\" 更改成 \",[\"$r\",\"code\",null,{\"children\":\"'Hedy Lamarr'\"}],\"。看看这个 To Do List 的标题将如何变化？\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"大括号内的任何 JavaScript 表达式都能正常运行，包括像 \",[\"$r\",\"code\",null,{\"children\":\"formatDate()\"}],\" 这样的函数调用：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const today = new Date();\\n\\nfunction formatDate(date) {\\n  return new Intl.DateTimeFormat(\\n    'zh-CN',\\n    { weekday: 'long' }\\n  ).format(date);\\n}\\n\\nexport default function TodoList() {\\n  return (\\n    <h1>To Do List for {formatDate(today)}</h1>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"42\",{\"children\":[\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"where-to-use-curly-braces\",\"children\":\"可以在哪使用大括号 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在 JSX 中，只能在以下两种场景中使用大括号：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"用作 JSX 标签内的\",[\"$r\",\"strong\",null,{\"children\":\"文本\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"<h1>{name}'s To Do List</h1>\"}],\" 是有效的，但是 \",[\"$r\",\"code\",null,{\"children\":\"<{tag}>Gregorio Y. Zara's To Do List</{tag}>\"}],\" 无效。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"用作紧跟在 \",[\"$r\",\"code\",null,{\"children\":\"=\"}],\" 符号后的 \",[\"$r\",\"strong\",null,{\"children\":\"属性\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"src={avatar}\"}],\" 会读取 \",[\"$r\",\"code\",null,{\"children\":\"avatar\"}],\" 变量，但是 \",[\"$r\",\"code\",null,{\"children\":\"src=\\\"{avatar}\\\"\"}],\" 只会传一个字符串 \",[\"$r\",\"code\",null,{\"children\":\"{avatar}\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"using-double-curlies-css-and-other-objects-in-jsx\",\"children\":\"使用 “双大括号”：JSX 中的 CSS 和 对象 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"除了字符串、数字和其它 JavaScript 表达式，你甚至可以在 JSX 中传递对象。对象也用大括号表示，例如 \",[\"$r\",\"code\",null,{\"children\":\"{ name: \\\"Hedy Lamarr\\\", inventions: 5 }\"}],\"。因此，为了能在 JSX 中传递，你必须用另一对额外的大括号包裹对象：\",[\"$r\",\"code\",null,{\"children\":\"person={{ name: \\\"Hedy Lamarr\\\", inventions: 5 }}\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可能在 JSX 的内联 CSS 样式中就已经见过这种写法了。React 不要求你使用内联样式（使用 CSS 类就能满足大部分情况）。但是当你需要内联样式的时候，你可以给 \",[\"$r\",\"code\",null,{\"children\":\"style\"}],\" 属性传递一个对象：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function TodoList() {\\n  return (\\n    <ul style={{\\n      backgroundColor: 'black',\\n      color: 'pink'\\n    }}>\\n      <li>Improve the videophone</li>\\n      <li>Prepare aeronautics lectures</li>\\n      <li>Work on the alcohol-fuelled engine</li>\\n    </ul>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nul { padding: 20px 20px 20px 40px; margin: 0; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"58\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"试着更改一下 \",[\"$r\",\"code\",null,{\"children\":\"backgroundColor\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"color\"}],\" 的值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你写成这样时，你可以很清楚地看到大括号里包着的对象：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-5}\",\"children\":\"<ul style={\\n  {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n}>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"所以当你下次在 JSX 中看到 \",[\"$r\",\"code\",null,{\"children\":\"{{\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"}}\"}],\"时，就知道它只不过是包在大括号里的一个对象罢了！\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"内联 \",[\"$r\",\"code\",null,{\"children\":\"style\"}],\" 属性 使用驼峰命名法编写。例如，HTML \",[\"$r\",\"code\",null,{\"children\":\"<ul style=\\\"background-color: black\\\">\"}],\" 在你的组件里应该写成 \",[\"$r\",\"code\",null,{\"children\":\"<ul style={{ backgroundColor: 'black' }}>\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"more-fun-with-javascript-objects-and-curly-braces\",\"children\":\"JavaScript 对象和大括号的更多可能 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以将多个表达式合并到一个对象中，在 JSX 的大括号内分别使用它们：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const person = {\\n  name: 'Gregorio Y. Zara',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person.name}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src=\\\"https://i.imgur.com/7vQD0fPs.jpg\\\"\\n        alt=\\\"Gregorio Y. Zara\\\"\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; height: 90px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个示例中，\",[\"$r\",\"code\",null,{\"children\":\"person\"}],\" JavaScript 对象包含 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" 中存储的字符串和 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 对象：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const person = {\\n  name: 'Gregorio Y. Zara',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"该组件可以这样使用来自 \",[\"$r\",\"code\",null,{\"children\":\"person\"}],\" 的值：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<div style={person.theme}>\\n  <h1>{person.name}'s Todos</h1>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"JSX 是一种模板语言的最小实现，因为它允许你通过 JavaScript 来组织数据和逻辑。\"}],\"\\n\",[\"$r\",\"Recap\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"现在你几乎了解了有关 JSX 的一切：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"JSX 引号内的值会作为字符串传递给属性。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"大括号让你可以将 JavaScript 的逻辑和变量带入到标签中。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它们会在 JSX 标签中的内容区域或紧随属性的 \",[\"$r\",\"code\",null,{\"children\":\"=\"}],\" 后起作用。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"{{\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"}}\"}],\" 并不是什么特殊的语法：它只是包在 JSX 大括号内的 JavaScript 对象。\"]}],\"\\n\"]}]]}],\"\\n\"]}],[\"$r\",\"Challenges\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"fix-the-mistake\",\"children\":\"修复错误 \"}],[\"$r\",\"p\",null,{\"children\":[\"这段代码崩溃了，并打印出这样一个错误 \",[\"$r\",\"code\",null,{\"children\":\"Objects are not valid as a React child\"}],\"：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const person = {\\n  name: 'Gregorio Y. Zara',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src=\\\"https://i.imgur.com/7vQD0fPs.jpg\\\"\\n        alt=\\\"Gregorio Y. Zara\\\"\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; height: 90px; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"你能找到问题出在哪吗？\"}],[\"$r\",\"Hint\",null,{\"children\":\"注意看大括号里的内容，我们放在那的东西有没有什么问题？\"}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"之所以会出现这个问题，是因为示例中的代码尝试把 \",[\"$r\",\"strong\",null,{\"children\":\"一个对象\"}],\" 渲染在标签内，而不是字符串：\",[\"$r\",\"code\",null,{\"children\":\"<h1>{person}'s Todos</h1>\"}],\" 在试图渲染整个 \",[\"$r\",\"code\",null,{\"children\":\"person\"}],\" 对象！将未经处理的对象作为文本内容使用会抛出错误，因为 React 并不知道你想如何展示它们。\"]}],[\"$r\",\"p\",null,{\"children\":[\"要修复它，请把 \",[\"$r\",\"code\",null,{\"children\":\"<h1>{person}'s Todos</h1>\"}],\" 替换成 \",[\"$r\",\"code\",null,{\"children\":\"<h1>{person.name}'s Todos</h1>\"}],\"：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const person = {\\n  name: 'Gregorio Y. Zara',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person.name}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src=\\\"https://i.imgur.com/7vQD0fPs.jpg\\\"\\n        alt=\\\"Gregorio Y. Zara\\\"\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; height: 90px; }\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"extract-information-into-an-object\",\"children\":\"提取信息到对象中 \"}],[\"$r\",\"p\",null,{\"children\":[\"把图片的 URL 信息提取到 \",[\"$r\",\"code\",null,{\"children\":\"person\"}],\" 对象中。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const person = {\\n  name: 'Gregorio Y. Zara',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person.name}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src=\\\"https://i.imgur.com/7vQD0fPs.jpg\\\"\\n        alt=\\\"Gregorio Y. Zara\\\"\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; height: 90px; }\\n\"}]}]]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"把图片 URL 移到 \",[\"$r\",\"code\",null,{\"children\":\"person.imageUrl\"}],\" 这个属性中并在 \",[\"$r\",\"code\",null,{\"children\":\"<img>\"}],\" 标签中的大括号中读取它：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const person = {\\n  name: 'Gregorio Y. Zara',\\n  imageUrl: \\\"https://i.imgur.com/7vQD0fPs.jpg\\\",\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person.name}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src={person.imageUrl}\\n        alt=\\\"Gregorio Y. Zara\\\"\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; height: 90px; }\\n\"}]}]]}]]}],[\"$r\",\"h4\",null,{\"id\":\"write-an-expression-inside-jsx-curly-braces\",\"children\":\"在 JSX 大括号内编写表达式 \"}],[\"$r\",\"p\",null,{\"children\":[\"在下面的对象中，完整的图片 URL 被分成了四个部分：\",[\"$r\",\"code\",null,{\"children\":\"baseUrl\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"imageId\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"imageSize\"}],\" 和\",[\"$r\",\"code\",null,{\"children\":\"文件拓展名\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"我们希望这些属性组合成图片的 URL：\",[\"$r\",\"code\",null,{\"children\":\"baseUrl\"}],\"（一直是 \",[\"$r\",\"code\",null,{\"children\":\"'https://i.imgur.com/'\"}],\"）、\",[\"$r\",\"code\",null,{\"children\":\"imageId\"}],\"（\",[\"$r\",\"code\",null,{\"children\":\"'7vQD0fP'\"}],\"）、\",[\"$r\",\"code\",null,{\"children\":\"imageSize\"}],\"（\",[\"$r\",\"code\",null,{\"children\":\"'s'\"}],\"）和文件拓展（总是 \",[\"$r\",\"code\",null,{\"children\":\"'.jpg'\"}],\"）。但是，\",[\"$r\",\"code\",null,{\"children\":\"<img>\"}],\" 标签 \",[\"$r\",\"code\",null,{\"children\":\"src\"}],\" 指明的方式是有问题的。\"]}],[\"$r\",\"p\",null,{\"children\":\"你能修复它吗？\"}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"\\nconst baseUrl = 'https://i.imgur.com/';\\nconst person = {\\n  name: 'Gregorio Y. Zara',\\n  imageId: '7vQD0fP',\\n  imageSize: 's',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person.name}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src=\\\"{baseUrl}{person.imageId}{person.imageSize}.jpg\\\"\\n        alt={person.name}\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"要检查你的修复是否成功，可以尝试把 \",[\"$r\",\"code\",null,{\"children\":\"imageSize\"}],\" 的值改成 \",[\"$r\",\"code\",null,{\"children\":\"'b'\"}],\"。这张图片的大小理应随着你的修改而发生变化。\"]}],[\"$r\",\"Solution\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"你可以把它写成 \",[\"$r\",\"code\",null,{\"children\":\"src={baseUrl + person.imageId + person.imageSize + '.jpg'}\"}],\" 这样。\"]}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"{\"}],\" 开启 JavaScript 表达式\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"baseUrl + person.imageId + person.imageSize + '.jpg'\"}],\" 会生成正确的 URL 字符串\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"}\"}],\" 结束 JavaScript 表达式\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const baseUrl = 'https://i.imgur.com/';\\nconst person = {\\n  name: 'Gregorio Y. Zara',\\n  imageId: '7vQD0fP',\\n  imageSize: 's',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person.name}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src={baseUrl + person.imageId + person.imageSize + '.jpg'}\\n        alt={person.name}\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"你还可以将此表达式封装成一个单独的函数，例如下面的 \",[\"$r\",\"code\",null,{\"children\":\"getImageUrl\"}],\"：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { getImageUrl } from './utils.js'\\n\\nconst person = {\\n  name: 'Gregorio Y. Zara',\\n  imageId: '7vQD0fP',\\n  imageSize: 's',\\n  theme: {\\n    backgroundColor: 'black',\\n    color: 'pink'\\n  }\\n};\\n\\nexport default function TodoList() {\\n  return (\\n    <div style={person.theme}>\\n      <h1>{person.name}'s Todos</h1>\\n      <img\\n        className=\\\"avatar\\\"\\n        src={getImageUrl(person)}\\n        alt={person.name}\\n      />\\n      <ul>\\n        <li>Improve the videophone</li>\\n        <li>Prepare aeronautics lectures</li>\\n        <li>Work on the alcohol-fuelled engine</li>\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/utils.js\",\"children\":\"export function getImageUrl(person) {\\n  return (\\n    'https://i.imgur.com/' +\\n    person.imageId +\\n    person.imageSize +\\n    '.jpg'\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"body { padding: 0; margin: 0 }\\nbody > div > div { padding: 20px; }\\n.avatar { border-radius: 50%; }\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"变量和函数可以帮助你保持标签文本的简洁！\"}]]}]]}]]","meta":{"title":"在 JSX 中通过大括号使用 JavaScript","translators":["flynn-eye","Megrax"]}},"__N_SSG":true}