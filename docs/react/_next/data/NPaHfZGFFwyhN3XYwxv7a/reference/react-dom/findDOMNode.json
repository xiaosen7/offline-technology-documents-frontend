{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#finddomnode\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"findDOMNode(componentInstance)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#finding-the-root-dom-node-of-a-class-component\",\"depth\":3,\"text\":\"寻找类式组件对应的 DOM 节点 \"},{\"url\":\"#alternatives\",\"depth\":2,\"text\":\"替代方案 \"},{\"url\":\"#reading-components-own-dom-node-from-a-ref\",\"depth\":3,\"text\":\"使用 ref 读取组件自己的 DOM 节点 \"},{\"url\":\"#reading-a-child-components-dom-node-from-a-forwarded-ref\",\"depth\":3,\"text\":\"使用 ref 操作子组件的 DOM 节点 \"},{\"url\":\"#adding-a-wrapper-div-element\",\"depth\":3,\"text\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 包装 \"]}]","content":"[[\"$r\",\"MaxWidth\",\"42\",{\"children\":[[\"$r\",\"Deprecated\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"此 API 将在未来的 React 主要版本中被移除。\",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"请查看替代方案\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 方法可以获取 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":\"类式组件\"}],\" 实例对应的浏览器 DOM 节点。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const domNode = findDOMNode(componentInstance)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"finddomnode\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"findDOMNode(componentInstance)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 获取 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":\"类式组件\"}],\" 实例对应的浏览器 DOM 节点。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { findDOMNode } from 'react-dom';\\n\\nconst domNode = findDOMNode(componentInstance);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"componentInstance\"}],\"：\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Component\"}]}],\" 子类的实例。举个例子，类式组件中的 \",[\"$r\",\"code\",null,{\"children\":\"this\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 方法返回与给定的 \",[\"$r\",\"code\",null,{\"children\":\"componentInstance\"}],\" 中最接近的浏览器 DOM 节点。当组件渲染为 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\" 时，\",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。当组件渲染为字符串时，\",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 返回一个包含该值的文本 DOM 节点。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"组件可能会返回包含多个子元素的数组或 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Fragment\",\"children\":\"Fragment\"}],\"。在这种情况下，\",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 会返回第一个非空子节点对应的 DOM 节点。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 只对已经挂载到 DOM 上的组件有效。如果你尝试在一个还未挂载的组件上调用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode()\"}],\"（比如在一个还未创建的组件的 \",[\"$r\",\"code\",null,{\"children\":\"render()\"}],\" 方法中调用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode()\"}],\"），会抛出异常。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 只会返回调用时的结果，你无法得知组件是否在之后渲染了不同的节点。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 接受类组件实例作为参数，而不能用于函数式组件。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"finding-the-root-dom-node-of-a-class-component\",\"children\":\"寻找类式组件对应的 DOM 节点 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 获取 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":\"类式组件\"}],\" 实例（通常是 \",[\"$r\",\"code\",null,{\"children\":\"this\"}],\"）对应的已渲染 DOM 节点。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3}\",\"children\":\"class AutoselectingInput extends Component {\\n  componentDidMount() {\\n    const input = findDOMNode(this);\\n    input.select()\\n  }\\n\\n  render() {\\n    return <input defaultValue=\\\"你好\\\" />\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这里，\",[\"$r\",\"code\",null,{\"children\":\"input\"}],\" 变量将被设置为 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" DOM 元素，这样你就可以对其进行操作。例如，当点击下方的“显示示例”按钮并挂载了输入框后，\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/select\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"input.select()\"}]}],\" 会选中输入框中的所有文本：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AutoselectingInput from './AutoselectingInput.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(true)}>\\n        显示示例\\n      </button>\\n      <hr />\\n      {show && <AutoselectingInput />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AutoselectingInput.js active\",\"children\":\"import { Component } from 'react';\\nimport { findDOMNode } from 'react-dom';\\n\\nclass AutoselectingInput extends Component {\\n  componentDidMount() {\\n    const input = findDOMNode(this);\\n    input.select()\\n  }\\n\\n  render() {\\n    return <input defaultValue=\\\"你好\\\" />\\n  }\\n}\\n\\nexport default AutoselectingInput;\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"52\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"alternatives\",\"children\":\"替代方案 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-components-own-dom-node-from-a-ref\",\"children\":\"使用 ref 读取组件自己的 DOM 节点 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于 JSX 节点与操作相应的 DOM 节点的代码之间的联系不是显式的，因此使用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 的代码非常脆弱。例如，尝试将此 \",[\"$r\",\"code\",null,{\"children\":\"<input />\"}],\" 包装在一个 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 中：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AutoselectingInput from './AutoselectingInput.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(true)}>\\n        显示示例\\n      </button>\\n      <hr />\\n      {show && <AutoselectingInput />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AutoselectingInput.js active\",\"children\":\"import { Component } from 'react';\\nimport { findDOMNode } from 'react-dom';\\n\\nclass AutoselectingInput extends Component {\\n  componentDidMount() {\\n    const input = findDOMNode(this);\\n    input.select()\\n  }\\n  render() {\\n    return <input defaultValue=\\\"Hello\\\" />\\n  }\\n}\\n\\nexport default AutoselectingInput;\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"58\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这将出现问题。\",[\"$r\",\"code\",null,{\"children\":\"findDOMNode(this)\"}],\" 找到的是 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 节点，但其实我们期望找到的是 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 节点。为了避免这些问题，考虑使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createRef\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRef\"}]}],\" 管理特定的 DOM 节点。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中不再使用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\"。相反，使用 \",[\"$r\",\"code\",null,{\"children\":\"inputRef = createRef(null)\"}],\" 并将其定义为类的实例字段。如果想要从中读取 DOM 节点，可以使用\",[\"$r\",\"code\",null,{\"children\":\"this.inputRef.current\"}],\"。如果想要将其附加在 JSX 上，考虑渲染 \",[\"$r\",\"code\",null,{\"children\":\"<input ref={this.inputRef} />\"}],\"。这将连接使用 DOM 节点的代码与对应 JSX。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AutoselectingInput from './AutoselectingInput.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(true)}>\\n        显示示例\\n      </button>\\n      <hr />\\n      {show && <AutoselectingInput />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AutoselectingInput.js active\",\"children\":\"import { createRef, Component } from 'react';\\n\\nclass AutoselectingInput extends Component {\\n  inputRef = createRef(null);\\n\\n  componentDidMount() {\\n    const input = this.inputRef.current;\\n    input.select()\\n  }\\n\\n  render() {\\n    return (\\n      <input ref={this.inputRef} defaultValue=\\\"你好\\\" />\\n    );\\n  }\\n}\\n\\nexport default AutoselectingInput;\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"62\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在函数式组件中，你应该使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useRef\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useRef\"}]}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AutoselectingInput from './AutoselectingInput.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(true)}>\\n        显示示例\\n      </button>\\n      <hr />\\n      {show && <AutoselectingInput />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AutoselectingInput.js active\",\"children\":\"import { useRef, useEffect } from 'react';\\n\\nexport default function AutoselectingInput() {\\n  const inputRef = useRef(null);\\n\\n  useEffect(() => {\\n    const input = inputRef.current;\\n    input.select();\\n  }, []);\\n\\n  return <input ref={inputRef} defaultValue=\\\"你好\\\" />\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你想了解更多，请阅读 \",[\"$r\",\"a\",null,{\"href\":\"/learn/manipulating-the-dom-with-refs\",\"children\":\"使用 ref 操作 DOM\"}],\"。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-a-child-components-dom-node-from-a-forwarded-ref\",\"children\":\"使用 ref 操作子组件的 DOM 节点 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"findDOMNode(this)\"}],\" 获取了属于另一个组件的 DOM 节点。\",[\"$r\",\"code\",null,{\"children\":\"AutoselectingInput\"}],\" 渲染了我们自己的 \",[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 组件，而 \",[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 渲染了浏览器标签 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AutoselectingInput from './AutoselectingInput.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(true)}>\\n        显示示例\\n      </button>\\n      <hr />\\n      {show && <AutoselectingInput />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AutoselectingInput.js active\",\"children\":\"import { Component } from 'react';\\nimport { findDOMNode } from 'react-dom';\\nimport MyInput from './MyInput.js';\\n\\nclass AutoselectingInput extends Component {\\n  componentDidMount() {\\n    const input = findDOMNode(this);\\n    input.select()\\n  }\\n  render() {\\n    return <MyInput />;\\n  }\\n}\\n\\nexport default AutoselectingInput;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyInput.js\",\"children\":\"export default function MyInput() {\\n  return <input defaultValue=\\\"你好\\\" />;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"82\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"请注意，即使 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 被隐藏在 \",[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 组件中，在 \",[\"$r\",\"code\",null,{\"children\":\"AutoselectingInput\"}],\" 中调用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode(this)\"}],\" 仍然会返回 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\"。这在上面的例子中似乎很方便，但它会导致代码变得非常脆弱。想象一下，如果你以后想编辑 \",[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 并使用 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 包装，但是这将会破坏 \",[\"$r\",\"code\",null,{\"children\":\"AutoselectingInput\"}],\" 的代码（因为它期望找到 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\"）。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"考虑在这个例子中替换 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\"，并且下列两个组件需要协同工作：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"AutoSelectingInput\"}],\" 中声明一个 ref，就像 \",[\"$r\",\"a\",null,{\"href\":\"#reading-components-own-dom-node-from-a-ref\",\"children\":\"前面的例子\"}],\" 中一样，并将其传递给 \",[\"$r\",\"code\",null,{\"children\":\"<MyInput>\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"MyInput\"}],\" 使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/forwardRef\",\"children\":[\"$r\",\"code\",null,{\"children\":\"forwardRef\"}]}],\" 接收该 ref 并将其转发到 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 节点。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这种方式解决了这个问题，所以不再需要 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AutoselectingInput from './AutoselectingInput.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(true)}>\\n        显示示例\\n      </button>\\n      <hr />\\n      {show && <AutoselectingInput />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AutoselectingInput.js active\",\"children\":\"import { createRef, Component } from 'react';\\nimport MyInput from './MyInput.js';\\n\\nclass AutoselectingInput extends Component {\\n  inputRef = createRef(null);\\n\\n  componentDidMount() {\\n    const input = this.inputRef.current;\\n    input.select()\\n  }\\n\\n  render() {\\n    return (\\n      <MyInput ref={this.inputRef} />\\n    );\\n  }\\n}\\n\\nexport default AutoselectingInput;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyInput.js\",\"children\":\"import { forwardRef } from 'react';\\n\\nconst MyInput = forwardRef(function MyInput(props, ref) {\\n  return <input ref={ref} defaultValue=\\\"你好\\\" />;\\n});\\n\\nexport default MyInput;\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"86\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"以下是上面代码在函数式组件中的样子：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport AutoselectingInput from './AutoselectingInput.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setShow(true)}>\\n        显示示例\\n      </button>\\n      <hr />\\n      {show && <AutoselectingInput />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/AutoselectingInput.js active\",\"children\":\"import { useRef, useEffect } from 'react';\\nimport MyInput from './MyInput.js';\\n\\nexport default function AutoselectingInput() {\\n  const inputRef = useRef(null);\\n\\n  useEffect(() => {\\n    const input = inputRef.current;\\n    input.select();\\n  }, []);\\n\\n  return <MyInput ref={inputRef} defaultValue=\\\"你好\\\" />\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MyInput.js\",\"children\":\"import { forwardRef } from 'react';\\n\\nconst MyInput = forwardRef(function MyInput(props, ref) {\\n  return <input ref={ref} defaultValue=\\\"你好\\\" />;\\n});\\n\\nexport default MyInput;\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"adding-a-wrapper-div-element\",\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 包装 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"有时，一个组件想要知道子元素的位置和大小。这会让你想要使用 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode(this)\"}],\" 查找子元素，然后使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"getBoundingClientRect\"}]}],\" 等 DOM 方法来进行测量。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"目前，还没有直接适用于此场景的替代方法，这就是为什么 \",[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}],\" 已弃用但尚未从 React 中完全删除的原因。在此期间，你可以尝试在内容周围使用 \",[\"$r\",\"code\",null,{\"children\":\"<div>\"}],\" 包装，并向其添加 ref。但是，额外的包装可能会破坏样式。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<div ref={someRef}>\\n  {children}\\n</div>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这对于聚焦以及滚动到任何子元素也是一样。\"}]]}]]","meta":{"title":"findDOMNode"}},"__N_SSG":true}