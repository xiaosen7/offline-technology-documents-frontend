{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#rendertopipeablestream\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream(reactNode, options?)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#rendering-a-react-tree-as-html-to-a-nodejs-stream\",\"depth\":3,\"text\":\"将 React 组件树渲染为 HTML 并形成 Node.js 流 \"},{\"url\":\"#streaming-more-content-as-it-loads\",\"depth\":3,\"text\":\"在加载时流式传输更多内容 \"},{\"url\":\"#specifying-what-goes-into-the-shell\",\"depth\":3,\"text\":\"指定 shell 中的内容 \"},{\"url\":\"#logging-crashes-on-the-server\",\"depth\":3,\"text\":\"记录服务端崩溃日志 \"},{\"url\":\"#recovering-from-errors-inside-the-shell\",\"depth\":3,\"text\":\"恢复 shell 内的异常 \"},{\"url\":\"#recovering-from-errors-outside-the-shell\",\"depth\":3,\"text\":\"将 shell 之外的异常恢复 \"},{\"url\":\"#setting-the-status-code\",\"depth\":3,\"text\":\"设置状态码 \"},{\"url\":\"#handling-different-errors-in-different-ways\",\"depth\":3,\"text\":\"用不同的方式处理不同的异常错误 \"},{\"url\":\"#waiting-for-all-content-to-load-for-crawlers-and-static-generation\",\"depth\":3,\"text\":\"为爬虫和静态内容生成而等待所有内容加载完毕 \"},{\"url\":\"#aborting-server-rendering\",\"depth\":3,\"text\":\"终止服务端渲染 \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}],\" 将一个 React 组件树渲染为管道化（pipeable）的 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 流\"}],\"。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const { pipe, abort } = renderToPipeableStream(reactNode, options?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"这个 API 是专供 Node.js 使用的。像 Deno 这类可以支持 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Streams_API\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web 流\"}],\" 的新式非主流运行时环境，应该使用另一个 API \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToReadableStream\",\"children\":[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}]}],\"。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendertopipeablestream\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream(reactNode, options?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}],\" 以 React 组件树渲染为 HTML 后注入 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html#writable-streams\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 流\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { renderToPipeableStream } from 'react-dom/server';\\n\\nconst { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    response.setHeader('content-type', 'text/html');\\n    pipe(response);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在客户端，调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 以让服务端生成的 HTML 中的绑定事件生效，进而让其变得可交互。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下方更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：想要将其渲染为 HTML 的 React 节点，比如像 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\" 这样的 JSX 元素。这样做意味着整个页面文档都将被渲染，所以这里提到的 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 组件将渲染 \",[\"$r\",\"code\",null,{\"children\":\"<html>\"}],\" 标签.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"options\"}],\"：用于配置流的对象.\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"bootstrapScriptContent\"}],\"：指定一个字符串，这个字符串将被放入 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签中作为其内容。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"bootstrapScripts\"}],\"：一个 URL 字符串数组，它们将被转化为 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签嵌入页面。请将那些调用了 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 对应的 URL 放入这个数组中。但是如果你不想让客户都端运行 React 的话，请省略这个参数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"bootstrapModules\"}],\"：和 \",[\"$r\",\"code\",null,{\"children\":\"bootstrapScripts\"}],\" 相似，但是嵌入页面的是 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<script type=\\\"module\\\">\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\"：一个字符串前缀，用于由 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useId\"}]}],\" 生成的 id。在同一页面下的多人协作场景中会很有用，它能够很好地避免命名冲突。但是注意使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#parameters\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 时也要加上同样的前缀。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"namespaceURI\"}],\"：一个字符串，指定与流相关联的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createElementNS#important_namespace_uris\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"命名空间 URI\"}],\"。默认是常规的 HTML。可以传入 \",[\"$r\",\"code\",null,{\"children\":\"'http://www.w3.org/2000/svg'\"}],\" 指定为 SVG，或者传入 \",[\"$r\",\"code\",null,{\"children\":\"'http://www.w3.org/1998/Math/MathML'\"}],\" 指定为 MathML。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"nonce\"}],\"：\",[\"$r\",\"a\",null,{\"href\":\"http://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script#nonce\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"nonce\"}]}],\" 一个字符串，能为脚本设置跨域限制，即 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"script-src\"}],\" 浏览器内容安全策略\"]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onAllReady\"}],\"：一个回调函数，将会在所有渲染完成时触发，包括 \",[\"$r\",\"a\",null,{\"href\":\"#specifying-what-goes-into-the-shell\",\"children\":\"shell\"}],\" 和所有额外的 \",[\"$r\",\"a\",null,{\"href\":\"#streaming-more-content-as-it-loads\",\"children\":\"content\"}],\"。你可以用这个替代 \",[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\" \",[\"$r\",\"a\",null,{\"href\":\"#waiting-for-all-content-to-load-for-crawlers-and-static-generation\",\"children\":\"用于爬虫和静态内容生成\"}],\"。如果在此处开启了流式传输，所有的 HTML 都会被包含在流中直接返回，而不会有任何渐进的加载。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\"：一个回调函数，只要是出现了异常错误，无论这是 \",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-outside-the-shell\",\"children\":\"可恢复的\"}],\" 还是 \",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-inside-the-shell\",\"children\":\"不可恢复的\"}],\"，它都会触发。默认情况下，它只会调用 \",[\"$r\",\"code\",null,{\"children\":\"console.error\"}],\"。如果你想要将它重写为 \",[\"$r\",\"a\",null,{\"href\":\"#logging-crashes-on-the-server\",\"children\":\"日志崩溃报告\"}],\"，记得仍然要使用 \",[\"$r\",\"code\",null,{\"children\":\"console.error\"}],\" 为可能不兼容的场景兜底。你也可以在 shell 发送之前使用它来 \",[\"$r\",\"a\",null,{\"href\":\"#setting-the-status-code\",\"children\":\"修改状态码\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\"：一个回调函数，在 \",[\"$r\",\"a\",null,{\"href\":\"#specifying-what-goes-into-the-shell\",\"children\":\"shell 初始化\"}],\" 渲染后立即调用。你可以 \",[\"$r\",\"a\",null,{\"href\":\"#setting-the-status-code\",\"children\":\"设置状态码\"}],\" 然后在这里调用 \",[\"$r\",\"code\",null,{\"children\":\"pipe\"}],\" 方法启用流式传输。这样一来，React 将会初始化 shell 渲染完毕后，通过上面提到的 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 进行 \",[\"$r\",\"a\",null,{\"href\":\"#streaming-more-content-as-it-loads\",\"children\":\"流式传输更多内容\"}],\"，用这些内容替换掉 HTML 的加载中的后备方案。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onShellError\"}],\"：一个回调函数，在初始化 shell 发生错误渲染时调用。它的第一个参数将自动接收捕获到的异常错误。此时，这个流中的任何内容都不会被发送，并且 \",[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"onAllReady\"}],\" 都不会被调用，所以你还可以 \",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-inside-the-shell\",\"children\":\"输出一段后备 HTML shell\"}],\" 作为兜底。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"progressiveChunkSize\"}],\"：一个块中的字节数。\",[\"$r\",\"a\",null,{\"href\":\"https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-server/src/ReactFizzServer.js#L210-L225\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"查阅更多关于该参数默认值的信息\"}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}],\" 返回一个包含了两个方法的对象：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"pipe\"}],\" 将一段 HTML 输出到 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html#writable-streams\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 可写流中\"}],\"。如果你想启用流式传输，那么可以在 \",[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\" 中调用 \",[\"$r\",\"code\",null,{\"children\":\"pipe\"}],\"；如果要做爬虫和静态内容生成的话，那么可以在 \",[\"$r\",\"code\",null,{\"children\":\"onAllReady\"}],\" 中调用它。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"abort\"}],\" 使你 \",[\"$r\",\"a\",null,{\"href\":\"#aborting-server-rendering\",\"children\":\"终止服务端渲染\"}],\" 然后在客户端渲染未处理的部分。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-a-react-tree-as-html-to-a-nodejs-stream\",\"children\":\"将 React 组件树渲染为 HTML 并形成 Node.js 流 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}],\" 将 React 组件树渲染为 HTML 后注入 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html#writable-streams\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 流\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 5, \\\"<App />\\\"], [2, 6, \\\"['/main.js']\\\"]]\",\"children\":\"import { renderToPipeableStream } from 'react-dom/server';\\n\\n// 路由的具体语法由你所使用的后端技术决定\\napp.use('/', (request, response) => {\\n  const { pipe } = renderToPipeableStream(<App />, {\\n    bootstrapScripts: ['/main.js'],\\n    onShellReady() {\\n      response.setHeader('content-type', 'text/html');\\n      pipe(response);\\n    }\\n  });\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"除了 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"根组件\"}],\" 之外，还需要提供一个列表，其元素是 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 的资源路径\"]}],\"。注意根组件应该返回 \",[\"$r\",\"strong\",null,{\"children\":[\"包含了 \",[\"$r\",\"code\",null,{\"children\":\"<html>\"}],\" 标签的完整的页面文档结构\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"更具体一点地说，就像是下面这样：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 1, \\\"App\\\"]]\",\"children\":\"export default function App() {\\n  return (\\n    <html>\\n      <head>\\n        <meta charSet=\\\"utf-8\\\" />\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n        <link rel=\\\"stylesheet\\\" href=\\\"/styles.css\\\"></link>\\n        <title>My app</title>\\n      </head>\\n      <body>\\n        <Router />\\n      </body>\\n    </html>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将会把 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/Doctype\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"文档类型\"}],\" 和 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签\"]}],\" 注入到输出的 HTML 流中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"[[2, 5, \\\"/main.js\\\"]]\",\"children\":\"<!DOCTYPE html>\\n<html>\\n  <!-- ... 由你的组件产生的 HTML ... -->\\n</html>\\n<script src=\\\"/main.js\\\" async=\\\"\\\"></script>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在客户端，你的 script 将会 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#hydrating-an-entire-document\",\"children\":[\"通过调用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 对整个 \",[\"$r\",\"code\",null,{\"children\":\"页面文档\"}],\" 进行 hydrate\"]}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 4, \\\"<App />\\\"]]\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(document, <App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"上述过程让客户端开始监听服务端生成的 HTML 中绑定的事件，然后这些事件才能真正在客户端生效。\"}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"reading-css-and-js-asset-paths-from-the-build-output\",\"children\":\"从构建输出产物中读取 CSS 和 JS 资源路径 \"}],[\"$r\",\"p\",null,{\"children\":[\"在打包构建之后，最终的资源的 URL（比如 JavaScript 和 CSS 文件）总是被哈希映射处理过。举个例子，\",[\"$r\",\"code\",null,{\"children\":\"styles.css\"}],\" 最终可能会变成 \",[\"$r\",\"code\",null,{\"children\":\"styles.123456.css\"}],\"。被哈希处理过的资源文件名称能够保证同样的资源在每一次不同的构建后都有一个不一样的文件名。这是一个十分有用的机制，因为它让你能够安全地对静态资源进行长期缓存：如果名称固定不变，打包构建工具可能会认为这些资源没有改动，导致缓存的内容将不会发生相应的变化。\"]}],[\"$r\",\"p\",null,{\"children\":[\"然而，如果在打包构建完成之前你都无法知晓资源最终的 URL 的话，那就无法将它们放进组件的代码之中。举个例子，像以前那样将 \",[\"$r\",\"code\",null,{\"children\":\"\\\"/styles.css\\\"\"}],\" 硬编码写入 JSX 的话，是不会有作用的。为了应对这种场景，可以向根组件传递一个映射文件名的 map 作为参数：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,6}\",\"children\":\"export default function App({ assetMap }) {\\n  return (\\n    <html>\\n      <head>\\n        ...\\n        <link rel=\\\"stylesheet\\\" href={assetMap['styles.css']}></link>\\n        ...\\n      </head>\\n      ...\\n    </html>\\n  );\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"然后在服务端，像 \",[\"$r\",\"code\",null,{\"children\":\"<App assetMap={assetMap} />\"}],\" 这样传递资源 URL：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-5,8,9}\",\"children\":\"// 你需要从你的打包构建工具中获取这个 JSON，比如从构建产物中获取\\nconst assetMap = {\\n  'styles.css': '/styles.123456.css',\\n  'main.js': '/main.123456.js'\\n};\\n\\napp.use('/', (request, response) => {\\n  const { pipe } = renderToPipeableStream(<App assetMap={assetMap} />, {\\n    bootstrapScripts: [assetMap['main.js']],\\n    onShellReady() {\\n      response.setHeader('content-type', 'text/html');\\n      pipe(response);\\n    }\\n  });\\n});\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"因为你的服务端正在渲染 \",[\"$r\",\"code\",null,{\"children\":\"<App assetMap={assetMap} />\"}],\"，所以你还需要在客户端将这个带有 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\" 的组件再渲染一次进行同构，以此避免 hydrate 错误。你可以像下面这样序列化 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\" 之后再传递：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{9-10}\",\"children\":\"// 你需要从你的打包构建工具中获取这个 JSON。\\nconst assetMap = {\\n  'styles.css': '/styles.123456.css',\\n  'main.js': '/main.123456.js'\\n};\\n\\napp.use('/', (request, response) => {\\n  const { pipe } = renderToPipeableStream(<App assetMap={assetMap} />, {\\n    // 注意: 由于这些数据并非用户生成，所以使用 stringify 是安全的。\\n    bootstrapScriptContent: `window.assetMap = ${JSON.stringify(assetMap)};`,\\n    bootstrapScripts: [assetMap['main.js']],\\n    onShellReady() {\\n      response.setHeader('content-type', 'text/html');\\n      pipe(response);\\n    }\\n  });\\n});\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"在上面这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"bootstrapScriptContent\"}],\" 参数添加了一个 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签，在客户端设置了一个全局变量 \",[\"$r\",\"code\",null,{\"children\":\"window.assetMap\"}],\"。这让客户端代码能够获取到与服务端一致的 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\"：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(document, <App assetMap={window.assetMap} />);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"这样一来，客户端和服务端都渲染了带有 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\" 属性的 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\"，因此它们是同构的，就不会出现 hydrate 异常错误。\"]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"streaming-more-content-as-it-loads\",\"children\":\"在加载时流式传输更多内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"流式传输让用户在所有数据加载完毕之前就能够看见页面的部分内容。举个例子，想象一下这样的一个用户个人信息页面，页面上显示了一个封面大图、一个列出用户好友及其照片的侧边栏，还有一个文章列表：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Sidebar>\\n        <Friends />\\n        <Photos />\\n      </Sidebar>\\n      <Posts />\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"可以想象到为 \",[\"$r\",\"code\",null,{\"children\":\"<Posts />\"}],\" 加载文章数据会消耗一些时间。但理想情况是，不等待文章数据加载，先直接为用户展示这个页面上的其余部分。想要实现这一点，只需要 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#displaying-a-fallback-while-content-is-loading\",\"children\":[\"将 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 放入 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 中\"]}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{9,11}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Sidebar>\\n        <Friends />\\n        <Photos />\\n      </Sidebar>\\n      <Suspense fallback={<PostsGlimmer />}>\\n        <Posts />\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这样做将通知 React 在 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 加载数据之前就开始流式传输 HTML。React 首先会发送加载中的后备方案（\",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\"）对应的 HTML，然后当 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 的数据加载完成时，React 会将剩下的 HTML 带上一个 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签一并发送，这个 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 的作用是将加载中的后备方案替换为这段 HTML。从用户的角度上看，页面上首先出现的是 \",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\"，稍后被替换为 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以进一步地 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#revealing-nested-content-as-it-loads\",\"children\":[\"嵌套 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}]]}],\" 来创建一个更加细致的加载序列：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5,13}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<BigSpinner />}>\\n        <Sidebar>\\n          <Friends />\\n          <Photos />\\n        </Sidebar>\\n        <Suspense fallback={<PostsGlimmer />}>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，React 甚至能够更早地启用流式传输。因为 \",[\"$r\",\"code\",null,{\"children\":\"ProfileLayout\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"ProfileCover\"}],\" 没有被包裹在 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 中，所以它们必须先完成渲染。然而，如果 \",[\"$r\",\"code\",null,{\"children\":\"Sidebar\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"Friend\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"Photos\"}],\" 需要加载更多数据，React 将会发送后备方案 \",[\"$r\",\"code\",null,{\"children\":\"BigSpinner\"}],\" 所对应的 HTML 暂时替代有效内容。然后，当这些数据加载完成时，有效内容将渐进地显示直至全部可见。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"流式传输不需要等待 React 本身在浏览器中的加载，也不需要等待你的应用程序变得可交互。在任何 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签加载之前，服务端发送的 HTML 内容就会开始渐进式地显示。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-18/discussions/37\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"查阅更多以了解流式传输的 HTML 如何运行\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"只有支持 Suspense 的数据源才会激活 Suspense 组件\"}],\"。它们包括：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用像 \",[\"$r\",\"a\",null,{\"href\":\"https://relay.dev/docs/guided-tour/rendering/loading-states/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Relay\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://nextjs.org/docs/getting-started/react-essentials\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Next.js\"}],\" 这样支持用 Suspence 获取数据的框架。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/lazy\",\"children\":[\"$r\",\"code\",null,{\"children\":\"lazy\"}]}],\" 懒加载组件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/use\",\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" 读取 Promise 的值。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"当数据是在 Effect 或者事件处理程序中被获取时，Suspense \",[\"$r\",\"strong\",null,{\"children\":\"不会\"}],\" 对此生效。\"]}],[\"$r\",\"p\",null,{\"children\":[\"在上述的 \",[\"$r\",\"code\",null,{\"children\":\"Post\"}],\" 组件中加载数据的具体方式取决于你使用的框架。如果你使用了一个支持 Suspense 的框架，你可以它的文档中找到获取数据的详细方式。\"]}],[\"$r\",\"p\",null,{\"children\":\"并不一定就得使用某个框架才能使用支持 Suspense 的获取数据方式。但实现一个支持 Suspense 的数据源的具体要求并不明确而且目前没有参考实例。不过在 React 未来的版本中，官方将推出一个能够通过 Suspense 来聚合数据源的 API。\"}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"specifying-what-goes-into-the-shell\",\"children\":\"指定 shell 中的内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在你的应用中，\",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 之外的任何内容都叫做 \",[\"$r\",\"strong\",null,{\"children\":\"外壳（shell）\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-5,13,14}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<BigSpinner />}>\\n        <Sidebar>\\n          <Friends />\\n          <Photos />\\n        </Sidebar>\\n        <Suspense fallback={<PostsGlimmer />}>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"上述代码确定了最先加载的、用户可见的内容：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-5,13\",\"children\":\"<ProfileLayout>\\n  <ProfileCover />\\n  <BigSpinner />\\n</ProfileLayout>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你在根节点上，将整个应用都包裹进一个 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 中，那么 shell 包含的内容只有加载动画组件。用户将看到一个超大的加载动画占据了整个屏幕，相比于直接看到页面真实的布局然后稍微等待一会儿来说，前者让用户心理感觉加载变得更慢了并感到更加烦躁。这就导致了用户体验不佳。所以在通常情况下你总是需要设置多个 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\"，使得 shell 看上去 \",[\"$r\",\"strong\",null,{\"children\":\"小巧精致\"}],\"——就像是显示整个页面布局的骨架屏一般。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\" 回调函数会在所有的 shell 都渲染完成后执行。通常情况下你还会开启流式渲染，然后就像这样：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-6}\",\"children\":\"const { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    response.setHeader('content-type', 'text/html');\\n    pipe(response);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\" 执行的时候，\",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 内的组件可能仍然在加载数据。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"logging-crashes-on-the-server\",\"children\":\"记录服务端崩溃日志 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"默认情况下，服务端上所有的错误异常都会在控制台被打印。你可以重载这个行为。\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7-10}\",\"children\":\"const { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    response.setHeader('content-type', 'text/html');\\n    pipe(response);\\n  },\\n  onError(error) {\\n    console.error(error);\\n    logServerCrashReport(error);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你提供了一个自定义的 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 实现，记得总是应该像上面这样在控制台打印错误日志。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"recovering-from-errors-inside-the-shell\",\"children\":\"恢复 shell 内的异常 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，shell 包含 \",[\"$r\",\"code\",null,{\"children\":\"ProfileLayout\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"ProfileCover\"}],\"、和 \",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-5,7-8}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<PostsGlimmer />}>\\n        <Posts />\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这些组件渲染的过程中，如果发生了异常错误，React 就不会发送任何有效的 HTML 到客户端。重载 \",[\"$r\",\"code\",null,{\"children\":\"onShellError\"}],\"，发送一个不依赖服务端渲染的 HTML 作为后备方案：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7-11}\",\"children\":\"const { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    response.setHeader('content-type', 'text/html');\\n    pipe(response);\\n  },\\n  onShellError(error) {\\n    response.statusCode = 500;\\n    response.setHeader('content-type', 'text/html');\\n    response.send('<h1>出错了</h1>'); \\n  },\\n  onError(error) {\\n    console.error(error);\\n    logServerCrashReport(error);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在生成 shell 的过程中出现异常错误，\",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"onShellError\"}],\" 都会触发。使用 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 来做错误上报，并且使用 \",[\"$r\",\"code\",null,{\"children\":\"onShellError\"}],\" 发送一个后备 HTML 文档。你的后备 HTML 不一定要是一个错误提示页面。你还可以引入一个可交互的、并且只在客户端渲染你的应用程序的 shell。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"recovering-from-errors-outside-the-shell\",\"children\":\"将 shell 之外的异常恢复 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"<Posts />\"}],\" 组件被被包裹在 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 中，所以它 \",[\"$r\",\"strong\",null,{\"children\":\"不是\"}],\" shell 的一部分。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<PostsGlimmer />}>\\n        <Posts />\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If an error happens in the \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" component or somewhere inside it, React will \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#providing-a-fallback-for-server-errors-and-client-only-content\",\"children\":\"try to recover from it:\"}]]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它将用在结构上和异常发生的位置最近的一个父级 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 的加载中的后备方案（\",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\"）替代这段 HTML。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它将会“放弃”尝试在服务端渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 组件的内容。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当 JavaScript 在客户端代码加载时，React 将会在客户端 \",[\"$r\",\"strong\",null,{\"children\":\"重试\"}],\" 渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 组件。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在客户端重试渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"也\"}],\" 失败了，React 将会在客户端抛出一个异常错误。当渲染过程中的所有异常错误都被抛出时，距离它们\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#static-getderivedstatefromerror\",\"children\":\"最近的父级异常错误边界\"}],\" 会定义这个异常错误将如何呈现给用户。实际上，这意味着用户将看到一个加载指示器，直到这个异常错误被判定为是不可恢复的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在客户端重试渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 成功了，加载中的后备方案将被替换为客户端渲染的内容。这样一来用户感知到服务端出现了异常错误。不过，服务端的 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 回调函数和客户端的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#hydrateroot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}]}],\" 回调函数仍然会触发，所以你也可以获取到一些关于这个异常错误的提示信息。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"setting-the-status-code\",\"children\":\"设置状态码 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"流式传输引入了一个折衷策略。如果可以的话，你应该尽早开启流式传输，以利于用户能够更快地看到页面内容。然而，一旦你开启了流式渲染，你就不能再设置状态码了。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过 \",[\"$r\",\"a\",null,{\"href\":\"#specifying-what-goes-into-the-shell\",\"children\":\"将你的应用程序切分\"}],\" 为 shell（\",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 之外的部分）和其余部分，你就已经解决了一部分问题。因为如果 shell 出现了异常错误，你就可以触发 \",[\"$r\",\"code\",null,{\"children\":\"onShellError\"}],\" 并在此设置错误状态码。相反，如果你知道应用程序可能已经在客户端将异常错误恢复了，就可以发送“OK”。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"const { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    response.statusCode = 200;\\n    response.setHeader('content-type', 'text/html');\\n    pipe(response);\\n  },\\n  onShellError(error) {\\n    response.statusCode = 500;\\n    response.setHeader('content-type', 'text/html');\\n    response.send('<h1>出错了</h1>'); \\n  },\\n  onError(error) {\\n    console.error(error);\\n    logServerCrashReport(error);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在 shell \",[\"$r\",\"strong\",null,{\"children\":\"之外\"}],\"（即在 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 中）的一个组件抛出了一个错误异常，React 也不会停止渲染。这意味着 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\" 回调函数会被触发，而 \",[\"$r\",\"code\",null,{\"children\":\"onShellError\"}],\" 却不会。 这是因为 React 会尝试在客户端将这些异常错误恢复，\",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-outside-the-shell\",\"children\":\"也就是像上文描述的那样\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然而，如果你愿意的话，你可以利用发生了异常报错这个事实来设置状态码：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,6,16}\",\"children\":\"let didError = false;\\n\\nconst { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    response.statusCode = didError ? 500 : 200;\\n    response.setHeader('content-type', 'text/html');\\n    pipe(response);\\n  },\\n  onShellError(error) {\\n    response.statusCode = 500;\\n    response.setHeader('content-type', 'text/html');\\n    response.send('<h1>出错了</h1>'); \\n  },\\n  onError(error) {\\n    didError = true;\\n    console.error(error);\\n    logServerCrashReport(error);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这只会捕获在生成初始化 shell 内容的时候发生的，且在 shell 之外的异常错误，所以它并不全面。如果知晓某些内容是否发生了错误是一件很重要的事情，那么你可以将这些内容移动到 shell 中。\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"handling-different-errors-in-different-ways\",\"children\":\"用不同的方式处理不同的异常错误 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以 \",[\"$r\",\"a\",null,{\"href\":\"https://javascript.info/custom-errors\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"自定义 \",[\"$r\",\"code\",null,{\"children\":\"Error\"}],\" 子类\"]}],\" 并且使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"instanceof\"}]}],\" 运算符来检查抛出的错误类型。举个例子，你可以自定义一个 \",[\"$r\",\"code\",null,{\"children\":\"NotFoundError\"}],\" 然后在你的组件里抛出它。然后，你的 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"onShellReady\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"onShellError\"}],\" 回调函数就能根据不同的错误类型做不同的处理：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,4-14,19,24,30}\",\"children\":\"let didError = false;\\nlet caughtError = null;\\n\\nfunction getStatusCode() {\\n  if (didError) {\\n    if (caughtError instanceof NotFoundError) {\\n      return 404;\\n    } else {\\n      return 500;\\n    }\\n  } else {\\n    return 200;\\n  }\\n}\\n\\nconst { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    response.statusCode = getStatusCode();\\n    response.setHeader('content-type', 'text/html');\\n    pipe(response);\\n  },\\n  onShellError(error) {\\n   response.statusCode = getStatusCode();\\n   response.setHeader('content-type', 'text/html');\\n   response.send('<h1>出错了</h1>'); \\n  },\\n  onError(error) {\\n    didError = true;\\n    caughtError = error;\\n    console.error(error);\\n    logServerCrashReport(error);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"请记住，一旦发送了 shell 并开始流式传输，就不能够再改变状态码了。\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"waiting-for-all-content-to-load-for-crawlers-and-static-generation\",\"children\":\"为爬虫和静态内容生成而等待所有内容加载完毕 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"流式传输提供了更好的用户体验，因为当页面内容可用时，用户可以及时感知到它们。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然而，当一个爬虫访问该页面时，或者正处于静态生成页面的构建阶段时，就可能需要先加载所有内容，然后直接输出整个 HTML 而不是渐进式地加载它。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"可以使用 \",[\"$r\",\"code\",null,{\"children\":\"onAllReady\"}],\" 回调函数，它会在所有内容加载完成时触发：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,7,11,18-24}\",\"children\":\"let didError = false;\\nlet isCrawler = // ... 取决于你的爬虫嗅探策略 ...\\n\\nconst { pipe } = renderToPipeableStream(<App />, {\\n  bootstrapScripts: ['/main.js'],\\n  onShellReady() {\\n    if (!isCrawler) {\\n      response.statusCode = didError ? 500 : 200;\\n      response.setHeader('content-type', 'text/html');\\n      pipe(response);\\n    }\\n  },\\n  onShellError(error) {\\n    response.statusCode = 500;\\n    response.setHeader('content-type', 'text/html');\\n    response.send('<h1>出错了</h1>'); \\n  },\\n  onAllReady() {\\n    if (isCrawler) {\\n      response.statusCode = didError ? 500 : 200;\\n      response.setHeader('content-type', 'text/html');\\n      pipe(response);      \\n    }\\n  },\\n  onError(error) {\\n    didError = true;\\n    console.error(error);\\n    logServerCrashReport(error);\\n  }\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一个普通的访问者将会得到渐进式加载的内容的一段流。而一个爬虫将会直接得到最终的 HTML 输出。然而，这也意味着爬虫必须等待 \",[\"$r\",\"strong\",null,{\"children\":\"所有\"}],\" 数据加载完毕，其中一部分数据加载可能会很慢甚至可能出现异常报错。具体采取什么策略取决于你的应用程序，你也可以对爬虫只发送 shell 部分。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"aborting-server-rendering\",\"children\":\"终止服务端渲染 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"可以设置一个超时时间，在超时后强制终止服务端渲染：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,5-7}\",\"children\":\"const { pipe, abort } = renderToPipeableStream(<App />, {\\n  // ...\\n});\\n\\nsetTimeout(() => {\\n  abort();\\n}, 10000);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React 将会刷新内容，把剩余的加载中的后备方案转为 HTML，然后尝试在客户端渲染剩下的内容。\"}]]}]]","meta":{"title":"renderToPipeableStream"}},"__N_SSG":true}