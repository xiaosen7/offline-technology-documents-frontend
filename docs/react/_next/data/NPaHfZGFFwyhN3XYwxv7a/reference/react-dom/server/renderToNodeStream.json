{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#rendertonodestream\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"renderToNodeStream(reactNode, options?)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#rendering-a-react-tree-as-html-to-a-nodejs-readable-stream\",\"depth\":3,\"text\":\"为 Node.js 只读流将 React 树渲染为 HTML \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Deprecated\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"此 API 将在未来的 React 主要版本中被移除，请使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToPipeableStream\",\"children\":[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}]}],\"。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToNodeStream\"}],\" 可以为 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html#readable-streams\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 只读流\"}],\" 渲染 React 树。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const stream = renderToNodeStream(reactNode, options?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendertonodestream\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToNodeStream(reactNode, options?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在服务端调用 \",[\"$r\",\"code\",null,{\"children\":\"renderToNodeStream\"}],\" 获取 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html#readable-streams\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 只读流\"}],\"，你也可以将其管道（pipe）传输到响应中。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { renderToNodeStream } from 'react-dom/server';\\n\\nconst stream = renderToNodeStream(<App />);\\nstream.pipe(response);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在客户端调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 使由服务器生成的 HTML 具有交互功能。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：想要渲染为 HTML 的 React 节点。比如像 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\" 一样的 JSX 元素。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"options\"}],\": An object for server render.\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"optional\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\": A string prefix React uses for IDs generated by \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\".\"]}],\" Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed to \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#parameters\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\".\"]}]]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"输出 HTML 字符串的 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html#readable-streams\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 只读流\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"此方法会等待所有 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":\"Suspense 边界\"}],\" 完成后才返回输出。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"从 React 18 开始，此方法会缓冲所有输出，因此实际上它并没有提供任何流式传输的好处。这就是为什么建议改用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToPipeableStream\",\"children\":[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}]}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"返回的是一个 utf-8 编码的字节流。如果你需要其他编码格式的流，请参考 \",[\"$r\",\"a\",null,{\"href\":\"https://www.npmjs.com/package/iconv-lite\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"iconv-lite\"}],\" 这样的项目，它提供了用于转码文本的转换流。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-a-react-tree-as-html-to-a-nodejs-readable-stream\",\"children\":\"为 Node.js 只读流将 React 树渲染为 HTML \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"renderToNodeStream\"}],\" 获取 \",[\"$r\",\"a\",null,{\"href\":\"https://nodejs.org/api/stream.html#readable-streams\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Node.js 只读流\"}],\"，你也可以将其管道（pipe）传输到服务器响应中。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-6}\",\"children\":\"import { renderToNodeStream } from 'react-dom/server';\\n\\n// 路由处理程序的语法取决于使用的后端框架。\\napp.use('/', (request, response) => {\\n  const stream = renderToNodeStream(<App />);\\n  stream.pipe(response);\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里的流会将 React 组件初始输出为非交互式 HTML。在客户端上，你需要调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 方法来 hydrate 服务器生成的 HTML 并使其具有交互功能。\"]}]]}]]","meta":{"title":"renderToNodeStream"}},"__N_SSG":true}