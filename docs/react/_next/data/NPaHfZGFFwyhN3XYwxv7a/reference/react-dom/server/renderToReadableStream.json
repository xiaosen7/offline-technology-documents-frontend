{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#rendertoreadablestream\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream(reactNode, options?)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#rendering-a-react-tree-as-html-to-a-readable-web-stream\",\"depth\":3,\"text\":\"将 React 树渲染为 HTML 并发送至 Web 可读流 \"},{\"url\":\"#streaming-more-content-as-it-loads\",\"depth\":3,\"text\":\"加载时，流传输更多内容 \"},{\"url\":\"#specifying-what-goes-into-the-shell\",\"depth\":3,\"text\":\"指定放入 shell 的内容 \"},{\"url\":\"#logging-crashes-on-the-server\",\"depth\":3,\"text\":\"服务器上的崩溃日志 \"},{\"url\":\"#recovering-from-errors-inside-the-shell\",\"depth\":3,\"text\":\"shell 内部，从报错中恢复程序 \"},{\"url\":\"#recovering-from-errors-outside-the-shell\",\"depth\":3,\"text\":\"shell 外部，从报错中恢复程序 \"},{\"url\":\"#setting-the-status-code\",\"depth\":3,\"text\":\"设置状态码 \"},{\"url\":\"#handling-different-errors-in-different-ways\",\"depth\":3,\"text\":\"以不同的方式处理不同的错误 \"},{\"url\":\"#waiting-for-all-content-to-load-for-crawlers-and-static-generation\",\"depth\":3,\"text\":\"等待加载所有爬虫和静态生成的内容 \"},{\"url\":\"#aborting-server-rendering\",\"depth\":3,\"text\":\"中止服务端渲染 \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}],\" 将 React 树渲染后发送至 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web 可读流\"}],\"。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const stream = await renderToReadableStream(reactNode, options?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"这个 API 依赖 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Streams_API\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web 流\"}],\"，因此在 Node.js 中使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToPipeableStream\",\"children\":[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}]}],\" 代替。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendertoreadablestream\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream(reactNode, options?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}],\"，将 React 树渲染为 HTML 后，发送至 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web 可读流\"}],\" 中。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { renderToReadableStream } from 'react-dom/server';\\n\\nasync function handler(request) {\\n  const stream = await renderToReadableStream(<App />, {\\n    bootstrapScripts: ['/main.js']\\n  });\\n  return new Response(stream, {\\n    headers: { 'content-type': 'text/html' },\\n  });\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在客户端上，调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 使服务器生成的 HTML 变得可交互。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请参阅下面的更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：要渲染为 HTML 的 React 节点。例如，类似 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\" 的 JSX 元素。它应该表示整个文档，因此 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 组件应该渲染 \",[\"$r\",\"code\",null,{\"children\":\"<html>\"}],\" 标签。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选参数\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"options\"}],\"：一个对象，用于对流进行配置。\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"bootstrapScriptContent\"}],\"：如果指定了这个属性值，那么这个字符串会被放置在内联 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签中。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"bootstrapScripts\"}],\"：一个字符串 URL 的数组， 用于在页面上生成 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签。使用它的话，可在 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 中调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\"。如果你根本不想在客户端上运行 React，则忽略它。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"bootstrapModules\"}],\"：就像 \",[\"$r\",\"code\",null,{\"children\":\"bootstrapScripts\"}],\", 但不同的是，生成 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<script type=\\\"module\\\">\"}]}],\" 标签。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\"：一个字符串前缀，React 通过 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useId\"}]}],\" 来生成 ID。在同一页面上使用多个根组件时，有助于避免冲突。必须与传递给 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#parameters\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 的前缀相同。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"namespaceURI\"}],\"：是一个字符串，带有流的根 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createElementNS#important_namespace_uris\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"命名空间URI\"}],\"。默认为常规 HTML。如果用于 SVG，传入 \",[\"$r\",\"code\",null,{\"children\":\"'http://www.w3.org/2000/svg'\"}],\"，如果用于 MathML，传入 \",[\"$r\",\"code\",null,{\"children\":\"'http://www.w3.org/1998/Math/MathML'\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"nonce\"}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"http://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script#nonce\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"nonce\"}]}],\" 字符串，用以使脚本通过 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"script-src\"}],\" 内容安全策略\"]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\"：一个回调函数，只要服务器出错就会触发，无论错误是 \",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-inside-the-shell\",\"children\":\"否\"}],\" 可 \",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-outside-the-shell\",\"children\":\"恢复\"}],\"。默认情况下，它只调用 \",[\"$r\",\"code\",null,{\"children\":\"console.error\"}],\"。如果你用 \",[\"$r\",\"a\",null,{\"href\":\"#logging-crashes-on-the-server\",\"children\":\"log crash reports\"}],\" 重写，请确保你仍然调用 \",[\"$r\",\"code\",null,{\"children\":\"console.error\"}],\"。你还可以使用它在 shell 触发之前 \",[\"$r\",\"a\",null,{\"href\":\"#setting-the-status-code\",\"children\":\"调整状态代码\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"progressiveChunkSize\"}],\"：块中的字节数。\",[\"$r\",\"a\",null,{\"href\":\"https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-server/src/ReactFizzServer.js#L210-L225\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"阅读更多默认启发式方法\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选属性\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"signal\"}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortSignal\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"中止信号\"}],\"，用于 \",[\"$r\",\"a\",null,{\"href\":\"#aborting-server-rendering\",\"children\":\"中止服务端渲染\"}],\" 并在客户端上渲染其余部分。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}],\" 返回一个 Promise：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果渲染 \",[\"$r\",\"a\",null,{\"href\":\"#specifying-what-goes-into-the-shell\",\"children\":\"shell\"}],\" 成功，那么 Promise 将 resolve \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web 可读流\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果渲染 shell 失败，Promise 将 reject。\",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-inside-the-shell\",\"children\":\"使用这个输出后备 shell \"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"返回的流具有附加属性：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"allReady\"}],\"：一个 Promise，在所有的渲染完成后 resolve，包括 \",[\"$r\",\"a\",null,{\"href\":\"#specifying-what-goes-into-the-shell\",\"children\":\"shell\"}],\" 和所有额外的 \",[\"$r\",\"a\",null,{\"href\":\"#streaming-more-content-as-it-loads\",\"children\":\"内容\"}],\"。你可以在响应爬虫和静态资源之前执行 \",[\"$r\",\"code\",null,{\"children\":\"await stream.allReady\"}],\"，这样就不会得到任何渐进的加载内容，流会包含最终的 HTML。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-a-react-tree-as-html-to-a-readable-web-stream\",\"children\":\"将 React 树渲染为 HTML 并发送至 Web 可读流 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}],\" 将 React 渲染为 HTML 并发送至 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Web 可读流\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 4, \\\"<App />\\\"], [2, 5, \\\"['/main.js']\\\"]]\",\"children\":\"import { renderToReadableStream } from 'react-dom/server';\\n\\nasync function handler(request) {\\n  const stream = await renderToReadableStream(<App />, {\\n    bootstrapScripts: ['/main.js']\\n  });\\n  return new Response(stream, {\\n    headers: { 'content-type': 'text/html' },\\n  });\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"除了 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"根组件\"}],\"，你还需要提供 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[\"启动 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 路由\"]}],\" 列表，你的根组件应该返回 \",[\"$r\",\"strong\",null,{\"children\":[\"包括根 \",[\"$r\",\"code\",null,{\"children\":\"<html>\"}],\" 标签的整个 document\"]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如，它可能是这样的：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 1, \\\"App\\\"]]\",\"children\":\"export default function App() {\\n  return (\\n    <html>\\n      <head>\\n        <meta charSet=\\\"utf-8\\\" />\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n        <link rel=\\\"stylesheet\\\" href=\\\"/styles.css\\\"></link>\\n        <title>My app</title>\\n      </head>\\n      <body>\\n        <Router />\\n      </body>\\n    </html>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将把 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/Doctype\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"doctype\"}],\" 和你的 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":[\"启动 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签\"]}],\" 注入到生成的 HTML 流中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"[[2, 5, \\\"/main.js\\\"]]\",\"children\":\"<!DOCTYPE html>\\n<html>\\n  <!-- ... 来自于组件的 HTML ... -->\\n</html>\\n<script src=\\\"/main.js\\\" async=\\\"\\\"></script>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在客户端上，启动脚本应该 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#hydrating-an-entire-document\",\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 混合整个 \",[\"$r\",\"code\",null,{\"children\":\"document\"}],\" \"]}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 4, \\\"<App />\\\"]]\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(document, <App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如此一来，监听事件就挂到了服务器生成的 HTML 上，就可以交互了。\"}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"reading-css-and-js-asset-paths-from-the-build-output\",\"children\":\"从构建输出中读取 CSS 和 JS 的资源路径 \"}],[\"$r\",\"p\",null,{\"children\":[\"最终的资源 URL（像 JavaScript 和 CSS 文件）通常在构建后进行散列。例如，你可能最终得到的不是 \",[\"$r\",\"code\",null,{\"children\":\"styles.css\"}],\" 而是 \",[\"$r\",\"code\",null,{\"children\":\"styles.123456.css\"}],\"。散列静态资源文件名可以保证同一资源的每个不同构建都有不同的文件名。这个方案是有用处的，因为它可以安全地为静态资源开启长期缓存：有了特定名字的文件，其内容就永远不会变。\"]}],[\"$r\",\"p\",null,{\"children\":[\"但是，如果构建之后才能知道静态资源的 URL，那就无法将它们放到源代码中。例如，像前面那样将 \",[\"$r\",\"code\",null,{\"children\":\"\\\"/styles.css\\\"\"}],\" 硬编码到 JSX 中是行不通的。为了将它们保持在源代码之外，根组件可以从 prop 传递的映射中读取真实文件名：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,6}\",\"children\":\"export default function App({ assetMap }) {\\n  return (\\n    <html>\\n      <head>\\n        <title>My app</title>\\n        <link rel=\\\"stylesheet\\\" href={assetMap['styles.css']}></link>\\n      </head>\\n      ...\\n    </html>\\n  );\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"在服务器上，渲染 \",[\"$r\",\"code\",null,{\"children\":\"<App assetMap={assetMap} />\"}],\" 并用资源 URL 传递 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\"：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-5,8,9}\",\"children\":\"// 你需要从构建工具中获得这个 JSON，例如，从构建输出中读取。\\nconst assetMap = {\\n  'styles.css': '/styles.123456.css',\\n  'main.js': '/main.123456.js'\\n};\\n\\nasync function handler(request) {\\n  const stream = await renderToReadableStream(<App assetMap={assetMap} />, {\\n    bootstrapScripts: [assetMap['/main.js']]\\n  });\\n  return new Response(stream, {\\n    headers: { 'content-type': 'text/html' },\\n  });\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"因为服务器正在渲染 \",[\"$r\",\"code\",null,{\"children\":\"<App assetMap={assetMap}/>\"}],\"，所以客户端上也需使用 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\" 来渲染，以避产生混合错误。你可以序列化 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\" 并将其传递给客户端，如下所示：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{9-10}\",\"children\":\"// 你需要从构建工具中获得这个 JSON。\\nconst assetMap = {\\n  'styles.css': '/styles.123456.css',\\n  'main.js': '/main.123456.js'\\n};\\n\\nasync function handler(request) {\\n  const stream = await renderToReadableStream(<App assetMap={assetMap} />, {\\n    // 注意：序列化是安全的，因为这个数据不是用户生成的。\\n    bootstrapScriptContent: `window.assetMap = ${JSON.stringify(assetMap)};`,\\n    bootstrapScripts: [assetMap['/main.js']],\\n  });\\n  return new Response(stream, {\\n    headers: { 'content-type': 'text/html' },\\n  });\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"在上面的示例中，\",[\"$r\",\"code\",null,{\"children\":\"bootstrapScriptContent\"}],\" 配置项添加了一个额外的内联 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签，用于设置客户端上的全局变量 \",[\"$r\",\"code\",null,{\"children\":\"window.assetMap\"}],\"。这允许客户端代码读取相同的 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\"：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(document, <App assetMap={window.assetMap} />);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"因为客户端和服务器都使用相同的 \",[\"$r\",\"code\",null,{\"children\":\"assetMap\"}],\" prop 渲染 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\"，因此没有混合错误。\"]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"streaming-more-content-as-it-loads\",\"children\":\"加载时，流传输更多内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"流式传输允许用户在服务器上加载所有数据前就开始查看内容。例如，有一个个人资料页面，它显示一个封面、一个包含朋友和照片的侧边栏和一个帖子列表：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Sidebar>\\n        <Friends />\\n        <Photos />\\n      </Sidebar>\\n      <Posts />\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"想象一下，加载 \",[\"$r\",\"code\",null,{\"children\":\"<Posts/>\"}],\" 的数据是需要一些时间的。理想情况是希望在不等帖子内容返回的情况下，向用户显示个人资料页面的其余内容。要做到这一点，需要 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#displaying-a-fallback-while-content-is-loading\",\"children\":[\"将 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 包裹在 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界里\"]}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{9,11}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Sidebar>\\n        <Friends />\\n        <Photos />\\n      </Sidebar>\\n      <Suspense fallback={<PostsGlimmer />}>\\n        <Posts />\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"告诉 React 在 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 加载数据之前开始流式传输 HTML。React 将首先发送加载后备 HTML（\",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\"），然后，当 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 完成数据加载后，React 将发送剩余的 HTML，并用该 HTML 替换之前替代内联 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签的后备方案。从用户视角看，该页面会首先显示 \",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\" 的内容，然后被替换为 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 的内容。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以进一步 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#revealing-nested-content-as-it-loads\",\"children\":[\"嵌套 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界\"]}],\" 来创建更细粒度的加载序列：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5,13}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<BigSpinner />}>\\n        <Sidebar>\\n          <Friends />\\n          <Photos />\\n        </Sidebar>\\n        <Suspense fallback={<PostsGlimmer />}>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在本例中，React 可以更早地开始对页面进行流式传输。只有 \",[\"$r\",\"code\",null,{\"children\":\"ProfileLayout\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"ProfileCover\"}],\" 是必须先完成渲染的，因为它们没有封装进任何 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界中。但是，如果 \",[\"$r\",\"code\",null,{\"children\":\"Sidebar\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"Friends\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"Photos\"}],\" 需要加载一些数据，React 将发送 HTML 以供回退 \",[\"$r\",\"code\",null,{\"children\":\"BigSpinner\"}],\"。然后，随着更多的数据变得可用，更多的内容将会被显示，直到所有的内容都可见。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在浏览器中，流不需要等待 React 自身的加载，也不需等待应用变得可交互。在任何 \",[\"$r\",\"code\",null,{\"children\":\"<script>\"}],\" 标签加载之前，来自服务器中的 HTML 内容将会逐步的显示出来。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-18/discussions/37\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"阅读流式 HTML 工作原理的更多信息\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"只有支持 Suspense 的数据源将会激活 Suspense 组件\"}],\"。它们包括：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用支持 Suspense 的框架获取数据，如 \",[\"$r\",\"a\",null,{\"href\":\"https://relay.dev/docs/guided-tour/rendering/loading-states/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Relay\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://nextjs.org/docs/getting-started/react-essentials\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Next.js\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/lazy\",\"children\":[\"$r\",\"code\",null,{\"children\":\"lazy\"}]}],\" 来懒加载组件代码\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/use\",\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" 读取 Promise 的值\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"suspense \",[\"$r\",\"strong\",null,{\"children\":\"不会去探测\"}],\" Effect 内部或事件处理器中获取的数据。\"]}],[\"$r\",\"p\",null,{\"children\":[\"在上面的 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 组件中加载数据的具体方式取决于你的框架。如果你使用一个支持 Suspense 的框架，你可以在其数据获取文档中找到详细信息。\"]}],[\"$r\",\"p\",null,{\"children\":\"目前还不支持在不使用已提到的框架的情况下使用 Suspense 功能的数据提取。实现支持 Suspense 数据源的需求不稳定且没有记录。用 Suspense 集成数据源的官方 API 将在 React 的未来版本中发布。\"}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"specifying-what-goes-into-the-shell\",\"children\":\"指定放入 shell 的内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"应用中任何 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界之外的部分称为 \",[\"$r\",\"em\",null,{\"children\":\"shell\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-5,13,14}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<BigSpinner />}>\\n        <Sidebar>\\n          <Friends />\\n          <Photos />\\n        </Sidebar>\\n        <Suspense fallback={<PostsGlimmer />}>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"它决定了用户可以看到的最早的载入状态：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-5,13}\",\"children\":\"<ProfileLayout>\\n  <ProfileCover />\\n  <BigSpinner />\\n</ProfileLayout>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果将整个应用包装进根组件的 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界中，则 shell 将只包括 spinner。但这种用户体验不好，因为在屏幕上看到一个大 spinner 会比多等一段时间看到真实的布局感觉更慢、更烦人。这就是为什么通常希望放置 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界，以便 shell 看起来是 \",[\"$r\",\"strong\",null,{\"children\":\"最小但完整\"}],\" 的——就像一整个页面布局的骨架。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"只要整个 shell 被渲染了，异步调用 \",[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}],\" 会 resolve 一个 \",[\"$r\",\"code\",null,{\"children\":\"stream\"}],\"。通常情况下，可以创建并返回带有 \",[\"$r\",\"code\",null,{\"children\":\"stream\"}],\" 的响应来开始流式传输。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5}\",\"children\":\"async function handler(request) {\\n  const stream = await renderToReadableStream(<App />, {\\n    bootstrapScripts: ['/main.js']\\n  });\\n  return new Response(stream, {\\n    headers: { 'content-type': 'text/html' },\\n  });\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当返回 \",[\"$r\",\"code\",null,{\"children\":\"stream\"}],\" 时，嵌套在 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 里的组件可能仍在加载数据。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"logging-crashes-on-the-server\",\"children\":\"服务器上的崩溃日志 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"默认情况下，服务器上的所有错误都会被记录到控制台。你可以覆盖此行为，来记录崩溃报告：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-7}\",\"children\":\"async function handler(request) {\\n  const stream = await renderToReadableStream(<App />, {\\n    bootstrapScripts: ['/main.js'],\\n    onError(error) {\\n      console.error(error);\\n      logServerCrashReport(error);\\n    }\\n  });\\n  return new Response(stream, {\\n    headers: { 'content-type': 'text/html' },\\n  });\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你提供了自定义的 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 实现，请不要忘记像上面那样将错误记录到控制台。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"recovering-from-errors-inside-the-shell\",\"children\":\"shell 内部，从报错中恢复程序 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在本例中，shell 包含 \",[\"$r\",\"code\",null,{\"children\":\"ProfileLayout\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"ProfileCover\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-5,7-8}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<PostsGlimmer />}>\\n        <Posts />\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在渲染这些组件时发生错误，React 将不会向客户端发送任何有意义的 HTML。将 \",[\"$r\",\"code\",null,{\"children\":\"renderToReadableStream\"}],\" 的调用放到 \",[\"$r\",\"code\",null,{\"children\":\"try...catch\"}],\" 里，发送一个不依赖服务端渲染的回滚 HTML 作为最后的后备方案：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,13-18}\",\"children\":\"async function handler(request) {\\n  try {\\n    const stream = await renderToReadableStream(<App />, {\\n      bootstrapScripts: ['/main.js'],\\n      onError(error) {\\n        console.error(error);\\n        logServerCrashReport(error);\\n      }\\n    });\\n    return new Response(stream, {\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  } catch (error) {\\n    return new Response('<h1>Something went wrong</h1>', {\\n      status: 500,\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在生成 shell 时出错，\",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"catch\"}],\" 都会被触发。用 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 报告错误，并用 \",[\"$r\",\"code\",null,{\"children\":\"catch\"}],\" 发送后备 HTML。你的后备 HTML 不一定必须是个错误页面。相反，你可以返回一个替代的 shell，这个 shell 只在客户端上渲染你的应用。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"recovering-from-errors-outside-the-shell\",\"children\":\"shell 外部，从报错中恢复程序 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在本例中，\",[\"$r\",\"code\",null,{\"children\":\"<Posts/>\"}],\" 组件被包装在 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 中，因此它不是 shell 的一部分：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6}\",\"children\":\"function ProfilePage() {\\n  return (\\n    <ProfileLayout>\\n      <ProfileCover />\\n      <Suspense fallback={<PostsGlimmer />}>\\n        <Posts />\\n      </Suspense>\\n    </ProfileLayout>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If an error happens in the \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" component or somewhere inside it, React will \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#providing-a-fallback-for-server-errors-and-client-only-content\",\"children\":\"try to recover from it:\"}]]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它将为最近的 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界（\",[\"$r\",\"code\",null,{\"children\":\"PostsGlimmer\"}],\"）触发加载中的后备方案到 HTML。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"它将 \",[\"$r\",\"strong\",null,{\"children\":\"放弃\"}],\" 再尝试在服务器上渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当 JavaScript 代码加载到客户端上时，React \",[\"$r\",\"strong\",null,{\"children\":\"重新尝试\"}],\" 在客户端上渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在客户端上重新尝试渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"也\"}],\" 失败，React 将在客户端上抛出错误。与渲染过程中抛出的所有错误一样，\",[\"$r\",\"a\",null,{\"href\":\"/reference/reflect/Component#staticgetderivedstatefromwerror\",\"children\":\"最近的父级错误边界\"}],\" 决定如何向用户展示错误。在实践中，这意味着用户将看到加载指示符，直到确定错误不可恢复为止。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在客户端上重新尝试渲染 \",[\"$r\",\"code\",null,{\"children\":\"Posts\"}],\" 成功，则从服务器加载中的后备方案将被客户端渲染的输出所取代。用户不会知道有服务器错误。但是，服务器的 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 回调和客户端的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot#hydrateroot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}]}],\" 回调将被触发，以便你可以收到有关错误通知。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"setting-the-status-code\",\"children\":\"设置状态码 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"流传输需要权衡利弊。你希望尽早开始流式传输页面，以便用户能够更快地看到内容。但是，一旦开始流式传输，就无法再设置响应状态码。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过 \",[\"$r\",\"a\",null,{\"href\":\"#specifying-what-goes-into-the-shell\",\"children\":\"把你的应用分割\"}],\" 为 shell（最重要的是 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界）和其他内容，你已经解决了这个问题的一部分。如果 shell 出错，会运行你的 \",[\"$r\",\"code\",null,{\"children\":\"catch\"}],\" 块，允许你设置错误状态码。否则，应用可能会在客户端上恢复，所以你可以发送 \",[\"$r\",\"strong\",null,{\"children\":\"OK\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{11}\",\"children\":\"async function handler(request) {\\n  try {\\n    const stream = await renderToReadableStream(<App />, {\\n      bootstrapScripts: ['/main.js'],\\n      onError(error) {\\n        console.error(error);\\n        logServerCrashReport(error);\\n      }\\n    });\\n    return new Response(stream, {\\n      status: 200,\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  } catch (error) {\\n    return new Response('<h1>Something went wrong</h1>', {\\n      status: 500,\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果 shell \",[\"$r\",\"strong\",null,{\"children\":\"外\"}],\" 的组件（即 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界内）抛出错误，React 将不会停止渲染。这意味着会触发 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 回调，但你的代码会继续运行，不会进入 \",[\"$r\",\"code\",null,{\"children\":\"catch\"}],\" 块。这是因为 React 将尝试从客户端的错误中恢复，\",[\"$r\",\"a\",null,{\"href\":\"#recovering-from-errors-outside-the-shell\",\"children\":\"就像上面描述的那样\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"但是，如果你愿意，你可以使用出现错误的实际情况来设置状态码：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,7,13}\",\"children\":\"async function handler(request) {\\n  try {\\n    let didError = false;\\n    const stream = await renderToReadableStream(<App />, {\\n      bootstrapScripts: ['/main.js'],\\n      onError(error) {\\n        didError = true;\\n        console.error(error);\\n        logServerCrashReport(error);\\n      }\\n    });\\n    return new Response(stream, {\\n      status: didError ? 500 : 200,\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  } catch (error) {\\n    return new Response('<h1>Something went wrong</h1>', {\\n      status: 500,\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这只会捕获 shell 外的报错，那些报错发生在生成初始 shell 内容时，所以它没有具体的报错信息。如果知道某些内容是否发生错误是很重要的，则可以将其向上移动到 shell 中。\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"handling-different-errors-in-different-ways\",\"children\":\"以不同的方式处理不同的错误 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以 \",[\"$r\",\"a\",null,{\"href\":\"https://javascript.info/custom-errors\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"创建自己的 \",[\"$r\",\"code\",null,{\"children\":\"Error\"}],\" 子类\"]}],\" 并使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"instanceof\"}]}],\" 运算符来检查抛出的错误。例如，你可以自定义一个 \",[\"$r\",\"code\",null,{\"children\":\"NotFoundError\"}],\" 并将其从组件中抛出。然后，你可以将错误保存在 \",[\"$r\",\"code\",null,{\"children\":\"onError\"}],\" 中，并根据错误类型在返回响应之前执行不同的操作：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3,5-15,22,28,33}\",\"children\":\"async function handler(request) {\\n  let didError = false;\\n  let caughtError = null;\\n\\n  function getStatusCode() {\\n    if (didError) {\\n      if (caughtError instanceof NotFoundError) {\\n        return 404;\\n      } else {\\n        return 500;\\n      }\\n    } else {\\n      return 200;\\n    }\\n  }\\n\\n  try {\\n    const stream = await renderToReadableStream(<App />, {\\n      bootstrapScripts: ['/main.js'],\\n      onError(error) {\\n        didError = true;\\n        caughtError = error;\\n        console.error(error);\\n        logServerCrashReport(error);\\n      }\\n    });\\n    return new Response(stream, {\\n      status: getStatusCode(),\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  } catch (error) {\\n    return new Response('<h1>Something went wrong</h1>', {\\n      status: getStatusCode(),\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"记住，一旦发出 shell 并开始流传输，就无法更改状态码。\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"waiting-for-all-content-to-load-for-crawlers-and-static-generation\",\"children\":\"等待加载所有爬虫和静态生成的内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"流提供了更好的用户体验，因为用户可以在内容可用时看到内容。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"但是，当爬虫访问你的页面时，或者如果你在构建时生成页面，你可能希望先加载所有内容，然后生成最终的 HTML 输出，而不是逐步显示。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以等 \",[\"$r\",\"code\",null,{\"children\":\"stream.allReady\"}],\" Promise 来加载所有内容：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{12-15}\",\"children\":\"async function handler(request) {\\n  try {\\n    let didError = false;\\n    const stream = await renderToReadableStream(<App />, {\\n      bootstrapScripts: ['/main.js'],\\n      onError(error) {\\n        didError = true;\\n        console.error(error);\\n        logServerCrashReport(error);\\n      }\\n    });\\n    let isCrawler = // ... 取决于你的机器人检测策略 ...\\n    if (isCrawler) {\\n      await stream.allReady;\\n    }\\n    return new Response(stream, {\\n      status: didError ? 500 : 200,\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  } catch (error) {\\n    return new Response('<h1>Something went wrong</h1>', {\\n      status: 500,\\n      headers: { 'content-type': 'text/html' },\\n    });\\n  }\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"普通访问者将获得一个逐步加载的流。所有数据加载之后，爬虫将接收最终的 HTML 输出。然而，这也意味着爬虫将不得不等待 \",[\"$r\",\"strong\",null,{\"children\":\"所有\"}],\" 数据，其中一些数据可能加载缓慢或出错。根据你的应用，你也可以选择将 shell 发给爬虫。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"aborting-server-rendering\",\"children\":\"中止服务端渲染 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"可以在超时后强制服务器 \",[\"$r\",\"strong\",null,{\"children\":\"放弃\"}],\" 渲染：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,4-6,9}\",\"children\":\"async function handler(request) {\\n  try {\\n    const controller = new AbortController();\\n    setTimeout(() => {\\n      controller.abort();\\n    }, 10000);\\n\\n    const stream = await renderToReadableStream(<App />, {\\n      signal: controller.signal,\\n      bootstrapScripts: ['/main.js'],\\n      onError(error) {\\n        didError = true;\\n        console.error(error);\\n        logServerCrashReport(error);\\n      }\\n    });\\n    // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"React 会把剩余的加载中的后备方案刷新为 HTML，并尝试在客户端上渲染其余部分。\"}]]}]]","meta":{"title":"renderToReadableStream"}},"__N_SSG":true}