{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#input\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#displaying-inputs-of-different-types\",\"depth\":3,\"text\":\"展示不同类型的输入框 \"},{\"url\":\"#providing-a-label-for-an-input\",\"depth\":3,\"text\":\"为输入框提供 label 属性 \"},{\"url\":\"#providing-an-initial-value-for-an-input\",\"depth\":3,\"text\":\"为输入框提供初始值 \"},{\"url\":\"#reading-the-input-values-when-submitting-a-form\",\"depth\":3,\"text\":\"提交表单时读取输入框的值 \"},{\"url\":\"#controlling-an-input-with-a-state-variable\",\"depth\":3,\"text\":\"使用 state 控制输入框 \"},{\"url\":\"#optimizing-re-rendering-on-every-keystroke\",\"depth\":3,\"text\":\"优化每次按键时的重新渲染 \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"故障排除 \"},{\"url\":\"#my-text-input-doesnt-update-when-i-type-into-it\",\"depth\":3,\"text\":\"输入时文本框未更新 \"},{\"url\":\"#my-checkbox-doesnt-update-when-i-click-on-it\",\"depth\":3,\"text\":\"点击时多选框未更新 \"},{\"url\":\"#my-input-caret-jumps-to-the-beginning-on-every-keystroke\",\"depth\":3,\"text\":\"当我输入时，输入框光标会跳到开头 \"},{\"url\":\"#im-getting-an-error-a-component-is-changing-an-uncontrolled-input-to-be-controlled\",\"depth\":3,\"text\":\"收到错误：“A component is changing an uncontrolled input to be controlled” \"}]","content":"[[\"$r\",\"MaxWidth\",\"50\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"浏览器内置的 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 组件\"]}],\" 允许你渲染不同类型的表单输入框。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<input />\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"input\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"渲染 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"浏览器内置的 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}]]}],\" 组件以展示输入框。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<input name=\\\"myInput\\\" />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"props\",\"children\":\"属性 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 支持所有 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#props\",\"children\":\"常见的元素属性\"}],\"。\"]}],\"\\n\",[\"$r\",\"Canary\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"React’s extensions to the \",[\"$r\",\"code\",null,{\"children\":\"formAction\"}],\" prop are currently only available in React’s Canary and experimental channels. In stable releases of React, \",[\"$r\",\"code\",null,{\"children\":\"formAction\"}],\" works only as a \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components#all-html-components\",\"children\":\"built-in browser HTML component\"}],\". Learn more about \",[\"$r\",\"a\",null,{\"href\":\"/community/versioning-policy#all-release-channels\",\"children\":\"React’s release channels here\"}],\".\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formaction\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"formAction\"}]}],\": A string or function. Overrides the parent \",[\"$r\",\"code\",null,{\"children\":\"<form action>\"}],\" for \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" and \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\". When a URL is passed to \",[\"$r\",\"code\",null,{\"children\":\"action\"}],\" the form will behave like a standard HTML form. When a function is passed to \",[\"$r\",\"code\",null,{\"children\":\"formAction\"}],\" the function will handle the form submission. See \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/form#props\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<form action>\"}]}],\".\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"You can \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"make an input controlled\"}],\" by passing one of these props:\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"checked\"}],\"：布尔值，控制复选框或单选按钮是否被选中。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"value\"}],\"：字符串，控制文本框的输入文本（如果是单选按钮，则为其表单数据）。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你传递它们之一时，你必须同时传递 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 处理函数，用于更新传递的值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"以下 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 属性仅在非受控输入框中有效：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}],\"：布尔值，指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"checkbox\\\"\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"radio\\\"\"}],\" 输入的 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"初始值\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"：字符串，指定文本框的 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"初始值\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"以下 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 属性均可用于受控与非受控输入框：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"accept\"}],\"：字符串，指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"file\\\"\"}],\" 输入框所接受的文件类型。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"alt\"}],\"：字符串，指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 输入框的替代图像文本。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"capture\"}],\"：字符串，指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"file\\\"\"}],\" 输入框所捕获的媒体（麦克风、视频或摄像头）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"autoComplete\"}],\"：字符串，指定可能的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/autocomplete#values\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"自动填充行为\"}],\" 之一。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"autoFocus\"}],\"：布尔值。如果为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，React 将在挂载时聚焦于此元素。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"dirname\"}],\"：字符串，指定元素的方向性的表单字段名称。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"disabled\"}],\"：布尔值。如果为\",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，输入框将无法交互并显示为不可用（dimmed）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 不接受子元素。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"form\"}],\"：字符串，指定此输入框所属的 \",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\"。如果未指定，则为最近的父表单。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"formAction\"}],\"：字符串。输入框指定此值并指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 后将覆盖父表单对应属性 \",[\"$r\",\"code\",null,{\"children\":\"<form action>\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"formEnctype\"}],\"：字符串。输入框指定此值并指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 后将覆盖父表单对应属性 \",[\"$r\",\"code\",null,{\"children\":\"<form enctype>\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"formMethod\"}],\"：字符串。输入框指定此值并指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 后将覆盖父表单对应属性 \",[\"$r\",\"code\",null,{\"children\":\"<form method>\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"formNoValidate\"}],\"：字符串。输入框指定此值并指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 后将覆盖父表单对应属性 \",[\"$r\",\"code\",null,{\"children\":\"<form noValidate>\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"formTarget\"}],\"：字符串。输入框指定此值并指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"submit\\\"\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 后将覆盖父表单对应属性 \",[\"$r\",\"code\",null,{\"children\":\"<form target>\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"height\"}],\"：字符串，指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 的图像高度。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"list\"}],\"：字符串，指定带有自动完成选项的 \",[\"$r\",\"code\",null,{\"children\":\"<datalist>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"max\"}],\"：数字，指定数值和日期时间输入的最大值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"maxLength\"}],\"：数字，指定文本和其他输入的最大长度。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"min\"}],\"：数字，指定数值和日期时间输入的最小值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"minLength\"}],\"：数字，指定文本和其他输入的最小长度。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"multiple\"}],\"：布尔值，指定是否允许 \",[\"$r\",\"code\",null,{\"children\":\"<type=\\\"file\\\"\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"email\\\"\"}],\" 指定多个值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"name\"}],\"：字符串，指定此输入框的名称，它将 \",[\"$r\",\"a\",null,{\"href\":\"#reading-the-input-values-when-submitting-a-form\",\"children\":\"随表单一起提交\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Event\"}]}],\" 处理函数。如果这是 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"受控输入框\"}],\"，则必须提供。在用户更改输入框的值时立即触发（例如，每次按键时触发）。行为类似于浏览器的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"input\"}]}],\" 事件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onChangeCapture\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 类似，但是是在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"捕获阶段\"}],\" 触发。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInput\"}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Event\"}]}],\" 处理函数。在用户更改值时立即触发。由于历史原因，在 React 中习惯于使用 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\"，工作方式类似。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInputCapture\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"onInput\"}],\" 类似，但是是在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"捕获阶段\"}],\" 触发。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Event\"}]}],\" 处理函数。在表单提交时，如果输入框未通过验证将触发。与内置的 \",[\"$r\",\"code\",null,{\"children\":\"invalid\"}],\" 事件不同，React 的 \",[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}],\" 事件可以进行冒泡。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInvalidCapture\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}],\" 类似，但是是在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"捕获阶段\"}],\" 触发。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onSelect\"}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Event\"}]}],\" 处理函数。在 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 内的选择更改后触发。React 扩展了 \",[\"$r\",\"code\",null,{\"children\":\"onSelect\"}],\" 事件，使其也能在选择为空和编辑时触发（可能会影响选择）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onSelectCapture\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"onSelect\"}],\" 类似，但是是在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"捕获阶段\"}],\" 触发。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"pattern\"}],\"：字符串，指定 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 必须匹配的模式。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"placeholder\"}],\"：字符串，当输入值为空时，以暗淡的颜色显示的内容。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\"：布尔值。如果为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，用户无法编辑输入。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"required\"}],\"：布尔值。如果为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，提交表单时必须提供此输入框的值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"size\"}],\"：数字，类似于设置宽度，但单位取决于控件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"src\"}],\"：字符串，指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 输入框的图像源。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"step\"}],\"：正数或 \",[\"$r\",\"code\",null,{\"children\":\"'any'\"}],\" 字符串，指定有效值之间的距离。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"type\"}],\"：字符串，\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#input_types\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"输入框类型\"}],\" 中的一个。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"width\"}],\"：字符串，指定 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"image\\\"\"}],\" 输入框的图像宽度。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"复选框需要使用 \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}],\"，而不是 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果文本框接收到字符串类型的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性，则会被 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"视为受控组件\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果复选框或单选按钮接收到布尔类型的 \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" 属性，则会被 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"视为受控组件\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一个输入框不能同时既是受控组件又是非受控组件。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"一个输入框在其生命周期中不能在受控和非受控之间切换。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"每个受控组件都需要一个 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 事件处理函数，用于同步更新其值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-inputs-of-different-types\",\"children\":\"展示不同类型的输入框 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"渲染 \",[\"$r\",\"code\",null,{\"children\":\"input\"}],\" 组件展示输入框。默认情况下，这是一个文本框。你可以传递 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"checkbox\\\"\"}],\" 将其指定为多选框；或者传递 \",[\"$r\",\"code\",null,{\"children\":\"type=\\\"radio\\\"\"}],\" 将其指定为单选按钮；\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#input_types\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"你也可以将其指定为其他类型\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function MyForm() {\\n  return (\\n    <>\\n      <label>\\n        文本框：<input name=\\\"myInput\\\" />\\n      </label>\\n      <hr />\\n      <label>\\n        多选框<input type=\\\"checkbox\\\" name=\\\"myCheckbox\\\" />\\n      </label>\\n      <hr />\\n      <p>\\n        单选按钮：\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option1\\\" />\\n          选项一\\n        </label>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option2\\\" />\\n          选项二\\n        </label>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option3\\\" />\\n          选项三\\n        </label>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"60\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"providing-a-label-for-an-input\",\"children\":\"为输入框提供 label 属性 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一般而言，应该将每个 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 都放置在 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/label\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<label>\"}]}],\" 内，表示此标签与该选择框相关联。当用户单击标签时，浏览器将自动聚焦选择框。这对于可访问性也非常重要：当用户聚焦选择框时，屏幕阅读器将宣布标签标题。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果无法将 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 放置在 \",[\"$r\",\"code\",null,{\"children\":\"<label>\"}],\" 内，请通过将相同的 ID 传递给 \",[\"$r\",\"code\",null,{\"children\":\"<input id>\"}],\" 与 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLLabelElement/htmlFor\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<label htmlFor>\"}]}],\" 来将它们关联起来。为了避免一个组件的多实例之间的冲突，使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":\"useId\"}],\" 生成这样的 ID。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useId } from 'react';\\n\\nexport default function Form() {\\n  const ageInputId = useId();\\n  return (\\n    <>\\n      <label>\\n        你的名称：\\n        <input name=\\\"firstName\\\" />\\n      </label>\\n      <hr />\\n      <label htmlFor={ageInputId}>你的年龄：</label>\\n      <input id={ageInputId} name=\\\"age\\\" type=\\\"number\\\" />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"68\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"providing-an-initial-value-for-an-input\",\"children\":\"为输入框提供初始值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以为任何输入框指定初始值。如果要为文本框指定初始值，传递字符串 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"；如果要为复选框和单选按钮指定初始值，传递布尔值 \",[\"$r\",\"code\",null,{\"children\":\"defaultChecked\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function MyForm() {\\n  return (\\n    <>\\n      <label>\\n        文本框：<input name=\\\"myInput\\\" defaultValue=\\\"Some initial value\\\" />\\n      </label>\\n      <hr />\\n      <label>\\n        多选框：<input type=\\\"checkbox\\\" name=\\\"myCheckbox\\\" defaultChecked={true} />\\n      </label>\\n      <hr />\\n      <p>\\n        单选按钮：\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option1\\\" />\\n          选项一\\n        </label>\\n        <label>\\n          <input\\n            type=\\\"radio\\\"\\n            name=\\\"myRadio\\\"\\n            value=\\\"option2\\\"\\n            defaultChecked={true} \\n          />\\n          选项二\\n        </label>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option3\\\" />\\n          选项三\\n        </label>\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"76\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-the-input-values-when-submitting-a-form\",\"children\":\"提交表单时读取输入框的值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在输入框周围添加一个包含 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"submit\\\">\"}]}],\" 按钮的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<form>\"}]}],\" 组件。这将调用 \",[\"$r\",\"code\",null,{\"children\":\"<form onSubmit>\"}],\" 事件处理程序。默认情况下，浏览器将向当前 URL 发送表单数据并刷新页面。你可以通过调用 \",[\"$r\",\"code\",null,{\"children\":\"e.preventDefault()\"}],\" 取消此默认行为，并使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"new FormData(e.target)\"}]}],\" 读取表单数据。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function MyForm() {\\n  function handleSubmit(e) {\\n    // 阻止浏览器重新加载页面\\n    e.preventDefault();\\n\\n    // 读取表单数据\\n    const form = e.target;\\n    const formData = new FormData(form);\\n\\n    // 你可以直接将 formData 作为 fetch 的请求 body：\\n    fetch('/some-api', { method: form.method, body: formData });\\n\\n    // 也可以使用普通的对象：\\n    const formJson = Object.fromEntries(formData.entries());\\n    console.log(formJson);\\n  }\\n\\n  return (\\n    <form method=\\\"post\\\" onSubmit={handleSubmit}>\\n      <label>\\n        文本框：<input name=\\\"myInput\\\" defaultValue=\\\"Some initial value\\\" />\\n      </label>\\n      <hr />\\n      <label>\\n        多选框： <input type=\\\"checkbox\\\" name=\\\"myCheckbox\\\" defaultChecked={true} />\\n      </label>\\n      <hr />\\n      <p>\\n        单选按钮：\\n        <label><input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option1\\\" /> 选项一</label>\\n        <label><input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option2\\\" defaultChecked={true} /> 选项二</label>\\n        <label><input type=\\\"radio\\\" name=\\\"myRadio\\\" value=\\\"option3\\\" /> 选项三</label>\\n      </p>\\n      <hr />\\n      <button type=\\\"reset\\\">重置表单</button>\\n      <button type=\\\"submit\\\">提交表单</button>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"102\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"给 \",[\"$r\",\"code\",null,{\"children\":\"<input>\"}],\" 添加 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" 属性，例如 \",[\"$r\",\"code\",null,{\"children\":\"<input name=\\\"firstName\\\" defaultValue=\\\"Taylor\\\" />\"}],\"。指定的 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" 将作为表单数据中的一个键，例如 \",[\"$r\",\"code\",null,{\"children\":\"{ firstName: \\\"Taylor\\\" }\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"默认情况下，\",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" 内的任何 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 都可以提交表单。这可能会让人感到惊讶！如果你有自定义 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件，请考虑使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input/button\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"button\\\">\"}]}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\"。如果你想要明确指定提交表单的按钮，请使用 \",[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"submit\\\">\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"controlling-an-input-with-a-state-variable\",\"children\":\"使用 state 控制输入框 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"像 \",[\"$r\",\"code\",null,{\"children\":\"<input />\"}],\" 这样的输入框是非受控的。即使你像 \",[\"$r\",\"code\",null,{\"children\":\"<input defaultValue=\\\"Initial text\\\" />\"}],\" 一样 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"传递了初始值\"}],\"，你的 JSX 也只是指定了初始值，而非当前时刻的值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"如果要渲染一个受控输入框，请传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性（或者向多选框和单选按钮传递 \",[\"$r\",\"code\",null,{\"children\":\"checked\"}]]}],\"。React 将强制传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性给输入框。通常，你可以通过声明一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"state\"}],\" 来控制输入框。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,6,7}\",\"children\":\"function Form() {\\n  const [firstName, setFirstName] = useState(''); // 声明一个 state 变量...\\n  // ...\\n  return (\\n    <input\\n      value={firstName} // ...强制输入框的值与 state 相匹配...\\n      onChange={e => setFirstName(e.target.value)} // ... 并在每次改变（change）时更新 state！\\n    />\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你需要 state 时，受控输入框都将非常有用——比如，每次编辑时都重新渲染 UI：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,9}\",\"children\":\"function Form() {\\n  const [firstName, setFirstName] = useState('');\\n  return (\\n    <>\\n      <label>\\n        你的名称：\\n        <input value={firstName} onChange={e => setFirstName(e.target.value)} />\\n      </label>\\n      {firstName !== '' && <p>你的名称是 {firstName}。</p>}\\n      ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你想提供多种方式来调整输入框 state（例如，通过单击按钮），它也会很有用：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-4,10-11,14}\",\"children\":\"function Form() {\\n  // ...\\n  const [age, setAge] = useState('');\\n  const ageAsNumber = Number(age);\\n  return (\\n    <>\\n      <label>\\n        年龄：\\n        <input\\n          value={age}\\n          onChange={e => setAge(e.target.value)}\\n          type=\\\"number\\\"\\n        />\\n        <button onClick={() => setAge(ageAsNumber + 10)}>\\n          增加 10 年\\n        </button>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"传递给受控组件的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性不能是 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。如果你需要初始值为空（例如，下面的 \",[\"$r\",\"code\",null,{\"children\":\"firstName\"}],\" 字段），请将你的 state 变量初始化为空字符串（\",[\"$r\",\"code\",null,{\"children\":\"''\"}],\"）。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function Form() {\\n  const [firstName, setFirstName] = useState('');\\n  const [age, setAge] = useState('20');\\n  const ageAsNumber = Number(age);\\n  return (\\n    <>\\n      <label>\\n        名：\\n        <input\\n          value={firstName}\\n          onChange={e => setFirstName(e.target.value)}\\n        />\\n      </label>\\n      <label>\\n        年龄：\\n        <input\\n          value={age}\\n          onChange={e => setAge(e.target.value)}\\n          type=\\\"number\\\"\\n        />\\n        <button onClick={() => setAge(ageAsNumber + 10)}>\\n          增加 10 年\\n        </button>\\n      </label>\\n      {firstName !== '' &&\\n        <p>你的名称是 {firstName}。</p>\\n      }\\n      {ageAsNumber > 0 &&\\n        <p>你的年龄是 {ageAsNumber}。</p>\\n      }\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label { display: block; }\\ninput { margin: 5px; }\\np { font-weight: bold; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"如果传递了 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 但没有传递 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\"，那么将无法输入内容。当你通过传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 来控制输入框时，你需要保证输入框始终具有你传递的值。因此，如果你将一个 state 作为 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 传递，但在 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 事件处理程序中忘记同步更新该状态变量，React 将在每次输入后将输入框恢复到指定的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"optimizing-re-rendering-on-every-keystroke\",\"children\":\"优化每次按键时的重新渲染 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当你使用受控输入框时，每次按键都会设置 state。如果包含 state 的组件重新渲染了大型树形结构，这可能会变得很慢。有几种方法可以优化重新渲染的性能。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如，假设表单在每次按键时会重新渲染所有页面内容：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-8}\",\"children\":\"function App() {\\n  const [firstName, setFirstName] = useState('');\\n  return (\\n    <>\\n      <form>\\n        <input value={firstName} onChange={e => setFirstName(e.target.value)} />\\n      </form>\\n      <PageContent />\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于 \",[\"$r\",\"code\",null,{\"children\":\"<PageContent />\"}],\" 不依赖于输入框 state，因此可以将输入框 state 移入其自己的组件中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,10-17}\",\"children\":\"function App() {\\n  return (\\n    <>\\n      <SignupForm />\\n      <PageContent />\\n    </>\\n  );\\n}\\n\\nfunction SignupForm() {\\n  const [firstName, setFirstName] = useState('');\\n  return (\\n    <form>\\n      <input value={firstName} onChange={e => setFirstName(e.target.value)} />\\n    </form>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这样可以显著提高性能，因为每次按键时只有 \",[\"$r\",\"code\",null,{\"children\":\"SignupForm\"}],\" 会重新渲染。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果无法避免重新渲染（例如，如果 \",[\"$r\",\"code\",null,{\"children\":\"PageContent\"}],\" 依赖于搜索输入框的值），\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useDeferredValue#deferring-re-rendering-for-a-part-of-the-ui\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}]}],\" 可以帮助你在大型重新渲染过程中保持受控输入框的响应性（responsive）。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"故障排除 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-text-input-doesnt-update-when-i-type-into-it\",\"children\":\"输入时文本框未更新 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果传递了 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性给输入框，而没有传递 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 属性，那么你将在控制台看到错误信息：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 🔴 Bug：没有 onChange 事件处理程序的受控文本框\\n<input value={something} />\\n\"}]}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":[\"你传递了 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性给表单，但是没有传递 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 事件处理程序。这将使其变为只读。如果该字段应该是可变的，请使用 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"。否则，设置 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"正如错误信息所提示的，如果你仅仅是想要 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"指定初始值\"}],\"，请传递 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good：有初始值的非受控输入框\\n<input defaultValue={something} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你想要 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"使用 state 变量控制输入框\"}],\"，指定 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 事件处理程序：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good：具有 onChange 事件处理程序的受控输入框\\n<input value={something} onChange={e => setSomething(e.target.value)} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果输入框是只读的，额外传递 \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\" 属性：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good：没有 onChange 事件处理程序的受控只读输入框\\n<input value={something} readOnly={true} />\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-checkbox-doesnt-update-when-i-click-on-it\",\"children\":\"点击时多选框未更新 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果传递了 \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" 属性给多选框，而没有传递 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 属性，那么你将在控制台看到错误信息：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 🔴 Bug：没有 onChange 事件处理程序的受控多选框\\n<input type=\\\"checkbox\\\" checked={something} />\\n\"}]}],\"\\n\",[\"$r\",\"ConsoleBlock\",null,{\"level\":\"error\",\"children\":[\"$r\",\"p\",null,{\"children\":[\"你传递了 \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" 属性给表单，但是没有传递 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 事件处理程序。这将使其变为只读。如果该字段应该是可变的，请使用 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"。否则，设置 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"正如错误信息所提示的，如果你仅仅是想要 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initial-value-for-an-input\",\"children\":\"指定初始值\"}],\"，请传递 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good：有初始值的非受控多选框\\n<input type=\\\"checkbox\\\" defaultChecked={something} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If you want \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"to control this checkbox with a state variable,\"}],\" specify an \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" handler:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good：具有 onChange 事件处理程序的受控多选框\\n<input type=\\\"checkbox\\\" checked={something} onChange={e => setSomething(e.target.checked)} />\\n\"}]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"如果你想要读取多选框中选中的值，应该使用 \",[\"$r\",\"code\",null,{\"children\":\"e.target.checked\"}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"e.target.value\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果多选框是只读的，额外传递 \",[\"$r\",\"code\",null,{\"children\":\"readOnly\"}],\" 属性：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// ✅ Good：没有 onChange 事件处理程序的受控只读输入框\\n<input type=\\\"checkbox\\\" checked={something} readOnly={true} />\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-input-caret-jumps-to-the-beginning-on-every-keystroke\",\"children\":\"当我输入时，输入框光标会跳到开头 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你想要 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-an-input-with-a-state-variable\",\"children\":\"控制输入框\"}],\"，你应该在 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 期间将对应的 state 变量更新为来自 DOM 的输入框的值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你不应该将它更新为 \",[\"$r\",\"code\",null,{\"children\":\"e.target.value\"}],\"（对于多选框应该是 \",[\"$r\",\"code\",null,{\"children\":\"e.target.checked\"}],\"）以外的值：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleChange(e) {\\n  // 🔴 Bug：将输入框更新为 e.target.value 以外的值\\n  setFirstName(e.target.value.toUpperCase());\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你也不应该异步更新：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleChange(e) {\\n  // 🔴 Bug：异步更新输入框\\n  setTimeout(() => {\\n    setFirstName(e.target.value);\\n  }, 100);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"将 state 同步更新为 \",[\"$r\",\"code\",null,{\"children\":\"e.target.value\"}],\" 以解决此问题：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function handleChange(e) {\\n  // ✅ 将受控输入框的值同步更新为 e.target.value\\n  setFirstName(e.target.value);\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果这不能解决问题，有可能是因为每次输入时输入框都从 DOM 中删除并重新添加。同样，如果在每次重新渲染时不小心 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"重置了 state\"}],\"，就会发生这种情况。例如，如果输入框或其祖先组件总是接收不同的 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\"，或者嵌套使用组件（这在 React 中是不允许的，并且会导致“内部”组件在每次渲染时重新挂载），就会发生这种情况。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"im-getting-an-error-a-component-is-changing-an-uncontrolled-input-to-be-controlled\",\"children\":\"收到错误：“A component is changing an uncontrolled input to be controlled” \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"提供的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性必须在整个生命周期中都为字符串。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你不能一会传递 \",[\"$r\",\"code\",null,{\"children\":\"value={undefined}\"}],\" 一会传递 \",[\"$r\",\"code\",null,{\"children\":\"value=\\\"some string\\\"\"}],\"，这会导致 React 不清楚你是想指定受控组件还是非受控组件。受控组件的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性应该始终接收字符串，而不是 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 来自 API 或 state，它可能会被初始化为 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"。在这种情况下，要么最初将其设置为空字符串（\",[\"$r\",\"code\",null,{\"children\":\"''\"}],\"），要么传递 \",[\"$r\",\"code\",null,{\"children\":\"value={someValue ?? ''}\"}],\" 以确保 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 是一个字符串。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"类似的，如果传递 \",[\"$r\",\"code\",null,{\"children\":\"checked\"}],\" 属性给多选框，请确保它始终是布尔值。\"]}]]}]]","meta":{"title":"<input>"}},"__N_SSG":true}