{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#select\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#displaying-a-select-box-with-options\",\"depth\":3,\"text\":\"显示带有选项的选择框 \"},{\"url\":\"#providing-a-label-for-a-select-box\",\"depth\":3,\"text\":\"为选择框提供 label 属性 \"},{\"url\":\"#providing-an-initially-selected-option\",\"depth\":3,\"text\":\"提供选项初始值 \"},{\"url\":\"#enabling-multiple-selection\",\"depth\":3,\"text\":\"支持多选 \"},{\"url\":\"#reading-the-select-box-value-when-submitting-a-form\",\"depth\":3,\"text\":\"提交表单时读取选择框的值 \"},{\"url\":\"#controlling-a-select-box-with-a-state-variable\",\"depth\":3,\"text\":\"使用 state 控制选择框 \"}]","content":"[[\"$r\",\"MaxWidth\",\"46\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"浏览器内置的 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 组件\"]}],\" 允许你结合选项（options）渲染选择框。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<select>\\n  <option value=\\\"一些选项\\\">一些选项</option>\\n  <option value=\\\"其他选项\\\">其他选项</option>\\n</select>\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"select\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"浏览器内置的 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 组件\"]}],\" 结合选项（options）渲染选择框。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<select>\\n  <option value=\\\"一些选项\\\">一些选项</option>\\n  <option value=\\\"其他选项\\\">其他选项</option>\\n</select>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"props\",\"children\":\"属性 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 支持所有 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#props\",\"children\":\"常见的元素属性\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以通过传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-a-select-box-with-a-state-variable\",\"children\":\"以控制选择框\"}],\":\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"value\"}],\"：一个字符串（如果指定 \",[\"$r\",\"a\",null,{\"href\":\"#enabling-multiple-selection\",\"children\":[\"$r\",\"code\",null,{\"children\":\"multiple={true}\"}]}],\"，那么 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 也可以是一个字符串数组）。当某一个选项（option）被选中时，\",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 为其对应的值。每个字符串值都与嵌套在 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 内的 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性相匹配。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 时，你必须同时传递一个 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 处理函数，用于更新传递的值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 是非受控组件，那么你应该传递 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" 参数：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"：一个字符串（如果指定 \",[\"$r\",\"a\",null,{\"href\":\"#enabling-multiple-selection\",\"children\":[\"$r\",\"code\",null,{\"children\":\"multiple={true}\"}]}],\"，那么 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" 也可以是一个字符串数组）。\",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" 表示 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initially-selected-option\",\"children\":\"初始选中的选项（option）\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"以下 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 属性均可用于受控与非受控选择框组件：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#autocomplete\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"autoComplete\"}]}],\"：字符串，用于指定可能的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Attributes/autocomplete#values\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"自动完成行为\"}],\" 之一。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#autofocus\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"autoFocus\"}]}],\"：布尔值。如果为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，React 将在挂载时聚焦该元素。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 接受 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/option\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<option>\"}]}],\"、\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/optgroup\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<optgroup>\"}]}],\" 与 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/datalist\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<datalist>\"}]}],\" 组件作为子元素。只要最终渲染的是其中之一，你也可以传递自己的组件。如果最终渲染的是 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\"，则每个 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 都必须具有 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#disabled\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"disabled\"}]}],\"：布尔值。如果为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，选择框将不会交互并展示为暗淡状态（dimmed）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#form\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"form\"}]}],\"：字符串，表示此选择框所属的 \",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"id\"}],\"。如果未指定，则为最近的父表单。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#multiple\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"multiple\"}]}],\"：布尔值。如果为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，则浏览器允许 \",[\"$r\",\"a\",null,{\"href\":\"#enabling-multiple-selection\",\"children\":\"多选\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#name\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"name\"}]}],\"：字符串，用于指定此选择框的名称，该名称将在 \",[\"$r\",\"a\",null,{\"href\":\"#reading-the-select-box-value-when-submitting-a-form\",\"children\":\"提交表单时\"}],\" 一起提交。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Event\"}],\" 处理函数\"]}],\"，其对于 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-a-select-box-with-a-state-variable\",\"children\":\"受控选择框\"}],\" 是必需的。当用户选择不同的选项时立即触发。此行为类似于浏览器 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"input\"}],\" 事件\"]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onChangeCapture\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 类似，但是是在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"捕获阶段\"}],\" 触发的。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"onInput\"}]}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Event\"}],\" 处理函数\"]}],\"。当用户更改值时立即触发。由于历史原因，在 React 习惯于使用 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\"，工作方式类似。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInputCapture\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"onInput\"}],\" 类似，但是是在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"捕获阶段\"}],\" 触发的。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLInputElement/invalid_event\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}]}],\"：一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/components/common#event-handler\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"Event\"}],\" 处理函数\"]}],\"。如果输入的内容在表单提交时未通过验证，则会触发此事件。与内置的 \",[\"$r\",\"code\",null,{\"children\":\"invalid\"}],\" 事件不同，React 的 \",[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}],\" 事件可以进行冒泡。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"onInvalidCapture\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"onInvalid\"}],\" 类似，但是是在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/responding-to-events#capture-phase-events\",\"children\":\"捕获阶段\"}],\" 触发的。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#required\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"required\"}]}],\"：布尔值。如果为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"，则必须提供值才能提交表单。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/select#size\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"size\"}]}],\"：数字。当指定 \",[\"$r\",\"code\",null,{\"children\":\"multiple={true}\"}],\" 时可选，表示同时可见的项目数。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"与 HTML 不同，在 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 上传递 \",[\"$r\",\"code\",null,{\"children\":\"selected\"}],\" 属性将不受支持。你应该使用 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initially-selected-option\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<select defaultValue>\"}]}],\" 处理非受控选择框；而使用 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-a-select-box-with-a-state-variable\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<select value>\"}]}],\" 处理受控选择框。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果选择框收到 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性，它将被视为 \",[\"$r\",\"a\",null,{\"href\":\"#controlling-a-select-box-with-a-state-variable\",\"children\":\"受控组件\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"选择框不能同时受控与非受控。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"选择框在其生命周期内无法在受控与非受控之间切换。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"每个受控选择框都需要 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 事件处理程序，它会同步更新其后备值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-a-select-box-with-options\",\"children\":\"显示带有选项的选择框 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"渲染一个包含一系列 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 组件的 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\"，来展示一个选择框，并给每个 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 都设置一个 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性，表示要与表单一起提交的数据。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function FruitPicker() {\\n  return (\\n    <label>\\n      选择一个水果：\\n      <select name=\\\"精选水果\\\">\\n        <option value=\\\"苹果\\\">苹果</option>\\n        <option value=\\\"香蕉\\\">香蕉</option>\\n        <option value=\\\"橘子\\\">橘子</option>\\n      </select>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"select { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"56\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"providing-a-label-for-a-select-box\",\"children\":\"为选择框提供 label 属性 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一般而言，应该将每个 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 都放置在 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/label\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<label>\"}]}],\" 内，表示此标签与该选择框相关联。当用户单击标签时，浏览器将自动聚焦选择框。这对于可访问性也非常重要：当用户聚焦选择框时，屏幕阅读器将宣布标签标题。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果无法将 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 放置在 \",[\"$r\",\"code\",null,{\"children\":\"<label>\"}],\" 内，请通过将相同的 ID 传递给 \",[\"$r\",\"code\",null,{\"children\":\"<select id>\"}],\" 与 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLLabelElement/htmlFor\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<label htmlFor>\"}]}],\" 来将它们关联起来。为了避免一个组件的多实例之间的冲突，使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useId\"}]}],\" 生成这样的 ID。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useId } from 'react';\\n\\nexport default function Form() {\\n  const vegetableSelectId = useId();\\n  return (\\n    <>\\n      <label>\\n        选择一个水果：\\n        <select name=\\\"精选水果\\\">\\n          <option value=\\\"苹果\\\">苹果</option>\\n          <option value=\\\"香蕉\\\">香蕉</option>\\n          <option value=\\\"橘子\\\">橘子</option>\\n        </select>\\n      </label>\\n      <hr />\\n      <label htmlFor={vegetableSelectId}>\\n        选择一种蔬菜：\\n      </label>\\n      <select id={vegetableSelectId} name=\\\"精选蔬菜\\\">\\n        <option value=\\\"黄瓜\\\">黄瓜</option>\\n        <option value=\\\"玉米\\\">玉米</option>\\n        <option value=\\\"番茄\\\">番茄</option>\\n      </select>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"select { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"64\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"providing-an-initially-selected-option\",\"children\":\"提供选项初始值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"默认情况下，浏览器将选择第一个 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 作为初始值。你可以将其他 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" 传递给 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 组件。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function FruitPicker() {\\n  return (\\n    <label>\\n      选择一个水果：\\n      <select name=\\\"精选水果\\\" defaultValue=\\\"橘子\\\">\\n        <option value=\\\"苹果\\\">苹果</option>\\n        <option value=\\\"香蕉\\\">香蕉</option>\\n        <option value=\\\"橘子\\\">橘子</option>\\n      </select>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"select { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"74\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"与 HTML 不同，在 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 上传递 \",[\"$r\",\"code\",null,{\"children\":\"selected\"}],\" 属性将不受支持。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"enabling-multiple-selection\",\"children\":\"支持多选 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以通过在 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 指定 \",[\"$r\",\"code\",null,{\"children\":\"multiple={true}\"}],\" 设置多选。如果这样做，那么你也应该向 \",[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\" 传递一个字符串数组，以指定选中初始值。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function FruitPicker() {\\n  return (\\n    <label>\\n      选择一些水果\\n      <select\\n        name=\\\"精选水果\\\"\\n        defaultValue={['橘子', '香蕉']}\\n        multiple={true}\\n      >\\n        <option value=\\\"苹果\\\">苹果</option>\\n        <option value=\\\"香蕉\\\">香蕉</option>\\n        <option value=\\\"橘子\\\">橘子</option>\\n      </select>\\n    </label>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"select { display: block; margin-top: 10px; width: 200px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"82\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"reading-the-select-box-value-when-submitting-a-form\",\"children\":\"提交表单时读取选择框的值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在选择框周围添加一个包含 \",[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"submit\\\">\"}],\" 按钮的 \",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" 组件。这将调用 \",[\"$r\",\"code\",null,{\"children\":\"<form onSubmit>\"}],\" 事件处理程序。默认情况下，浏览器将向当前 URL 发送表单数据并刷新页面。你可以通过调用 \",[\"$r\",\"code\",null,{\"children\":\"e.preventDefault()\"}],\" 取消此默认行为，并使用 \",[\"$r\",\"code\",null,{\"children\":\"new FormData(e.target)\"}],\" 读取表单数据。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function EditPost() {\\n  function handleSubmit(e) {\\n    // 阻止浏览器重新加载页面\\n    e.preventDefault();\\n    // 读取表单数据\\n    const form = e.target;\\n    const formData = new FormData(form);\\n    // 你可以直接将 formData 作为 fetch 的请求 body：\\n    fetch('/some-api', { method: form.method, body: formData });\\n    // 你可以像浏览器默认的一样，将其转换为 URL：\\n    console.log(new URLSearchParams(formData).toString());\\n    // 也可以使用普通的对象：\\n    const formJson = Object.fromEntries(formData.entries());\\n    console.log(formJson); // （！）这并不包含多选值\\n    // 或者你可以使用 name 与 value 相匹配的数组对\\n    console.log([...formData.entries()]);\\n  }\\n\\n  return (\\n    <form method=\\\"post\\\" onSubmit={handleSubmit}>\\n      <label>\\n        选择你最喜欢的水果\\n        <select name=\\\"精选水果\\\" defaultValue=\\\"橘子\\\">\\n          <option value=\\\"苹果\\\">苹果</option>\\n          <option value=\\\"香蕉\\\">香蕉</option>\\n          <option value=\\\"橘子\\\">橘子</option>\\n        </select>\\n      </label>\\n      <label>\\n        选择所有你最喜欢的蔬菜\\n        <select\\n          name=\\\"精选蔬菜\\\"\\n          multiple={true}\\n          defaultValue={['玉米', '番茄']}\\n        >\\n          <option value=\\\"黄瓜\\\">黄瓜</option>\\n          <option value=\\\"玉米\\\">玉米</option>\\n          <option value=\\\"番茄\\\">番茄</option>\\n        </select>\\n      </label>\\n      <hr />\\n      <button type=\\\"reset\\\">重置</button>\\n      <button type=\\\"submit\\\">提交</button>\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label, select { display: block; }\\nlabel { margin-bottom: 20px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"100\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"给 \",[\"$r\",\"code\",null,{\"children\":\"<select>\"}],\" 添加 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" 属性，例如 \",[\"$r\",\"code\",null,{\"children\":\"<select name=\\\"selectedFruit\\\" />\"}],\"。指定的 \",[\"$r\",\"code\",null,{\"children\":\"name\"}],\" 将作为表单数据中的一个键，例如 \",[\"$r\",\"code\",null,{\"children\":\"{ selectedFruit: \\\"orange\\\" }\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"如果使用了 \",[\"$r\",\"code\",null,{\"children\":\"<select multiple={true}>\"}],\"，那么你从表单中读取的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"FormData\"}]}],\" 将会将每个选择的选项作为单独 name 与 value 相匹配的键值对包含在内。仔细查看上面的示例中的控制台日志。\"]}]]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"默认情况下，\",[\"$r\",\"code\",null,{\"children\":\"<form>\"}],\" 内的任何 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\" 都可以提交表单。这可能会让人感到惊讶！如果你有自定义 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 组件，请考虑使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input/button\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"button\\\">\"}]}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"<button>\"}],\"。如果你想要明确指定提交表单的按钮，请使用 \",[\"$r\",\"code\",null,{\"children\":\"<button type=\\\"submit\\\">\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"controlling-a-select-box-with-a-state-variable\",\"children\":\"使用 state 控制选择框 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"像 \",[\"$r\",\"code\",null,{\"children\":\"<select />\"}],\" 这样的选择框是非受控的。即使你 \",[\"$r\",\"a\",null,{\"href\":\"#providing-an-initially-selected-option\",\"children\":\"传递了初始值\"}],\"，比如 \",[\"$r\",\"code\",null,{\"children\":\"<select defaultValue=\\\"orange\\\" />\"}],\"，你的 JSX 也只是指定了初始值，而非当前时刻的值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"如果要渲染一个受控选择框，请传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性\"]}],\"。React 将强制传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 属性给选择框。通常，你可以通过声明一个 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"state\"}],\" 来控制选择框：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,6,7}\",\"children\":\"function FruitPicker() {\\n  const [selectedFruit, setSelectedFruit] = useState('orange'); // 声明一个 state 变量...\\n  // ...\\n  return (\\n    <select\\n      value={selectedFruit} // ...强制选择框的值与 state 相匹配...\\n      onChange={e => setSelectedFruit(e.target.value)} // ... 并在每次改变（change）时更新 state\\n    >\\n      <option value=\\\"苹果\\\">苹果</option>\\n      <option value=\\\"香蕉\\\">香蕉</option>\\n      <option value=\\\"橘子\\\">橘子</option>\\n    </select>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这将帮助你在每次选择时都触发重新渲染。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function FruitPicker() {\\n  const [selectedFruit, setSelectedFruit] = useState('orange');\\n  const [selectedVegs, setSelectedVegs] = useState(['corn', 'tomato']);\\n  return (\\n    <>\\n      <label>\\n        选择一个水果：\\n        <select\\n          value={selectedFruit}\\n          onChange={e => setSelectedFruit(e.target.value)}\\n        >\\n          <option value=\\\"苹果\\\">苹果</option>\\n          <option value=\\\"香蕉\\\">香蕉</option>\\n          <option value=\\\"橘子\\\">橘子</option>\\n        </select>\\n      </label>\\n      <hr />\\n      <label>\\n        选择所有你喜欢的蔬菜：\\n        <select\\n          multiple={true}\\n          value={selectedVegs}\\n          onChange={e => {\\n            const options = [...e.target.selectedOptions];\\n            const values = options.map(option => option.value);\\n            setSelectedVegs(values);\\n          }}\\n        >\\n          <option value=\\\"黄瓜\\\">黄瓜</option>\\n          <option value=\\\"玉米\\\">玉米</option>\\n          <option value=\\\"番茄\\\">番茄</option>\\n        </select>\\n      </label>\\n      <hr />\\n      <p>你最喜欢的水果：{selectedFruit}</p>\\n      <p>你最喜欢的蔬菜有：{selectedVegs.join('，')}</p>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"select { margin-bottom: 10px; display: block; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"如果传递了 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 但没有传递 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\"，那么将无法选择选项\"]}],\"。当你通过传递 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 来控制选择框时，你需要保证选择框始终具有你传递的值。因此，如果你将一个 state 作为 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 传递，但在 \",[\"$r\",\"code\",null,{\"children\":\"onChange\"}],\" 事件处理程序中忘记同步更新该状态变量，React 将在每次按键后将选择框恢复到你指定的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"与 HTML 不同，在 \",[\"$r\",\"code\",null,{\"children\":\"<option>\"}],\" 上传递 \",[\"$r\",\"code\",null,{\"children\":\"selected\"}],\" 属性将不受支持。\"]}]]}]]}]]","meta":{"title":"<select>"}},"__N_SSG":true}