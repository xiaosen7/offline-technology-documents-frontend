{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#flushsync\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"flushSync(callback)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#flushing-updates-for-third-party-integrations\",\"depth\":3,\"text\":\"刷新第三方集成更新 \"}]","content":"[[\"$r\",\"MaxWidth\",\"52\",{\"children\":[[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 是不常见的行为，并且可能损伤应用程序的性能。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 允许你强制 React 在提供的回调函数内同步刷新任何更新，这将确保 DOM 立即更新。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"flushSync(callback)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"flushsync\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync(callback)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 强制 React 刷新所有挂起的工作，并同步更新 DOM。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { flushSync } from 'react-dom';\\n\\nflushSync(() => {\\n  setSomething(123);\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"大多数时候都不需要使用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\"，请将其作为最后的手段使用。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"callback\"}],\"：一个函数。React 会立即调用这个回调函数，并同步刷新其中包含的任何更新。它也可能会刷新任何挂起的更新、Effect 或 Effect 内部的更新。如果因为调用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 而导致更新挂起（suspend），则可能会重新显示后备方案。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 可能会严重影响性能，因此请谨慎使用。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 可能会强制挂起的 Suspense 边界显示其 \",[\"$r\",\"code\",null,{\"children\":\"fallback\"}],\" 状态。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 可能会在返回之前运行挂起的 Effect，并同步应用其包含的任何更新。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 可能会在必要时刷新回调函数之外的更新，以便刷新回调函数内部的更新。例如，如果有来自点击事件的挂起更新，React 可能会在刷新回调函数内部的更新之前刷新这些更新。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"flushing-updates-for-third-party-integrations\",\"children\":\"刷新第三方集成更新 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当与浏览器 API 或 UI 库等第三方代码集成时，可能需要强制 React 刷新更新。调用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 以强制 React 同步刷新在回调函数内的任何状态更新：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 2, \\\"setSomething(123)\\\"]]\",\"children\":\"flushSync(() => {\\n  setSomething(123);\\n});\\n// 这一行代码运行之后，DOM 将被更新。\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这确保了在下一行代码运行时，React 已经更新了 DOM。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 是不常见的行为，频繁调用可能会严重影响应用程序的性能\"]}],\"。如果你的应用只使用 React API，并且不与第三方库集成，那么 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 应该是不必要的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然而，它对于与浏览器 API 等第三方代码集成可能会有帮助。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"一些浏览器 API 希望回调函数内的结果同步写入 DOM，以便在回调函数结束时，浏览器可以对渲染的 DOM 进行操作。在大多数情况下，React 会自动处理这个问题。但在某些情况下，可能需要强制进行同步更新。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，浏览器的 \",[\"$r\",\"code\",null,{\"children\":\"onbeforeprint\"}],\" API 允许你在打印对话框打开之前立即更改页面。这对于应用自定义打印样式，使文档在打印时能够更好地显示非常有用。在下面的示例中，你在 \",[\"$r\",\"code\",null,{\"children\":\"onbeforeprint\"}],\" 回调函数内调用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 来立即将 React 状态“刷新”到 DOM 中。然后，当打印对话框打开时，\",[\"$r\",\"code\",null,{\"children\":\"isPrinting\"}],\" 会显示为“是”：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js active\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { flushSync } from 'react-dom';\\n\\nexport default function PrintApp() {\\n  const [isPrinting, setIsPrinting] = useState(false);\\n\\n  useEffect(() => {\\n    function handleBeforePrint() {\\n      flushSync(() => {\\n        setIsPrinting(true);\\n      })\\n    }\\n\\n    function handleAfterPrint() {\\n      setIsPrinting(false);\\n    }\\n\\n    window.addEventListener('beforeprint', handleBeforePrint);\\n    window.addEventListener('afterprint', handleAfterPrint);\\n    return () => {\\n      window.removeEventListener('beforeprint', handleBeforePrint);\\n      window.removeEventListener('afterprint', handleAfterPrint);\\n    }\\n  }, []);\\n\\n  return (\\n    <>\\n      <h1>是否打印：{isPrinting ? '是' : '否'}</h1>\\n      <button onClick={() => window.print()}>\\n        打印\\n      </button>\\n    </>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果没有使用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\"，打印对话框会将 \",[\"$r\",\"code\",null,{\"children\":\"isPrinting\"}],\" 显示为“否”。这是因为 React 将异步批处理更新，而打印对话框在状态更新之前就显示出来了。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\" 可能会严重影响性能，并且可能会意外地强制挂起的 Suspense 边界显示其后备状态。\"]}],[\"$r\",\"p\",null,{\"children\":[\"大多数时候都不需要使用 \",[\"$r\",\"code\",null,{\"children\":\"flushSync\"}],\"，请将其作为最后的手段使用。\"]}]]}]]}]]","meta":{"title":"flushSync"}},"__N_SSG":true}