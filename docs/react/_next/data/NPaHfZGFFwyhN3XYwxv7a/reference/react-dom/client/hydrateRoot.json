{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#hydrateroot\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot(domNode, reactNode, options?)\"}],\" \"]},{\"url\":\"#root-render\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"root.render(reactNode)\"}],\" \"]},{\"url\":\"#root-unmount\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount()\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#hydrating-server-rendered-html\",\"depth\":3,\"text\":\"hydrate 服务端渲染的 HTML \"},{\"url\":\"#hydrating-an-entire-document\",\"depth\":3,\"text\":\"hydrate 整个文档 \"},{\"url\":\"#suppressing-unavoidable-hydration-mismatch-errors\",\"depth\":3,\"text\":\"抑制不可避免的 hydrate 处理不匹配错误 \"},{\"url\":\"#handling-different-client-and-server-content\",\"depth\":3,\"text\":\"处理不同的客户端和服务端内容 \"},{\"url\":\"#updating-a-hydrated-root-component\",\"depth\":3,\"text\":\"更新 hydrate 根组件 \"}]","content":"[[\"$r\",\"MaxWidth\",\"94\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 函数允许你在先前由 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react-dom/server\"}]}],\" 生成的浏览器 HTML DOM 节点中展示 React 组件。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const root = hydrateRoot(domNode, reactNode, options?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"hydrateroot\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot(domNode, reactNode, options?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 函数将 React 连接到由 React 在服务端环境中渲染的现有 HTML 中。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\n\\nconst domNode = document.getElementById('root');\\nconst root = hydrateRoot(domNode, reactNode);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将会连接到内部有 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 的 HTML 上，然后接管其中的 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\"。一个完全由 React 构建的应用只会在其根组件中调用一次 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 方法。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\"：一个在服务器端渲染时呈现为根元素的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DOM 元素\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：用于渲染已存在 HTML 的“React 节点”。这个节点通常是一些类似于 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\" 的 JSX，它会在 \",[\"$r\",\"code\",null,{\"children\":\"ReactDOM Server\"}],\" 端使用类似于 \",[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream(<App />)\"}],\" 的方法进行渲染。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\"  \",[\"$r\",\"code\",null,{\"children\":\"options\"}],\"：一个包含此 React 根元素选项的对象。\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\"  \",[\"$r\",\"code\",null,{\"children\":\"onRecoverableError\"}],\"：当 React 自动从错误中恢复时调用的回调函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\"  \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\"：字符串前缀，用于标识由 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useId\"}]}],\" 生成的 ID ，可以避免在同一页面上使用多个 React 根元素时出现冲突。必须与服务端使用的前缀相同。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 返回一个包含两个方法的对象 \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"render\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"#root-unmount\",\"children\":[\"$r\",\"code\",null,{\"children\":\"unmount\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"警告 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}],\" 期望渲染内容与服务端渲染的内容完全相同。你应该将不匹配视为错误并进行修复。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在开发模式下，React 会在 hydrate 期间发出不匹配警告。在不匹配的情况下，不能保证内容差异会被修补。出于性能原因，这很重要，因为在大多数应用程序中，不匹配很少见，因此验证所有标记将是昂贵而不可行的。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你的应用程序可能只有一个 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}],\" 函数调用。如果你使用框架，则可能会为你完成此调用。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果你的应用程序是客户端渲染，并且没有已渲染好的 HTML，则不支持使用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot()\"}],\"。请改用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot()\"}]}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"root-render\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.render(reactNode)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" 更新一个 hydrate 根组件中的 React 组件来渲染浏览器端 DOM 元素。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.render(<App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将会在 hydrate \",[\"$r\",\"code\",null,{\"children\":\"root\"}],\" 中更新 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：你想要更新的 “React 节点”。通常这会是一段JSX代码，例如 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\"，但你也可以传递一个通过 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createElement()\"}]}],\" 创建的 React 元素，一个字符串，一个数字，\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 值 或者 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" 值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" 值。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-render-caveats\",\"children\":\"警告 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果你在根节点还没有完成 hydrate 的情况下调用了 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\"，React 将清除现有的服务端渲染 HTML 内容，并将整个根节点切换到客户端渲染。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"root-unmount\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount()\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 来销毁 React 根节点内的渲染树。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"root.unmount();\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"完全使用 React 构建的应用通常不会有任何调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 的情况。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这主要适用于 React 根节点的 DOM 节点（或其任何祖先节点）可能会被其他代码从 DOM 中移除的情况。例如，想象一下一个 jQuery 标签面板，它会将非活动标签从 DOM 中移除。如果一个标签被移除，其内部的所有内容（包括其中的 React 根节点）也将从 DOM 中移除。你需要调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 来告诉 React “停止”管理已移除根节点的内容。否则，已移除根节点内的组件将无法清理和释放已使用的资源，例如订阅。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 将卸载根节点中的所有组件，并“分离” React 与根 DOM 节点之间的连接，包括删除树中的任何事件处理程序或状态。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 不接受任何参数。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" 值。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"root-unmount-caveats\",\"children\":\"警告 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\" 将卸载树中的所有组件，并“分离” React 与根 DOM 节点之间的连接。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一旦你调用 \",[\"$r\",\"code\",null,{\"children\":\"root.unmount\"}],\"，就不能再在根节点上调用 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\"。在未挂载的根节点上尝试调用 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" 将抛出“不能更新未挂载的根节点”的错误。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"hydrating-server-rendered-html\",\"children\":\"hydrate 服务端渲染的 HTML \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你的应用程序的 HTML 是由 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react-dom/server\"}]}],\" 生成的，你需要在客户端上进行 \",[\"$r\",\"strong\",null,{\"children\":\"hydrate\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 3, \\\"document.getElementById('root')\\\"], [2, 3, \\\"<App />\\\"]]\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\n\\nhydrateRoot(document.getElementById('root'), <App />);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"对于你的应用程序来说，这将  hydrate 你的服务端 HTML 来复苏里面的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"浏览器 DOM 节点\"}],\"和 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"React 组件\"}],\"。通常，你只需要在启动时执行一次。如果你使用框架，则可能会自动在幕后执行此操作。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为了进行 hydrate，React 将把你的组件逻辑连接到服务器上生成的初始 HTML 中。hydrate 可以将来自服务器的初始 HTML 快照转换为在浏览器中运行的完全可交互应用。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\n  由 react-dom/server 生成\\n-->\\n<div id=\\\"root\\\"><h1>Hello, world!</h1><button>You clicked me <!-- -->0<!-- --> times</button></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import './styles.css';\\nimport { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(\\n  document.getElementById('root'),\\n  <App />\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <h1>Hello, world!</h1>\\n      <Counter />\\n    </>\\n  );\\n}\\n\\nfunction Counter() {\\n  const [count, setCount] = useState(0);\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      You clicked me {count} times\\n    </button>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"120\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你不需要再次调用 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 或者在其他地方调用它。从现在开始，React 将管理你的应用程序的 DOM。想要更新 UI 请使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"useState\"}],\" 替代。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"传递给 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 的 React 树必须生成与服务端 \",[\"$r\",\"strong\",null,{\"children\":\"相同的输出\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":\"这对于用户体验非常重要。用户会在你的 JavaScript 代码加载前花费一些时间来查看服务端生成的 HTML。服务端渲染通过显示应用输出的 HTML 快照来产生了应用程序加速加载的错觉。突然出现不同的内容会破坏这种错觉。这就是为什么服务端渲染输出必须与客户端初始渲染输出匹配。\"}],[\"$r\",\"p\",null,{\"children\":\"导致 hydrate 错误的最常见原因包括：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"根节点 React 生成的 HTML 周围存在额外的空白符（如换行符）。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在渲染逻辑中使用 \",[\"$r\",\"code\",null,{\"children\":\"typeof window !== 'undefined'\"}],\" 这样的判断。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在渲染逻辑中使用仅限于浏览器端的 API，例如 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/matchMedia\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"window.matchMedia\"}]}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在服务器和客户端渲染不同的数据。\"}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"React 可以从一些 hydrate 错误中恢复，但 \",[\"$r\",\"strong\",null,{\"children\":\"你必须像处理其他 bug 一样修复它们\"}],\"。在最好的情况下，它们会导致应用程序加载变慢；在最坏的情况下，事件处理程序可能会附加到错误的元素上。\"]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"hydrating-an-entire-document\",\"children\":\"hydrate 整个文档 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"完全使用 React 构建的应用程序可以将整个文档作为 JSX 渲染，包括 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/html\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<html>\"}]}],\" 标签：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,13}\",\"children\":\"function App() {\\n  return (\\n    <html>\\n      <head>\\n        <meta charSet=\\\"utf-8\\\" />\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n        <link rel=\\\"stylesheet\\\" href=\\\"/styles.css\\\"></link>\\n        <title>My app</title>\\n      </head>\\n      <body>\\n        <Router />\\n      </body>\\n    </html>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要对整个文档进行 hydrate 处理，将全局的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/document\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"document\"}]}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}],\" 的第一个参数传递：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(document, <App />);\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"suppressing-unavoidable-hydration-mismatch-errors\",\"children\":\"抑制不可避免的 hydrate 处理不匹配错误 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果一个单独元素属性或文本内容在服务器和客户端之间是不可避免地不同的（例如，时间戳），则可以抑制 hydrate 处理不匹配警告。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要消除对元素的 hydrate 处理警告，请添加 \",[\"$r\",\"code\",null,{\"children\":\"suppressHydrationWarning={true}\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\n  由 react-dom/server 生成\\n-->\\n<div id=\\\"root\\\"><h1>Current Date: <!-- -->01/01/2020</h1></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import './styles.css';\\nimport { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(document.getElementById('root'), <App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js active\",\"children\":\"export default function App() {\\n  return (\\n    <h1 suppressHydrationWarning={true}>\\n      Current Date: {new Date().toLocaleDateString()}\\n    </h1>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"130\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"此方法仅适用于当前层级，并且旨在作为一种脱围机制。不要滥用它。除非是文本内容，否则 React 不会尝试修补它，因此可能会保持不一致，直到未来的更新来到。\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"handling-different-client-and-server-content\",\"children\":\"处理不同的客户端和服务端内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你有意在服务器和客户端上呈现不同的内容，则可以进行两次渲染。在客户端上呈现不同内容的组件可以读取类似于 \",[\"$r\",\"code\",null,{\"children\":\"isClient\"}],\" 的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"状态变量\"}],\"，你可以在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":\"Effect\"}],\" 中将其设置为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\n  由 react-dom/server 生成\\n-->\\n<div id=\\\"root\\\"><h1>Is Server</h1></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import './styles.css';\\nimport { hydrateRoot } from 'react-dom/client';\\nimport App from './App.js';\\n\\nhydrateRoot(document.getElementById('root'), <App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js active\",\"children\":\"import { useState, useEffect } from \\\"react\\\";\\n\\nexport default function App() {\\n  const [isClient, setIsClient] = useState(false);\\n\\n  useEffect(() => {\\n    setIsClient(true);\\n  }, []);\\n\\n  return (\\n    <h1>\\n      {isClient ? 'Is Client' : 'Is Server'}\\n    </h1>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"144\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这样，初始渲染将呈现与服务器相同的内容，避免不匹配，但是在 hydrate 之后会同步进行额外的渲染。\"}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"这种方法使得 hydrate 变慢，因为你的组件需要渲染两次。要注意在网络连接较慢的情况下用户的体验。JavaScript 代码的加载时间可能会比初始的 HTML 渲染慢很多，因此在 hydrate 之后立即呈现不同的 UI 对用户来说可能也会感到不适。\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"updating-a-hydrated-root-component\",\"children\":\"更新 hydrate 根组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在根组件 hydrate 完成之后，你可以调用 \",[\"$r\",\"a\",null,{\"href\":\"#root-render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"root.render\"}]}],\" 来更新根 React 组件。\",[\"$r\",\"strong\",null,{\"children\":[\"与  \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\" 不同的是，通常你不需要这样做，因为初始内容已经渲染为 HTML\"]}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果在 hydrate 之后某个时刻调用了 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\"，并且组件树结构与之前渲染的相匹配，那么 React 将 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"保留重置 state\"}],\"。请注意，你可以在输入框中输入文字，这意味着在此示例中每秒钟重复调用的 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 不会破坏已有的组件状态：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<!--\\n  在 <div id=\\\"root\\\">...</div> 中的 HTML 内容\\n  由 react-dom/server 生成\\n-->\\n<div id=\\\"root\\\"><h1>Hello, world! <!-- -->0</h1><input placeholder=\\\"Type something here\\\"/></div>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { hydrateRoot } from 'react-dom/client';\\nimport './styles.css';\\nimport App from './App.js';\\n\\nconst root = hydrateRoot(\\n  document.getElementById('root'),\\n  <App counter={0} />\\n);\\n\\nlet i = 0;\\nsetInterval(() => {\\n  root.render(<App counter={i} />);\\n  i++;\\n}, 1000);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"export default function App({counter}) {\\n  return (\\n    <>\\n      <h1>Hello, world! {counter}</h1>\\n      <input placeholder=\\\"Type something here\\\" />\\n    </>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 hydrate 过的根组件上调用 \",[\"$r\",\"code\",null,{\"children\":\"root.render\"}],\" 是不常见的。通常情况下，你可以在组件的内部 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"更新 state\"}],\"。\"]}]]}]]","meta":{"title":"hydrateRoot","translators":["childrentime"]}},"__N_SSG":true}