{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"Reference \"},{\"url\":\"#render\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"render(reactNode, domNode, callback?)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"Usage \"},{\"url\":\"#rendering-the-root-component\",\"depth\":3,\"text\":\"渲染根组件 \"},{\"url\":\"#rendering-multiple-roots\",\"depth\":3,\"text\":\"渲染多个根组件 \"},{\"url\":\"#updating-the-rendered-tree\",\"depth\":3,\"text\":\"更新已渲染的组件树 \"}]","content":"[[\"$r\",\"MaxWidth\",\"46\",{\"children\":[[\"$r\",\"Deprecated\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"在未来 React 发布主要版本时，此 API 将被移除。\"}],[\"$r\",\"p\",null,{\"children\":[\"在 React 18 中，\",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数将被 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\" 函数替换。在 React 18 中使用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数，React 会抛出警告，你的应用程序的表现将像运行在 React 17 中表现一致。具体详情请参阅 \",[\"$r\",\"a\",null,{\"href\":\"/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis\",\"children\":\"博文\"}],\"。\"]}]]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数会将一段 \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"JSX\"}],\"（“React 节点”）渲染到浏览器 DOM 容器节点中。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"render(reactNode, domNode, callback?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"Reference \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"render\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"render(reactNode, domNode, callback?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数，可以在浏览器的 DOM 元素中展示 React 组件。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { render } from 'react-dom';\\n\\nconst domNode = document.getElementById('root');\\nrender(<App />, domNode);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将在 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 中展示 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\" 组件，并对该 DOM 中的内容进行管理。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一个完全由 React 构建的应用程序通常只会对一个根组件调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数。如果一个页面中只有部分内容 “零散” 的使用了 React，可以根据实际需求对 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 进行多次调用。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"具体参考下方示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"Parameters \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\"：需要展示的 \",[\"$r\",\"em\",null,{\"children\":\"React 节点\"}],\"。这通常是一段 JSX，如 \",[\"$r\",\"code\",null,{\"children\":\"<App />\"}],\"，但你也可以传递使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createElement()\"}]}],\" 构建的 React 元素，字符串，数字，\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\" 或是 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\"：\",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DOM 元素\"}],\"。React 会将 \",[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\" 渲染在该 DOM 元素中。从此刻开始，React 将管理 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 中的 DOM，并会在 React 树发生变化时更新它。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"callback\"}],\"：回调函数。如果编写了该函数，React 将在你的组件放入 DOM 后调用该函数。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"Returns \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 会返回 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。然后，如果你传递的 \",[\"$r\",\"code\",null,{\"children\":\"reactNode\"}],\" 是一个 \",[\"$r\",\"em\",null,{\"children\":\"class 组件\"}],\"，那么它将返回该组件的实例。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"Caveats \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 React 18 中，\",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数已被 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\" 取代。请在 React 18 及后续版本中使用 \",[\"$r\",\"code\",null,{\"children\":\"createRoot\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你第一次调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 时，React 会在组件渲染到 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 中之前，清除掉 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 中所有已有的 HTML 内容。如果你的 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 中包含了 React 在服务器上或构建过程中生成的 HTML，请使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/hydrate\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrate()\"}]}],\" 代替，它会将事件处理程序附加到现有的 HTML 中。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你在同一个 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 上多次调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数，React 会按需更新 DOM 以响应你传递的最新 JSX。React 会通过与之前渲染的树 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"“匹配”\"}],\" 的方式来决定 DOM 的哪些部分可以被重用，哪些需要重新创建。多次在同一个 \",[\"$r\",\"code\",null,{\"children\":\"domNode\"}],\" 上调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\"，类似于在根组件上调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#setstate\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"set\"}],\" 函数\"]}],\"：React 会避免不必要的 DOM 更新。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你的应用程序是完全基于 React 构建，那么你其实不需要多次使用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数。（如果你使用框架，它可能已帮你完成该调用。）当你想在 DOM 树的不同部分渲染一段 JSX 时，而不是你组件的 children（例如，modal 或者 tooltip），那么请使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/createPortal\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createPortal\"}]}],\" 来代替。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"Usage \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数在 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"浏览器 DOM 节点\"}],\"中展示 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"React 组件\"}],\"。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 4, \\\"<App />\\\"], [2, 4, \\\"document.getElementById('root')\\\"]]\",\"children\":\"import { render } from 'react-dom';\\nimport App from './App.js';\\n\\nrender(<App />, document.getElementById('root'));\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-the-root-component\",\"children\":\"渲染根组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在完全由 React 构建的应用程序中，\",[\"$r\",\"strong\",null,{\"children\":\"你通常只需在启动时，执行此操作\"}],\" —— 渲染 “根” 组件。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import './styles.css';\\nimport { render } from 'react-dom';\\nimport App from './App.js';\\n\\nrender(<App />, document.getElementById('root'));\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"export default function App() {\\n  return <h1>你好，世界！</h1>;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"56\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常你不需要多次调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 或在更多地方调用它。从此刻开始，React 将管理你的应用程序的 DOM。如果你想更新 UI，你在组件中通过 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"using state\"}],\" 来实现。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"rendering-multiple-roots\",\"children\":\"渲染多个根组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"If your page \",[\"$r\",\"a\",null,{\"href\":\"/learn/add-react-to-an-existing-project#using-react-for-a-part-of-your-existing-page\",\"children\":\"isn’t fully built with React\"}],\", call \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" for each top-level piece of UI managed by React.\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"public/index.html\",\"children\":\"<nav id=\\\"navigation\\\"></nav>\\n<main>\\n  <p>这一段没有被 React 渲染（可以查看 index.html 进行验证）。</p>\\n  <section id=\\\"comments\\\"></section>\\n</main>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import './styles.css';\\nimport { render } from 'react-dom';\\nimport { Comments, Navigation } from './Components.js';\\n\\nrender(\\n  <Navigation />,\\n  document.getElementById('navigation')\\n);\\n\\nrender(\\n  <Comments />,\\n  document.getElementById('comments')\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Components.js\",\"children\":\"export function Navigation() {\\n  return (\\n    <ul>\\n      <NavLink href=\\\"/\\\">首页</NavLink>\\n      <NavLink href=\\\"/about\\\">关于</NavLink>\\n    </ul>\\n  );\\n}\\n\\nfunction NavLink({ href, children }) {\\n  return (\\n    <li>\\n      <a href={href}>{children}</a>\\n    </li>\\n  );\\n}\\n\\nexport function Comments() {\\n  return (\\n    <>\\n      <h2>评论</h2>\\n      <Comment text=\\\"你好！\\\" author=\\\"Sophie\\\" />\\n      <Comment text=\\\"你好吗？\\\" author=\\\"Sunil\\\" />\\n    </>\\n  );\\n}\\n\\nfunction Comment({ text, author }) {\\n  return (\\n    <p>{text} — <i>{author}</i></p>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"nav ul { padding: 0; margin: 0; }\\nnav ul li { display: inline-block; margin-right: 20px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"64\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/unmountComponentAtNode\",\"children\":[\"$r\",\"code\",null,{\"children\":\"unmountComponentAtNode()\"}]}],\" 来销毁已被渲染的组件树。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"updating-the-rendered-tree\",\"children\":\"更新已渲染的组件树 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以在同一 DOM 节点上多次调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\"。只要组件树结构与之前渲染的内容一致，React 就会 \",[\"$r\",\"a\",null,{\"href\":\"/learn/preserving-and-resetting-state\",\"children\":\"保留 state\"}],\"。请注意观察在输入框中输入内容时的效果，这意味着在此示例中每次重复调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 时，并不会造成任何影响：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { render } from 'react-dom';\\nimport './styles.css';\\nimport App from './App.js';\\n\\nlet i = 0;\\nsetInterval(() => {\\n  render(\\n    <App counter={i} />,\\n    document.getElementById('root')\\n  );\\n  i++;\\n}, 1000);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"export default function App({counter}) {\\n  return (\\n    <>\\n      <h1>你好，世界! {counter}</h1>\\n      <input placeholder=\\\"在这里输入一些东西\\\" />\\n    </>\\n  );\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"多次调用 \",[\"$r\",\"code\",null,{\"children\":\"render\"}],\" 函数并不常见。通常，会通过在组件中 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":\"更新 state\"}],\" 来代替。\"]}]]}]]","meta":{"title":"render","translators":["liu-jin-yi","QC-L","Neo42"]}},"__N_SSG":true}