{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#createcontext\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"createContext(defaultValue)\"}],\" \"]},{\"url\":\"#provider\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"SomeContext.Provider\"}],\" \"]},{\"url\":\"#consumer\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"SomeContext.Consumer\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"使用方法 \"},{\"url\":\"#creating-context\",\"depth\":3,\"text\":\"创建上下文 \"},{\"url\":\"#importing-and-exporting-context-from-a-file\",\"depth\":3,\"text\":\"从一个文件导入和导出上下文 \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"疑难解答 \"},{\"url\":\"#i-cant-find-a-way-to-change-the-context-value\",\"depth\":3,\"text\":\"我没有办法改变 context 的值 \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"createContext\"}],\" 创建组件能够提供与读取的 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"上下文（context）\"}],\"。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const SomeContext = createContext(defaultValue)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"createcontext\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"createContext(defaultValue)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在任意组件外调用 \",[\"$r\",\"code\",null,{\"children\":\"createContext\"}],\" 创建一个上下文。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createContext } from 'react';\\n\\nconst ThemeContext = createContext('light');\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请参阅下方的更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"defaultValue\"}],\"：当读取上下文的组件上方的树中没有匹配的上下文时，希望该上下文具有的默认值。倘若没有任何有意义的默认值，可指定其为 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。该默认值是用于作为“最后的手段”的后备方案。它是静态的，永远不会随时间改变。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"createContext\"}],\" 返回一个上下文对象。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"该上下文对象本身不包含任何信息\"}],\"。它只表示其他组件读取或提供的那个上下文。一般来说，在组件上方使用 \",[\"$r\",\"a\",null,{\"href\":\"#provider\",\"children\":[\"$r\",\"code\",null,{\"children\":\"SomeContext.Provider\"}]}],\" 指定上下文的值，并在被包裹的下方组件内调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useContext(SomeContext)\"}]}],\" 读取它。上下文对象有一些属性：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"SomeContext.Provider\"}],\" 让你为被它包裹的组件提供上下文的值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"SomeContext.Consumer\"}],\" 是一个很少会用到的备选方案，它用于读取上下文的值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"provider\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"SomeContext.Provider\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"用上下文 provider 包裹组件，以为里面所有的组件指定一个上下文的值：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function App() {\\n  const [theme, setTheme] = useState('light');\\n  // ……\\n  return (\\n    <ThemeContext.Provider value={theme}>\\n      <Page />\\n    </ThemeContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"provider-props\",\"children\":\"Props \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"value\"}],\"：该值为想传递给所有处于这个 provider 内读取该上下文的组件，无论它们处于多深的层级。上下文的值可以为任何类型。provider 内的组件可通过调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useContext(SomeContext)\"}]}],\" 获取上方距离它最近的上下文 provider 的 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"consumer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"SomeContext.Consumer\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"useContext\"}],\" 之前，有一种更老的方法来读取上下文：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Button() {\\n  // 🟡 遗留方式 (不推荐)\\n  return (\\n    <ThemeContext.Consumer>\\n      {theme => (\\n        <button className={theme} />\\n      )}\\n    </ThemeContext.Consumer>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"尽管这种老方法依然奏效，但 \",[\"$r\",\"strong\",null,{\"children\":[\"新代码都应该通过 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useContext()\"}]}],\" 来读取上下文\"]}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Button() {\\n  // ✅ 推荐方式\\n  const theme = useContext(ThemeContext);\\n  return <button className={theme} />;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"consumer-props\",\"children\":\"Props \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\"：一个函数。React 将传入与 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useContext()\"}]}],\" 相同算法确定的当前上下文的值，调用该函数，并根据该函数的返回值渲染结果。当来自父组件的上下文发生变化时，React 会重新调用该函数。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"使用方法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"creating-context\",\"children\":\"创建上下文 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"上下文使得组件能够无需通过显式传递参数的方式 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"将信息逐层传递\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在任何组件外调用 \",[\"$r\",\"code\",null,{\"children\":\"createContext\"}],\" 来创建一个或多个上下文。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 3, \\\"ThemeContext\\\"], [1, 4, \\\"AuthContext\\\"], [3, 3, \\\"'light'\\\"], [3, 4, \\\"null\\\"]]\",\"children\":\"import { createContext } from 'react';\\n\\nconst ThemeContext = createContext('light');\\nconst AuthContext = createContext(null);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"createContext\"}],\" 返回一个 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"上下文对象\"}],\"。组件可以通过将它传给 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useContext()\"}]}],\" 来读取上下文的值：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 2, \\\"ThemeContext\\\"], [1, 7, \\\"AuthContext\\\"]]\",\"children\":\"function Button() {\\n  const theme = useContext(ThemeContext);\\n  // ...\\n}\\n\\nfunction Profile() {\\n  const currentUser = useContext(AuthContext);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"默认情况下，它们将获得的值是你在创建上下文时指定的 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"默认值\"}],\"。然而，它本身并不是很有用，因为默认值永远不会发生改变。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"上下文之所以有用，是因为可以 \",[\"$r\",\"strong\",null,{\"children\":\"提供来自其他组件的其他的、动态变化的值：\"}]]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{8-9,11-12}\",\"children\":\"function App() {\\n  const [theme, setTheme] = useState('dark');\\n  const [currentUser, setCurrentUser] = useState({ name: 'Taylor' });\\n\\n  // ...\\n\\n  return (\\n    <ThemeContext.Provider value={theme}>\\n      <AuthContext.Provider value={currentUser}>\\n        <Page />\\n      </AuthContext.Provider>\\n    </ThemeContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在 \",[\"$r\",\"code\",null,{\"children\":\"Page\"}],\" 组件以及其所包裹的任何子组件，无论层级多深，都会看到传入上下文的值。如果该值发生变化， React 也会重新渲染读取该值的组件。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext\",\"children\":\"阅读更多有关读取和提供上下文的内容以及相关例子\"}],\"。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"importing-and-exporting-context-from-a-file\",\"children\":\"从一个文件导入和导出上下文 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常，来自不同文件的组件都会需要读取同一个上下文。因此，在一个单独的文件内定义上下文便成了常见做法。以使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/web/javascript/reference/statements/export\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"export\"}],\" 语句\"]}],\" 将其导出，以便其他文件读取使用：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-5}\",\"children\":\"// Contexts.js\\nimport { createContext } from 'react';\\n\\nexport const ThemeContext = createContext('light');\\nexport const AuthContext = createContext(null);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在其他文件中定义的组件可以使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/web/javascript/reference/statements/import\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"import\"}]}],\" 语句读取或提供该 context：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"// Button.js\\nimport { ThemeContext } from './Contexts.js';\\n\\nfunction Button() {\\n  const theme = useContext(ThemeContext);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"// App.js\\nimport { ThemeContext, AuthContext } from './Contexts.js';\\n\\nfunction App() {\\n  // ...\\n  return (\\n    <ThemeContext.Provider value={theme}>\\n      <AuthContext.Provider value={currentUser}>\\n        <Page />\\n      </AuthContext.Provider>\\n    </ThemeContext.Provider>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这与 \",[\"$r\",\"a\",null,{\"href\":\"/learn/importing-and-exporting-components\",\"children\":\"组件的导入与导出\"}],\" 十分相似。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"疑难解答 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"i-cant-find-a-way-to-change-the-context-value\",\"children\":\"我没有办法改变 context 的值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如下的代码为 context 指定了默认值：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const ThemeContext = createContext('light');\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"该值永远不会发生改变。当 React 无法找到匹配的 provider 时，该值会被作为后备方案。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要想使上下文的值随时间变化，\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext#updating-data-passed-via-context\",\"children\":\"添加状态并使用一个上下文 provider 包裹组件\"}],\"。\"]}]]}]]","meta":{"title":"createContext"}},"__N_SSG":true}