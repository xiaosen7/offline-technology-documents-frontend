{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#useinsertioneffect\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect(setup, dependencies?)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#measuring-layout-before-the-browser-repaints-the-screen\",\"depth\":3,\"text\":\"在浏览器重新绘制屏幕前计算布局 \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"疑难解答 \"},{\"url\":\"#im-getting-an-error-uselayouteffect-does-nothing-on-the-server\",\"depth\":3,\"text\":[\"我收到一个错误：“ \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 在服务端没有任何作用” \"]}]","content":"[[\"$r\",\"MaxWidth\",\"54\",{\"children\":[[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 可能会影响性能。尽可能使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\"。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 是 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\" 的一个版本，在浏览器重新绘制屏幕之前触发。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"useLayoutEffect(setup, dependencies?)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"useinsertioneffect\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect(setup, dependencies?)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 在浏览器重新绘制屏幕之前进行布局测量：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useRef, useLayoutEffect } from 'react';\\n\\nfunction Tooltip() {\\n  const ref = useRef(null);\\n  const [tooltipHeight, setTooltipHeight] = useState(0);\\n\\n  useLayoutEffect(() => {\\n    const { height } = ref.current.getBoundingClientRect();\\n    setTooltipHeight(height);\\n  }, []);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请看下面的更多例子\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"setup\"}],\"：处理副作用的函数。setup 函数选择性返回一个\",[\"$r\",\"em\",null,{\"children\":\"清理\"}],\"（cleanup）函数。在将组件首次添加到 DOM 之前，React 将运行 setup 函数。在每次因为依赖项变更而重新渲染后，React 将首先使用旧值运行 cleanup 函数（如果你提供了该函数），然后使用新值运行 setup 函数。在组件从 DOM 中移除之前，React 将最后一次运行 cleanup 函数。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"dependencies\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"setup\"}],\" 代码中引用的所有响应式值的列表。响应式值包括 props、state 以及所有直接在组件内部声明的变量和函数。如果你的代码检查工具 \",[\"$r\",\"a\",null,{\"href\":\"/learn/editor-setup#linting\",\"children\":\"配置了 React\"}],\"，那么它将验证每个响应式值都被正确地指定为一个依赖项。依赖项列表必须具有固定数量的项，并且必须像 \",[\"$r\",\"code\",null,{\"children\":\"[dep1, dep2, dep3]\"}],\" 这样内联编写。React 将使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Object.is\"}]}],\" 来比较每个依赖项和它先前的值。如果省略此参数，则在每次重新渲染组件之后，将重新运行副作用函数。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意事项 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 是一个 Hook，因此只能在 \",[\"$r\",\"strong\",null,{\"children\":\"组件的顶层\"}],\" 或自己的 Hook 中调用它。不能在循环或者条件内部调用它。如果你需要的话，抽离出一个组件并将副作用处理移动到那里。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当 StrictMode 启用时，React 将在真正的 setup 函数首次运行前，\",[\"$r\",\"strong\",null,{\"children\":\"运行一个额外的开发专有的 setup + cleanup 周期\"}],\"。这是一个压力测试，确保 cleanup 逻辑“映照”到 setup 逻辑，并停止或撤消 setup 函数正在做的任何事情。如果这导致一个问题，\",[\"$r\",\"a\",null,{\"href\":\"/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development\",\"children\":\"请实现清理函数\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你的一些依赖项是组件内部定义的对象或函数，则存在这样的风险，即它们将 \",[\"$r\",\"strong\",null,{\"children\":\"导致 Effect 重新运行的次数多于所需的次数\"}],\"。要解决这个问题，请删除不必要的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect#removing-unnecessary-object-dependencies\",\"children\":\"对象\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect#removing-unnecessary-function-dependencies\",\"children\":\"函数\"}],\" 依赖项。你还可以 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect\",\"children\":\"抽离状态更新\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect\",\"children\":\"非响应式逻辑\"}],\" 到 Effect 之外。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Effect \",[\"$r\",\"strong\",null,{\"children\":\"只在客户端上运行\"}],\"，在服务端渲染中不会运行。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 内部的代码和所有计划的状态更新阻塞了浏览器重新绘制屏幕。如果过度使用，这会使你的应用程序变慢。如果可能的话，尽量选择 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"measuring-layout-before-the-browser-repaints-the-screen\",\"children\":\"在浏览器重新绘制屏幕前计算布局 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"大多数组件不需要依靠它们在屏幕上的位置和大小来决定渲染什么。他们只返回一些 JSX，然后浏览器计算他们的 \",[\"$r\",\"strong\",null,{\"children\":\"布局\"}],\"（位置和大小）并重新绘制屏幕。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"有时候，这还不够。想象一下悬停时出现在某个元素旁边的 tooltip。如果有足够的空间，tooltip 应该出现在元素的上方，但是如果不合适，它应该出现在下面。为了让 tooltip 渲染在最终正确的位置，你需要知道它的高度（即它是否适合放在顶部）。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"要做到这一点，你需要分两步渲染：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"将 tooltip 渲染到任何地方（即使位置不对）。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"测量它的高度并决定放置 tooltip 的位置。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"把 tooltip 渲染放在正确的位置。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"所有这些都需要在浏览器重新绘制屏幕之前完成\"}],\"。你不希望用户看到 tooltip 在移动。调用 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 在浏览器重新绘制屏幕之前执行布局测量：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-8}\",\"children\":\"function Tooltip() {\\n  const ref = useRef(null);\\n  const [tooltipHeight, setTooltipHeight] = useState(0); // 你还不知道真正的高度\\n\\n  useLayoutEffect(() => {\\n    const { height } = ref.current.getBoundingClientRect();\\n    setTooltipHeight(height); // 现在重新渲染，你知道了真实的高度\\n  }, []);\\n\\n  // ... 在下方的渲染逻辑中使用 tooltipHeight ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"下面是这如何一步步工作的：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"Tooltip\"}],\" 使用初始值 \",[\"$r\",\"code\",null,{\"children\":\"tooltipHeight = 0\"}],\" 进行渲染（因此 tooltip 可能被错误地放置）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React 将它放在 DOM 中，然后运行 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 中的代码。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"测量\"}],\" 了 tooltip 内容的高度，并立即触发重新渲染。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用实际的 \",[\"$r\",\"code\",null,{\"children\":\"tooltipHeight\"}],\" 再次渲染 \",[\"$r\",\"code\",null,{\"children\":\"Tooltip\"}],\"（这样 tooltip 的位置就正确了）。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"React 在 DOM 中对它进行更新，浏览器最终显示出 tooltip。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"将鼠标悬停在下面的按钮上，看看 tooltip 是如何根据它是否合适来调整它的位置：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import ButtonWithTooltip from './ButtonWithTooltip.js';\\n\\nexport default function App() {\\n  return (\\n    <div>\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>\\n            This tooltip does not fit above the button.\\n            <br />\\n            This is why it's displayed below instead!\\n          </div>\\n        }\\n      >\\n        Hover over me (tooltip above)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ButtonWithTooltip.js\",\"children\":\"import { useState, useRef } from 'react';\\nimport Tooltip from './Tooltip.js';\\n\\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\\n  const [targetRect, setTargetRect] = useState(null);\\n  const buttonRef = useRef(null);\\n  return (\\n    <>\\n      <button\\n        {...rest}\\n        ref={buttonRef}\\n        onPointerEnter={() => {\\n          const rect = buttonRef.current.getBoundingClientRect();\\n          setTargetRect({\\n            left: rect.left,\\n            top: rect.top,\\n            right: rect.right,\\n            bottom: rect.bottom,\\n          });\\n        }}\\n        onPointerLeave={() => {\\n          setTargetRect(null);\\n        }}\\n      />\\n      {targetRect !== null && (\\n        <Tooltip targetRect={targetRect}>\\n          {tooltipContent}\\n        </Tooltip>\\n      )\\n    }\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Tooltip.js active\",\"children\":\"import { useRef, useLayoutEffect, useState } from 'react';\\nimport { createPortal } from 'react-dom';\\nimport TooltipContainer from './TooltipContainer.js';\\n\\nexport default function Tooltip({ children, targetRect }) {\\n  const ref = useRef(null);\\n  const [tooltipHeight, setTooltipHeight] = useState(0);\\n\\n  useLayoutEffect(() => {\\n    const { height } = ref.current.getBoundingClientRect();\\n    setTooltipHeight(height);\\n    console.log('Measured tooltip height: ' + height);\\n  }, []);\\n\\n  let tooltipX = 0;\\n  let tooltipY = 0;\\n  if (targetRect !== null) {\\n    tooltipX = targetRect.left;\\n    tooltipY = targetRect.top - tooltipHeight;\\n    if (tooltipY < 0) {\\n      // 它不适合上方，因此把它放在下面。\\n      tooltipY = targetRect.bottom;\\n    }\\n  }\\n\\n  return createPortal(\\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\\n      {children}\\n    </TooltipContainer>,\\n    document.body\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TooltipContainer.js\",\"children\":\"export default function TooltipContainer({ children, x, y, contentRef }) {\\n  return (\\n    <div\\n      style={{\\n        position: 'absolute',\\n        pointerEvents: 'none',\\n        left: 0,\\n        top: 0,\\n        transform: `translate3d(${x}px, ${y}px, 0)`\\n      }}\\n    >\\n      <div ref={contentRef} className=\\\"tooltip\\\">\\n        {children}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".tooltip {\\n  color: white;\\n  background: #222;\\n  border-radius: 4px;\\n  padding: 4px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"58\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意，即使 \",[\"$r\",\"code\",null,{\"children\":\"Tooltip\"}],\" 组件需要两次渲染（首先，使用初始值为 0 的 \",[\"$r\",\"code\",null,{\"children\":\"tooltipHeight\"}],\" 渲染，然后使用实际测量的高度渲染），你也只能看到最终结果。这就是为什么在这个例子中需要 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 而不是 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\" 的原因。让我们来看看下面的细节差别。\"]}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"useLayoutEffect vs useEffect\",\"titleId\":\"examples\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"uselayouteffect-blocks-the-browser-from-repainting\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 阻塞浏览器重新绘制 \"]}],[\"$r\",\"p\",null,{\"children\":[\"React 保证了 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 中的代码以及其中任何计划的状态更新都会在浏览器重新绘制屏幕之前得到处理。这样你就可以渲染 tooltip，测量它，然后在用户没有注意到第一个额外渲染的情况下再次重新渲染。换句话说，\",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 阻塞了浏览器的绘制。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import ButtonWithTooltip from './ButtonWithTooltip.js';\\n\\nexport default function App() {\\n  return (\\n    <div>\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>\\n            This tooltip does not fit above the button.\\n            <br />\\n            This is why it's displayed below instead!\\n          </div>\\n        }\\n      >\\n        Hover over me (tooltip above)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ButtonWithTooltip.js\",\"children\":\"import { useState, useRef } from 'react';\\nimport Tooltip from './Tooltip.js';\\n\\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\\n  const [targetRect, setTargetRect] = useState(null);\\n  const buttonRef = useRef(null);\\n  return (\\n    <>\\n      <button\\n        {...rest}\\n        ref={buttonRef}\\n        onPointerEnter={() => {\\n          const rect = buttonRef.current.getBoundingClientRect();\\n          setTargetRect({\\n            left: rect.left,\\n            top: rect.top,\\n            right: rect.right,\\n            bottom: rect.bottom,\\n          });\\n        }}\\n        onPointerLeave={() => {\\n          setTargetRect(null);\\n        }}\\n      />\\n      {targetRect !== null && (\\n        <Tooltip targetRect={targetRect}>\\n          {tooltipContent}\\n        </Tooltip>\\n      )\\n    }\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Tooltip.js active\",\"children\":\"import { useRef, useLayoutEffect, useState } from 'react';\\nimport { createPortal } from 'react-dom';\\nimport TooltipContainer from './TooltipContainer.js';\\n\\nexport default function Tooltip({ children, targetRect }) {\\n  const ref = useRef(null);\\n  const [tooltipHeight, setTooltipHeight] = useState(0);\\n\\n  useLayoutEffect(() => {\\n    const { height } = ref.current.getBoundingClientRect();\\n    setTooltipHeight(height);\\n  }, []);\\n\\n  let tooltipX = 0;\\n  let tooltipY = 0;\\n  if (targetRect !== null) {\\n    tooltipX = targetRect.left;\\n    tooltipY = targetRect.top - tooltipHeight;\\n    if (tooltipY < 0) {\\n      // 它不适合上方，因此把它放在下面。\\n      tooltipY = targetRect.bottom;\\n    }\\n  }\\n\\n  return createPortal(\\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\\n      {children}\\n    </TooltipContainer>,\\n    document.body\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TooltipContainer.js\",\"children\":\"export default function TooltipContainer({ children, x, y, contentRef }) {\\n  return (\\n    <div\\n      style={{\\n        position: 'absolute',\\n        pointerEvents: 'none',\\n        left: 0,\\n        top: 0,\\n        transform: `translate3d(${x}px, ${y}px, 0)`\\n      }}\\n    >\\n      <div ref={contentRef} className=\\\"tooltip\\\">\\n        {children}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".tooltip {\\n  color: white;\\n  background: #222;\\n  border-radius: 4px;\\n  padding: 4px;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"useeffect-does-not-block-the-browser\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 不阻塞浏览器绘制 \"]}],[\"$r\",\"p\",null,{\"children\":[\"下面是同样的例子，但是使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\" 代替 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\"。如果你使用的是速度较慢的设备，你可能注意到有时 tooltip 会“闪烁”，并且会在更正位置之前短暂地看到初始位置。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import ButtonWithTooltip from './ButtonWithTooltip.js';\\n\\nexport default function App() {\\n  return (\\n    <div>\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>\\n            This tooltip does not fit above the button.\\n            <br />\\n            This is why it's displayed below instead!\\n          </div>\\n        }\\n      >\\n        Hover over me (tooltip above)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ButtonWithTooltip.js\",\"children\":\"import { useState, useRef } from 'react';\\nimport Tooltip from './Tooltip.js';\\n\\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\\n  const [targetRect, setTargetRect] = useState(null);\\n  const buttonRef = useRef(null);\\n  return (\\n    <>\\n      <button\\n        {...rest}\\n        ref={buttonRef}\\n        onPointerEnter={() => {\\n          const rect = buttonRef.current.getBoundingClientRect();\\n          setTargetRect({\\n            left: rect.left,\\n            top: rect.top,\\n            right: rect.right,\\n            bottom: rect.bottom,\\n          });\\n        }}\\n        onPointerLeave={() => {\\n          setTargetRect(null);\\n        }}\\n      />\\n      {targetRect !== null && (\\n        <Tooltip targetRect={targetRect}>\\n          {tooltipContent}\\n        </Tooltip>\\n      )\\n    }\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Tooltip.js active\",\"children\":\"import { useRef, useEffect, useState } from 'react';\\nimport { createPortal } from 'react-dom';\\nimport TooltipContainer from './TooltipContainer.js';\\n\\nexport default function Tooltip({ children, targetRect }) {\\n  const ref = useRef(null);\\n  const [tooltipHeight, setTooltipHeight] = useState(0);\\n\\n  useEffect(() => {\\n    const { height } = ref.current.getBoundingClientRect();\\n    setTooltipHeight(height);\\n  }, []);\\n\\n  let tooltipX = 0;\\n  let tooltipY = 0;\\n  if (targetRect !== null) {\\n    tooltipX = targetRect.left;\\n    tooltipY = targetRect.top - tooltipHeight;\\n    if (tooltipY < 0) {\\n      // 它不适合上方，因此把它放在下面。\\n      tooltipY = targetRect.bottom;\\n    }\\n  }\\n\\n  return createPortal(\\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\\n      {children}\\n    </TooltipContainer>,\\n    document.body\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TooltipContainer.js\",\"children\":\"export default function TooltipContainer({ children, x, y, contentRef }) {\\n  return (\\n    <div\\n      style={{\\n        position: 'absolute',\\n        pointerEvents: 'none',\\n        left: 0,\\n        top: 0,\\n        transform: `translate3d(${x}px, ${y}px, 0)`\\n      }}\\n    >\\n      <div ref={contentRef} className=\\\"tooltip\\\">\\n        {children}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".tooltip {\\n  color: white;\\n  background: #222;\\n  border-radius: 4px;\\n  padding: 4px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"为了使 bug 更容易重现，此版本在渲染期间人为地添加了延迟。React 将在处理 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 内部的状态更新之前让浏览器绘制屏幕。结果，tooltip 会闪烁：\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import ButtonWithTooltip from './ButtonWithTooltip.js';\\n\\nexport default function App() {\\n  return (\\n    <div>\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>\\n            This tooltip does not fit above the button.\\n            <br />\\n            This is why it's displayed below instead!\\n          </div>\\n        }\\n      >\\n        Hover over me (tooltip above)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n      <div style={{ height: 50 }} />\\n      <ButtonWithTooltip\\n        tooltipContent={\\n          <div>This tooltip fits above the button</div>\\n        }\\n      >\\n        Hover over me (tooltip below)\\n      </ButtonWithTooltip>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ButtonWithTooltip.js\",\"children\":\"import { useState, useRef } from 'react';\\nimport Tooltip from './Tooltip.js';\\n\\nexport default function ButtonWithTooltip({ tooltipContent, ...rest }) {\\n  const [targetRect, setTargetRect] = useState(null);\\n  const buttonRef = useRef(null);\\n  return (\\n    <>\\n      <button\\n        {...rest}\\n        ref={buttonRef}\\n        onPointerEnter={() => {\\n          const rect = buttonRef.current.getBoundingClientRect();\\n          setTargetRect({\\n            left: rect.left,\\n            top: rect.top,\\n            right: rect.right,\\n            bottom: rect.bottom,\\n          });\\n        }}\\n        onPointerLeave={() => {\\n          setTargetRect(null);\\n        }}\\n      />\\n      {targetRect !== null && (\\n        <Tooltip targetRect={targetRect}>\\n          {tooltipContent}\\n        </Tooltip>\\n      )\\n    }\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Tooltip.js active\",\"children\":\"import { useRef, useEffect, useState } from 'react';\\nimport { createPortal } from 'react-dom';\\nimport TooltipContainer from './TooltipContainer.js';\\n\\nexport default function Tooltip({ children, targetRect }) {\\n  const ref = useRef(null);\\n  const [tooltipHeight, setTooltipHeight] = useState(0);\\n\\n  // 人为地减慢了渲染\\n  let now = performance.now();\\n  while (performance.now() - now < 100) {\\n    // 不做任何事情...\\n  }\\n\\n  useEffect(() => {\\n    const { height } = ref.current.getBoundingClientRect();\\n    setTooltipHeight(height);\\n  }, []);\\n\\n  let tooltipX = 0;\\n  let tooltipY = 0;\\n  if (targetRect !== null) {\\n    tooltipX = targetRect.left;\\n    tooltipY = targetRect.top - tooltipHeight;\\n    if (tooltipY < 0) {\\n      // 它不适合上方，因此把它放在下面。\\n      tooltipY = targetRect.bottom;\\n    }\\n  }\\n\\n  return createPortal(\\n    <TooltipContainer x={tooltipX} y={tooltipY} contentRef={ref}>\\n      {children}\\n    </TooltipContainer>,\\n    document.body\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TooltipContainer.js\",\"children\":\"export default function TooltipContainer({ children, x, y, contentRef }) {\\n  return (\\n    <div\\n      style={{\\n        position: 'absolute',\\n        pointerEvents: 'none',\\n        left: 0,\\n        top: 0,\\n        transform: `translate3d(${x}px, ${y}px, 0)`\\n      }}\\n    >\\n      <div ref={contentRef} className=\\\"tooltip\\\">\\n        {children}\\n      </div>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".tooltip {\\n  color: white;\\n  background: #222;\\n  border-radius: 4px;\\n  padding: 4px;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 编辑这个例子，可以观察到即使渲染速度减慢，它也会阻塞绘制。\"]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"两次渲染并阻塞浏览器绘制会影响性能。尽量避免这种情况。\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"疑难解答 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"im-getting-an-error-uselayouteffect-does-nothing-on-the-server\",\"children\":[\"我收到一个错误：“ \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 在服务端没有任何作用” \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 的目的是让你的组件 \",[\"$r\",\"a\",null,{\"href\":\"#measuring-layout-before-the-browser-repaints-the-screen\",\"children\":\"使用布局信息来渲染\"}],\"：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"渲染初始的内容。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在 \",[\"$r\",\"em\",null,{\"children\":\"浏览器重新绘制屏幕之前\"}],\" 测量布局。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"使用所读取的布局信息渲染最终内容。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你或你的框架使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":\"服务端渲染\"}],\" 时，你的 React 应用将在服务端渲染 HTML 以进行初始渲染。这使你可以在加载 JavaScript 代码之前显示初始的 HTML。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"问题是在服务器上没有布局信息。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"a\",null,{\"href\":\"#measuring-layout-before-the-browser-repaints-the-screen\",\"children\":\"前面的示例\"}],\" 中，\",[\"$r\",\"code\",null,{\"children\":\"Tooltip\"}],\" 组件中的 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 调用允许它根据内容高度正确定位自己的位置（高于或低于内容）。如果你试图将 \",[\"$r\",\"code\",null,{\"children\":\"Tooltip\"}],\" 作为服务端初始 HTML 的一部分渲染，那么这是不可能确定的。在服务端，还没有布局！因此，即使你在服务端渲染它，它的位置也会在 JavaScript 加载和运行之后在客户端上“跳动”。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常，依赖于布局信息的组件不需要在服务器上渲染。例如，在初始渲染时显示 \",[\"$r\",\"code\",null,{\"children\":\"Tooltip\"}],\" 可能就没有意义了。它是通过客户端交互触发的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然而，如果你遇到这个问题，你有几个不同的选择：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\" 替换 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\"。React 可以在不阻塞绘制的情况下显示初始的渲染结果（因为初始的 HTML 将在 Effect 运行之前显示出来）。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"Alternatively, \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#providing-a-fallback-for-server-errors-and-client-only-content\",\"children\":\"mark your component as client-only.\"}],\" This tells React to replace its content up to the closest \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}]}],\" boundary with a loading fallback (for example, a spinner or a glimmer) during server rendering.\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"或者，只有在水合之后，使用 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 渲染组件。保留一个初始化为 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"isMounted\"}],\" 布尔状态，并在 \",[\"$r\",\"code\",null,{\"children\":\"useEffect\"}],\" 调用中将其设置为 \",[\"$r\",\"code\",null,{\"children\":\"true\"}],\"。然后你的渲染逻辑就会像 \",[\"$r\",\"code\",null,{\"children\":\"return isMounted ? <RealContent /> : <FallbackContent />\"}],\" 这样。在服务端和水合过程中，用户将看到 \",[\"$r\",\"code\",null,{\"children\":\"FallbackContent\"}],\"，它不应该调用 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\"。然后 React 将用 \",[\"$r\",\"code\",null,{\"children\":\"RealContent\"}],\" 替换它，\",[\"$r\",\"code\",null,{\"children\":\"RealContent\"}],\" 仅在客户端上运行并且可以包含 \",[\"$r\",\"code\",null,{\"children\":\"useLayoutEffect\"}],\" 调用。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你将组件与外部数据存储同步，并且依赖 \",[\"$r\",\"code\",null,{\"children\":\"useLayouteffect\"}],\" 的原因不同于测量布局，可以考虑使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useSyncExternalStore#adding-support-for-server-rendering\",\"children\":\"支持服务端渲染\"}],\" 的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useSyncExternalStore\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useSyncExternalStore\"}]}],\"。\"]}],\"\\n\"]}],\"\\n\"]}]]}]]","meta":{"title":"useLayoutEffect"}},"__N_SSG":true}