{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#usedeferredvalue\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useDeferredValue(value)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#showing-stale-content-while-fresh-content-is-loading\",\"depth\":3,\"text\":\"在新内容加载期间显示旧内容。 \"},{\"url\":\"#indicating-that-the-content-is-stale\",\"depth\":3,\"text\":\"表明内容已过时 \"},{\"url\":\"#deferring-re-rendering-for-a-part-of-the-ui\",\"depth\":3,\"text\":\"延迟渲染 UI 的某些部分 \"}]","content":"[[\"$r\",\"MaxWidth\",\"48\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 是一个 React Hook，可以让你延迟更新 UI 的某些部分。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const deferredValue = useDeferredValue(value)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usedeferredvalue\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDeferredValue(value)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 来获取该值的延迟版本。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useDeferredValue } from 'react';\\n\\nfunction SearchPage() {\\n  const [query, setQuery] = useState('');\\n  const deferredQuery = useDeferredValue(query);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请看下方更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"value\"}],\"：你想延迟的值，可以是任何类型。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在组件的初始渲染期间，返回的延迟值将与你提供的值相同。但是在组件更新时，React 将会先尝试使用旧值进行重新渲染（因此它将返回旧值），然后再在后台使用新值进行另一个重新渲染（这时它将返回更新后的值）。\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意事项 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你应该向 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 传递原始值（如字符串和数字）或在渲染之外创建的对象。如果你在渲染期间创建了一个新对象，并立即将其传递给 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\"，那么每次渲染时这个对象都会不同，这将导致后台不必要的重新渲染。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 接收到与之前不同的值（使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Object.is\"}]}],\" 进行比较）时，除了当前渲染（此时它仍然使用旧值），它还会安排一个后台重新渲染。这个后台重新渲染是可以被中断的，如果 \",[\"$r\",\"code\",null,{\"children\":\"value\"}],\" 有新的更新，React 会从头开始重新启动后台渲染。举个例子，如果用户在输入框中的输入速度比接收延迟值的图表重新渲染的速度快，那么图表只会在用户停止输入后重新渲染。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 与 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}]}],\" 集成。如果由于新值引起的后台更新导致 UI 暂停，用户将不会看到后备方案。他们将看到旧的延迟值，直到数据加载完成。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 本身并不能阻止额外的网络请求。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 本身不会引起任何固定的延迟。一旦 React 完成原始的重新渲染，它会立即开始使用新的延迟值处理后台重新渲染。由事件（例如输入）引起的任何更新都会中断后台重新渲染，并被优先处理。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 引起的后台重新渲染在提交到屏幕之前不会触发 Effect。如果后台重新渲染被暂停，Effect 将在数据加载后和 UI 更新后运行。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"showing-stale-content-while-fresh-content-is-loading\",\"children\":\"在新内容加载期间显示旧内容。 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 来延迟更新 UI 的某些部分。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 5, \\\"query\\\"], [2, 5, \\\"deferredQuery\\\"]]\",\"children\":\"import { useState, useDeferredValue } from 'react';\\n\\nfunction SearchPage() {\\n  const [query, setQuery] = useState('');\\n  const deferredQuery = useDeferredValue(query);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在初始渲染期间，返回的 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"延迟值\"}],\" 与你提供的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"值\"}],\" 相同。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在更新期间，\",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"延迟值\"}],\" 会“滞后于”最新的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"值\"}],\"。具体地说，React 首先会在不更新延迟值的情况下进行重新渲染，然后在后台尝试使用新接收到的值进行重新渲染。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"让我们通过一个例子来看看什么时候该使用它\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[\"这个例子假设你使用了支持 \",[\"$r\",\"code\",null,{\"children\":\"Suspense\"}],\" 的数据源：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用支持 suspense 的框架进行数据获取，例如 \",[\"$r\",\"a\",null,{\"href\":\"https://relay.dev/docs/guided-tour/rendering/loading-states/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Relay\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://nextjs.org/docs/getting-started/react-essentials\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Next.js\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/lazy\",\"children\":[\"$r\",\"code\",null,{\"children\":\"lazy\"}]}],\" 懒加载组件代码\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/use\",\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" 读取 Promise 的值\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":\"了解更多有关 suspense 及其限制的信息\"}],\"。\"]}]]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个例子中，在获取搜索结果时，\",[\"$r\",\"code\",null,{\"children\":\"SearchResults\"}],\" 组件会 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense#displaying-a-fallback-while-content-is-loading\",\"children\":\"suspend\"}],\"。尝试输入 \",[\"$r\",\"code\",null,{\"children\":\"\\\"a\\\"\"}],\"，等待结果出现后，将其编辑为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"ab\\\"\"}],\"。此时 \",[\"$r\",\"code\",null,{\"children\":\"\\\"a\\\"\"}],\" 的结果会被加载中的后备方案替代。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState } from 'react';\\nimport SearchResults from './SearchResults.js';\\n\\nexport default function App() {\\n  const [query, setQuery] = useState('');\\n  return (\\n    <>\\n      <label>\\n        Search albums:\\n        <input value={query} onChange={e => setQuery(e.target.value)} />\\n      </label>\\n      <Suspense fallback={<h2>Loading...</h2>}>\\n        <SearchResults query={query} />\\n      </Suspense>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SearchResults.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：此组件使用了一种实验性 API\\n// 该 API 尚未在稳定版本的 React 中发布。\\n\\n// 如果想找实际的例子，可以尝试一个\\n// 已经集成了 suspense 的框架，比如 Relay 或 Next.js。\\n\\nexport default function SearchResults({ query }) {\\n  if (query === '') {\\n    return null;\\n  }\\n  const albums = use(fetchData(`/search?q=${query}`));\\n  if (albums.length === 0) {\\n    return <p>No matches for <i>\\\"{query}\\\"</i></p>;\\n  }\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决演示中的一个 bug 的临时实现。\\n// TODO：待 bug 修复后替换为真正的实现。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：使用 suspense 进行数据获取的方式\\n// 取决于与其配合使用的框架。\\n// 缓存逻辑通常会在框架内部处理。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url.startsWith('/search?q=')) {\\n    return await getSearchResults(url.slice('/search?q='.length));\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getSearchResults(query) {\\n  // 添加一个假延迟来让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  const allAlbums = [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n\\n  const lowerQuery = query.trim().toLowerCase();\\n  return allAlbums.filter(album => {\\n    const lowerTitle = album.title.toLowerCase();\\n    return (\\n      lowerTitle.startsWith(lowerQuery) ||\\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\\n    )\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"58\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一个常见的备选 UI 模式是 \",[\"$r\",\"strong\",null,{\"children\":\"延迟\"}],\" 更新结果列表，并继续显示之前的结果，直到新的结果准备好。调用 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 并将延迟版本的查询参数向下传递：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,11}\",\"children\":\"export default function App() {\\n  const [query, setQuery] = useState('');\\n  const deferredQuery = useDeferredValue(query);\\n  return (\\n    <>\\n      <label>\\n        Search albums:\\n        <input value={query} onChange={e => setQuery(e.target.value)} />\\n      </label>\\n      <Suspense fallback={<h2>Loading...</h2>}>\\n        <SearchResults query={deferredQuery} />\\n      </Suspense>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"query\"}],\" 会立即更新，所以输入框将显示新值。然而，\",[\"$r\",\"code\",null,{\"children\":\"deferredQuery\"}],\" 在数据加载完成前会保留以前的值，因此 \",[\"$r\",\"code\",null,{\"children\":\"SearchResults\"}],\" 将暂时显示旧的结果。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在下面的示例中，输入 \",[\"$r\",\"code\",null,{\"children\":\"\\\"a\\\"\"}],\"，等待结果加载完成，然后将输入框编辑为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"ab\\\"\"}],\"。注意，现在你看到的不是 suspense 后备方案，而是旧的结果列表，直到新的结果加载完成：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState, useDeferredValue } from 'react';\\nimport SearchResults from './SearchResults.js';\\n\\nexport default function App() {\\n  const [query, setQuery] = useState('');\\n  const deferredQuery = useDeferredValue(query);\\n  return (\\n    <>\\n      <label>\\n        Search albums:\\n        <input value={query} onChange={e => setQuery(e.target.value)} />\\n      </label>\\n      <Suspense fallback={<h2>Loading...</h2>}>\\n        <SearchResults query={deferredQuery} />\\n      </Suspense>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SearchResults.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：此组件使用了一种实验性 API\\n// 该 API 尚未在稳定版本的 React 中发布。\\n\\n// 如果想找实际的例子，可以尝试一个\\n// 已经集成了 suspense 的框架，比如 Relay 或 Next.js。\\n\\nexport default function SearchResults({ query }) {\\n  if (query === '') {\\n    return null;\\n  }\\n  const albums = use(fetchData(`/search?q=${query}`));\\n  if (albums.length === 0) {\\n    return <p>No matches for <i>\\\"{query}\\\"</i></p>;\\n  }\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决演示中的一个 bug 的临时实现。\\n// TODO：待 bug 修复后应该替换为真正的实现。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：使用 suspense 进行数据获取的方式\\n// 取决于与其配合使用的框架。\\n// 缓存逻辑通常会在框架内部处理。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url.startsWith('/search?q=')) {\\n    return await getSearchResults(url.slice('/search?q='.length));\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getSearchResults(query) {\\n// 添加一个假延迟来让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  const allAlbums = [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n\\n  const lowerQuery = query.trim().toLowerCase();\\n  return allAlbums.filter(album => {\\n    const lowerTitle = album.title.toLowerCase();\\n    return (\\n      lowerTitle.startsWith(lowerQuery) ||\\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\\n    )\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"how-does-deferring-a-value-work-under-the-hood\",\"children\":\"如何在内部实现延迟值？ \"}],[\"$r\",\"p\",null,{\"children\":\"你可以将其看成两个步骤：\"}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"首先，React 会使用新的 \",[\"$r\",\"code\",null,{\"children\":\"query\"}],\" 值（\",[\"$r\",\"code\",null,{\"children\":\"\\\"ab\\\"\"}],\"）和旧的 \",[\"$r\",\"code\",null,{\"children\":\"deferredQuery\"}],\" 值（仍为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"a\\\"\"}],\"）重新渲染。\"]}],\" 传递给结果列表的 \",[\"$r\",\"code\",null,{\"children\":\"deferredQuery\"}],\" 值是\",[\"$r\",\"strong\",null,{\"children\":\"延迟\"}],\"的，它“滞后于” \",[\"$r\",\"code\",null,{\"children\":\"query\"}],\" 值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"在后台，React 尝试重新渲染，并将 \",[\"$r\",\"code\",null,{\"children\":\"query\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"deferredQuery\"}],\" 两个值都更新为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"ab\\\"\"}],\"。\"]}],\" 如果此次重新渲染完成，React 将在屏幕上显示它。但是，如果它 suspense（即 \",[\"$r\",\"code\",null,{\"children\":\"\\\"ab\\\"\"}],\" 的结果尚未加载），React 将放弃这次渲染，并在数据加载后再次尝试重新渲染。用户将一直看到旧的延迟值，直到数据准备就绪。\"]}],\"\\n\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"被推迟的“后台”渲染是可中断的。例如，如果你再次在输入框中输入，React 将会中断渲染，并从新值开始重新渲染。React 总是使用最新提供的值。\"}],[\"$r\",\"p\",null,{\"children\":\"注意，每次按键仍会发起一个网络请求。这里延迟的是显示结果（直到它们准备就绪），而不是网络请求本身。即使用户继续输入，每个按键的响应都会被缓存，所以按下 Backspace 键是瞬时的，不会再次获取数据。\"}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"indicating-that-the-content-is-stale\",\"children\":\"表明内容已过时 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在上面的示例中，当最新的查询结果仍在加载时，没有任何提示。如果新的结果需要一段时间才能加载完成，这可能会让用户感到困惑。为了更明显地告知用户结果列表与最新查询不匹配，你可以在显示旧的查询结果时添加一个视觉提示：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"<div style={{\\n  opacity: query !== deferredQuery ? 0.5 : 1,\\n}}>\\n  <SearchResults query={deferredQuery} />\\n</div>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"有了上面这段代码，当你开始输入时，旧的结果列表会略微变暗，直到新的结果列表加载完毕。你也可以添加 CSS 过渡来延迟变暗的过程，让用户感受到一种渐进式的过渡，就像下面的例子一样：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState, useDeferredValue } from 'react';\\nimport SearchResults from './SearchResults.js';\\n\\nexport default function App() {\\n  const [query, setQuery] = useState('');\\n  const deferredQuery = useDeferredValue(query);\\n  const isStale = query !== deferredQuery;\\n  return (\\n    <>\\n      <label>\\n        Search albums:\\n        <input value={query} onChange={e => setQuery(e.target.value)} />\\n      </label>\\n      <Suspense fallback={<h2>Loading...</h2>}>\\n        <div style={{\\n          opacity: isStale ? 0.5 : 1,\\n          transition: isStale ? 'opacity 0.2s 0.2s linear' : 'opacity 0s 0s linear'\\n        }}>\\n          <SearchResults query={deferredQuery} />\\n        </div>\\n      </Suspense>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SearchResults.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：此组件使用了一种实验性 API\\n// 该 API 尚未在稳定版本的 React 中发布。\\n\\n// 如果想找实际的例子，可以尝试一个\\n// 已经集成了 suspense 的框架，比如 Relay 或 Next.js。\\n\\nexport default function SearchResults({ query }) {\\n  if (query === '') {\\n    return null;\\n  }\\n  const albums = use(fetchData(`/search?q=${query}`));\\n  if (albums.length === 0) {\\n    return <p>No matches for <i>\\\"{query}\\\"</i></p>;\\n  }\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决演示中的一个 bug 的临时实现。\\n// TODO：待 bug 修复后应该替换为真正的实现。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：使用 suspense 进行数据获取的方式\\n// 取决于与其配合使用的框架。\\n// 缓存逻辑通常会在框架内部处理。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url.startsWith('/search?q=')) {\\n    return await getSearchResults(url.slice('/search?q='.length));\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getSearchResults(query) {\\n// 添加一个假延迟来让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  const allAlbums = [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n\\n  const lowerQuery = query.trim().toLowerCase();\\n  return allAlbums.filter(album => {\\n    const lowerTitle = album.title.toLowerCase();\\n    return (\\n      lowerTitle.startsWith(lowerQuery) ||\\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\\n    )\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"96\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"deferring-re-rendering-for-a-part-of-the-ui\",\"children\":\"延迟渲染 UI 的某些部分 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你还可以将 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 作为性能优化的手段。当你的 UI 某个部分重新渲染很慢、没有简单的优化方法，同时你又希望避免它阻塞其他 UI 的渲染时，使用 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 很有帮助。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"想象一下，你有一个文本框和一个组件（例如图表或长列表），在每次按键时都会重新渲染：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function App() {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input value={text} onChange={e => setText(e.target.value)} />\\n      <SlowList text={text} />\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"首先，我们可以优化 \",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\"，使其在 props 不变的情况下跳过重新渲染。只需将其 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo#skipping-re-rendering-when-props-are-unchanged\",\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"memo\"}],\" 包裹\"]}],\" 即可：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,3}\",\"children\":\"const SlowList = memo(function SlowList({ text }) {\\n  // ...\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然而，这仅在 \",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 的 props 与上一次的渲染时相同才有用。你现在遇到的问题是，当这些 props \",[\"$r\",\"strong\",null,{\"children\":\"不同\"}],\" 时，并且实际上需要展示不同的视觉输出时，页面会变得很慢。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"具体而言，主要的性能问题在于，每次你输入内容时，\",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 都会接收新的 props，并重新渲染整个树结构，这会让输入感觉很卡顿。使用 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 能够优先更新输入框（必须快速更新），而不是更新结果列表（可以更新慢一些），从而缓解这个问题：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,7}\",\"children\":\"function App() {\\n  const [text, setText] = useState('');\\n  const deferredText = useDeferredValue(text);\\n  return (\\n    <>\\n      <input value={text} onChange={e => setText(e.target.value)} />\\n      <SlowList text={deferredText} />\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这并没有让 \",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 的重新渲染变快。然而，它告诉 React 可以将列表的重新渲染优先级降低，这样就不会阻塞按键输入。列表的更新会“滞后”于输入，然后“追赶”上来。与之前一样，React 会尽快更新列表，但不会阻塞用户输入。\"]}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"useDeferredValue 和未优化的重新渲染之间的区别\",\"titleId\":\"examples\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"deferred-re-rendering-of-the-list\",\"children\":\"延迟列表的重新渲染 \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 组件中的每个 item 都被 \",[\"$r\",\"strong\",null,{\"children\":\"故意减缓了渲染速度\"}],\"，这样你就可以看到 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 是如何让输入保持响应的。当你在输入框中输入时，你会发现输入很灵敏，而列表的更新会稍有延迟。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useDeferredValue } from 'react';\\nimport SlowList from './SlowList.js';\\n\\nexport default function App() {\\n  const [text, setText] = useState('');\\n  const deferredText = useDeferredValue(text);\\n  return (\\n    <>\\n      <input value={text} onChange={e => setText(e.target.value)} />\\n      <SlowList text={deferredText} />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SlowList.js\",\"children\":\"import { memo } from 'react';\\n\\nconst SlowList = memo(function SlowList({ text }) {\\n  // 仅打印一次。实际的减速是在 SlowItem 组件内部。\\n  console.log('[ARTIFICIALLY SLOW] Rendering 250 <SlowItem />');\\n\\n  let items = [];\\n  for (let i = 0; i < 250; i++) {\\n    items.push(<SlowItem key={i} text={text} />);\\n  }\\n  return (\\n    <ul className=\\\"items\\\">\\n      {items}\\n    </ul>\\n  );\\n});\\n\\nfunction SlowItem({ text }) {\\n  let startTime = performance.now();\\n  while (performance.now() - startTime < 1) {\\n    // 每个 item 暂停 1ms，模拟极其缓慢的代码\\n  }\\n\\n  return (\\n    <li className=\\\"item\\\">\\n      Text: {text}\\n    </li>\\n  )\\n}\\n\\nexport default SlowList;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".items {\\n  padding: 0;\\n}\\n\\n.item {\\n  list-style: none;\\n  display: block;\\n  height: 40px;\\n  padding: 5px;\\n  margin-top: 10px;\\n  border-radius: 4px;\\n  border: 1px solid #aaa;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"unoptimized-re-rendering-of-the-list\",\"children\":\"列表的未优化重新渲染 \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 组件中的每个 item 都被 \",[\"$r\",\"strong\",null,{\"children\":\"故意减缓了渲染速度\"}],\"，但这次没有使用 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"注意，输入框的输入感觉非常卡顿。这是因为没有使用 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\"，每次按键都会立即强制整个列表以不可中断的方式进行重新渲染。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\nimport SlowList from './SlowList.js';\\n\\nexport default function App() {\\n  const [text, setText] = useState('');\\n  return (\\n    <>\\n      <input value={text} onChange={e => setText(e.target.value)} />\\n      <SlowList text={text} />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SlowList.js\",\"children\":\"import { memo } from 'react';\\n\\nconst SlowList = memo(function SlowList({ text }) {\\n  // 仅打印一次。实际的减速是在 SlowItem 组件内部。\\n  console.log('[ARTIFICIALLY SLOW] Rendering 250 <SlowItem />');\\n\\n  let items = [];\\n  for (let i = 0; i < 250; i++) {\\n    items.push(<SlowItem key={i} text={text} />);\\n  }\\n  return (\\n    <ul className=\\\"items\\\">\\n      {items}\\n    </ul>\\n  );\\n});\\n\\nfunction SlowItem({ text }) {\\n  let startTime = performance.now();\\n  while (performance.now() - startTime < 1) {\\n    // 每个 item 暂停 1ms，模拟极其缓慢的代码\\n  }\\n\\n  return (\\n    <li className=\\\"item\\\">\\n      Text: {text}\\n    </li>\\n  )\\n}\\n\\nexport default SlowList;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".items {\\n  padding: 0;\\n}\\n\\n.item {\\n  list-style: none;\\n  display: block;\\n  height: 40px;\\n  padding: 5px;\\n  margin-top: 10px;\\n  border-radius: 4px;\\n  border: 1px solid #aaa;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"这个优化需要将 \",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 包裹在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中。这是因为每当 \",[\"$r\",\"code\",null,{\"children\":\"text\"}],\" 改变时，React 需要能够快速重新渲染父组件。在重新渲染期间，\",[\"$r\",\"code\",null,{\"children\":\"deferredText\"}],\" 仍然保持着之前的值，因此 \",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 可以跳过重新渲染（它的 props 没有改变）。如果没有 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\"，\",[\"$r\",\"code\",null,{\"children\":\"SlowList\"}],\" 仍会重新渲染，这将使优化失去意义。\"]}]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"how-is-deferring-a-value-different-from-debouncing-and-throttling\",\"children\":\"延迟一个值与防抖和节流之间有什么不同？ \"}],[\"$r\",\"p\",null,{\"children\":\"在上述的情景中，你可能会使用这两种常见的优化技术：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"防抖\"}],\" 是指在用户停止输入一段时间（例如一秒钟）之后再更新列表。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"节流\"}],\" 是指每隔一段时间（例如最多每秒一次）更新列表。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"虽然这些技术在某些情况下是有用的，但 \",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 更适合优化渲染，因为它与 React 自身深度集成，并且能够适应用户的设备。\"]}],[\"$r\",\"p\",null,{\"children\":[\"与防抖或节流不同，\",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 不需要选择任何固定延迟时间。如果用户的设备很快（比如性能强劲的笔记本电脑），延迟的重渲染几乎会立即发生并且不会被察觉。如果用户的设备较慢，那么列表会相应地“滞后”于输入，滞后的程度与设备的速度有关。\"]}],[\"$r\",\"p\",null,{\"children\":[\"此外，与防抖或节流不同，\",[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}],\" 执行的延迟重新渲染默认是可中断的。这意味着，如果 React 正在重新渲染一个大型列表，但用户进行了另一次键盘输入，React 会放弃该重新渲染，先处理键盘输入，然后再次开始在后台渲染。相比之下，防抖和节流仍会产生不顺畅的体验，因为它们是阻塞的：它们仅仅是将渲染阻塞键盘输入的时刻推迟了。\"]}],[\"$r\",\"p\",null,{\"children\":\"如果你要优化的工作不是在渲染期间发生的，那么防抖和节流仍然非常有用。例如，它们可以让你减少网络请求的次数。你也可以同时使用这些技术。\"}]]}]]}]]","meta":{"title":"useDeferredValue"}},"__N_SSG":true}