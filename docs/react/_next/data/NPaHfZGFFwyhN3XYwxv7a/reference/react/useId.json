{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#useid\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useId()\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#generating-unique-ids-for-accessibility-attributes\",\"depth\":3,\"text\":\"为无障碍属性生成唯一 ID \"},{\"url\":\"#generating-ids-for-several-related-elements\",\"depth\":3,\"text\":\"为多个相关元素生成 ID \"},{\"url\":\"#specifying-a-shared-prefix-for-all-generated-ids\",\"depth\":3,\"text\":\"为所有生成的 ID 指定共享前缀 \"},{\"url\":\"#using-the-same-id-prefix-on-the-client-and-the-server\",\"depth\":3,\"text\":\"在客户端和服务端上使用相同的 ID 前缀 \"}]","content":"[[\"$r\",\"MaxWidth\",\"58\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 是一个 React Hook，可以生成传递给无障碍属性的唯一 ID。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const id = useId()\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"useid\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId()\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 生成唯一 ID：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useId } from 'react';\\n\\nfunction PasswordField() {\\n  const passwordHintId = useId();\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请看下方更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 不带任何参数。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 返回一个唯一的字符串 ID，与此特定组件中的 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 调用相关联。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意事项 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 是一个 Hook，因此你只能 \",[\"$r\",\"strong\",null,{\"children\":\"在组件的顶层\"}],\" 或自己的 Hook 中调用它。你不能在内部循环或条件判断中调用它。如果需要，可以提取一个新组件并将 state 移到该组件中。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" \",[\"$r\",\"strong\",null,{\"children\":\"不应该被用来生成列表中的 key\"}],\"。\",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists#where-to-get-your-key\",\"children\":\"key 应该由你的数据生成\"}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"不要使用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 来生成列表中的 key\"]}],\"。\",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists#where-to-get-your-key\",\"children\":\"key 应该由你的数据生成\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"generating-unique-ids-for-accessibility-attributes\",\"children\":\"为无障碍属性生成唯一 ID \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 生成唯一 ID：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 4, \\\"passwordHintId\\\"]]\",\"children\":\"import { useId } from 'react';\\n\\nfunction PasswordField() {\\n  const passwordHintId = useId();\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以将 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"生成的 ID\"}],\" 传递给不同的属性：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 2, \\\"passwordHintId\\\"], [1, 3, \\\"passwordHintId\\\"]]\",\"children\":\"<>\\n  <input type=\\\"password\\\" aria-describedby={passwordHintId} />\\n  <p id={passwordHintId}>\\n</>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"让我们通过一个例子，看看这个什么时候有用\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/Accessibility/ARIA/Attributes/aria-describedby\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"aria-describedby\"}]}],\" 这样的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/Accessibility/ARIA\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"HTML 无障碍属性\"}],\" 允许你指定两个标签之间的关系。例如，你可以指定一个元素（比如输入框）由另一个元素（比如段落）描述。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在常规的 HTML 中，你会这样写：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"{5,8}\",\"children\":\"<label>\\n  密码:\\n  <input\\n    type=\\\"password\\\"\\n    aria-describedby=\\\"password-hint\\\"\\n  />\\n</label>\\n<p id=\\\"password-hint\\\">\\n  密码应该包含至少 18 个字符\\n</p>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然而，在 React 中直接编写 ID 并不是一个好的习惯。一个组件可能会在页面上渲染多次，但是 ID 必须是唯一的！不要使用自己编写的 ID，而是使用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 生成唯一的 ID。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,11,14}\",\"children\":\"import { useId } from 'react';\\n\\nfunction PasswordField() {\\n  const passwordHintId = useId();\\n  return (\\n    <>\\n      <label>\\n        密码:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby={passwordHintId}\\n        />\\n      </label>\\n      <p id={passwordHintId}>\\n        密码应该包含至少 18 个字符\\n      </p>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在，即使 \",[\"$r\",\"code\",null,{\"children\":\"PasswordField\"}],\" 多次出现在屏幕上，生成的 ID 并不会冲突。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useId } from 'react';\\n\\nfunction PasswordField() {\\n  const passwordHintId = useId();\\n  return (\\n    <>\\n      <label>\\n        密码:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby={passwordHintId}\\n        />\\n      </label>\\n      <p id={passwordHintId}>\\n        密码应该包含至少 18 个字符\\n      </p>\\n    </>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <h2>输入密码</h2>\\n      <PasswordField />\\n      <h2>验证密码</h2>\\n      <PasswordField />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"72\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://www.youtube.com/watch?v=0dNzNcuEuOo\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"请看这个视频\"}],\"，了解辅助技术所提供的用户体验的差异。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":\"使用服务端渲染时\"}],\"，\",[\"$r\",\"strong\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 需要在服务器和客户端上有相同的组件树\"]}],\"。如果你在服务器和客户端上渲染的树不完全匹配，生成的 ID 将不匹配。\"]}]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"why-is-useid-better-than-an-incrementing-counter\",\"children\":\"为什么 useId 比递增计数器更好？ \"}],[\"$r\",\"p\",null,{\"children\":[\"你可能想知道为什么使用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 比增加全局变量（如 \",[\"$r\",\"code\",null,{\"children\":\"nextId++\"}],\"）更好。\"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 的主要好处是 React 确保它能够与 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":\"服务端渲染\"}],\"一起工作。 在服务器渲染期间，你的组件生成输出 HTML。随后，在客户端，\",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":\"hydration\"}],\" 会将你的事件处理程序附加到生成的 HTML 上。由于 hydration，客户端必须匹配服务器输出的 HTML。\"]}],[\"$r\",\"p\",null,{\"children\":[\"使用递增计数器很难保证这一点，因为客户端组件被 hydrate 处理后的顺序可能与服务器 HTML 的顺序不匹配。调用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 可以确保 hydration 正常工作，以及服务器和客户端之间的输出相匹配。\"]}],[\"$r\",\"p\",null,{\"children\":[\"在 React 内部，调用组件的“父路径”生成 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\"。这就是为什么如果客户端和服务器的树相同，不管渲染顺序如何，“父路径”始终都匹配。\"]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"generating-ids-for-several-related-elements\",\"children\":\"为多个相关元素生成 ID \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你需要为多个相关元素生成 ID，可以调用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 来为它们生成共同的前缀：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useId } from 'react';\\n\\nexport default function Form() {\\n  const id = useId();\\n  return (\\n    <form>\\n      <label htmlFor={id + '-firstName'}>名字：</label>\\n      <input id={id + '-firstName'} type=\\\"text\\\" />\\n      <hr />\\n      <label htmlFor={id + '-lastName'}>姓氏：</label>\\n      <input id={id + '-lastName'} type=\\\"text\\\" />\\n    </form>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"82\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"可以使你避免为每个需要唯一 ID 的元素调用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\"。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"specifying-a-shared-prefix-for-all-generated-ids\",\"children\":\"为所有生成的 ID 指定共享前缀 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你在单个页面上渲染多个独立的 React 应用程序，请在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot#parameters\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 调用中将 \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\" 作为选项传递。这确保了由两个不同应用程序生成的 ID 永远不会冲突，因为使用 \",[\"$r\",\"code\",null,{\"children\":\"useId\"}],\" 生成的每个 ID 都将以你指定的不同前缀开头。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-html\",\"meta\":\"index.html\",\"children\":\"<!DOCTYPE html>\\n<html>\\n  <head><title>My app</title></head>\\n  <body>\\n    <div id=\\\"root1\\\"></div>\\n    <div id=\\\"root2\\\"></div>\\n  </body>\\n</html>\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useId } from 'react';\\n\\nfunction PasswordField() {\\n  const passwordHintId = useId();\\n  console.log('生成的 ID：', passwordHintId)\\n  return (\\n    <>\\n      <label>\\n        密码:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby={passwordHintId}\\n        />\\n      </label>\\n      <p id={passwordHintId}>\\n        密码应该包含至少 18 个字符\\n      </p>\\n    </>\\n  );\\n}\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <h2>输入密码</h2>\\n      <PasswordField />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js active\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport App from './App.js';\\nimport './styles.css';\\n\\nconst root1 = createRoot(document.getElementById('root1'), {\\n  identifierPrefix: 'my-first-app-'\\n});\\nroot1.render(<App />);\\n\\nconst root2 = createRoot(document.getElementById('root2'), {\\n  identifierPrefix: 'my-second-app-'\\n});\\nroot2.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"#root1 {\\n  border: 5px solid blue;\\n  padding: 10px;\\n  margin: 5px;\\n}\\n\\n#root2 {\\n  border: 5px solid green;\\n  padding: 10px;\\n  margin: 5px;\\n}\\n\\ninput { margin: 5px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"using-the-same-id-prefix-on-the-client-and-the-server\",\"children\":\"在客户端和服务端上使用相同的 ID 前缀 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你 \",[\"$r\",\"a\",null,{\"href\":\"#specifying-a-shared-prefix-for-all-generated-ids\",\"children\":\"在同一页面上渲染多个独立的 React 应用程序\"}],\"，并且其中一些应用程序是服务端渲染，请确保你在客户端向 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/hydrateRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"hydrateRoot\"}]}],\" 调用传递的标识符前缀 \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\" 与你向 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":\"服务器 API \"}],\" （如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server/renderToPipeableStream\",\"children\":[\"$r\",\"code\",null,{\"children\":\"renderToPipeableStream\"}]}],\" ）传递的标识符前缀 \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\" 相同。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// Server\\nimport { renderToPipeableStream } from 'react-dom/server';\\n\\nconst { pipe } = renderToPipeableStream(\\n  <App />,\\n  { identifierPrefix: 'react-app1' }\\n);\\n\"}]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// Client\\nimport { hydrateRoot } from 'react-dom/client';\\n\\nconst domNode = document.getElementById('root');\\nconst root = hydrateRoot(\\n  domNode,\\n  reactNode,\\n  { identifierPrefix: 'react-app1' }\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果页面上只有一个 React 应用程序，则无需传递 \",[\"$r\",\"code\",null,{\"children\":\"identifierPrefix\"}],\"。\"]}]]}]]","meta":{"title":"useId"}},"__N_SSG":true}