{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#lazy\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"lazy(load)\"}],\" \"]},{\"url\":\"#load\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"load\"}],\" 函数 \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"使用方法 \"},{\"url\":\"#suspense-for-code-splitting\",\"depth\":3,\"text\":\"使用 Suspense 实现懒加载组件 \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"疑难解答 \"},{\"url\":\"#my-lazy-components-state-gets-reset-unexpectedly\",\"depth\":3,\"text\":[\"我的 \",[\"$r\",\"code\",null,{\"children\":\"lazy\"}],\" 组件状态意外重置 \"]}]","content":"[[\"$r\",\"MaxWidth\",\"58\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"lazy\"}],\" 能够让你在组件第一次被渲染之前延迟加载组件的代码。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const SomeComponent = lazy(load)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"lazy\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"lazy(load)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件外部调用 \",[\"$r\",\"code\",null,{\"children\":\"lazy\"}],\"，以声明一个懒加载的 React 组件:\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { lazy } from 'react';\\n\\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请看下面的更多例子\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"load\"}],\": 一个返回 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}],\" 或另一个 \",[\"$r\",\"strong\",null,{\"children\":\"thenable\"}],\"（具有 \",[\"$r\",\"code\",null,{\"children\":\"then\"}],\" 方法的类 Promise 对象）的函数。React 不会在你尝试首次渲染返回的组件之前调用 \",[\"$r\",\"code\",null,{\"children\":\"load\"}],\" 函数。在 React 首次调用 \",[\"$r\",\"code\",null,{\"children\":\"load\"}],\" 后，它将等待其解析，然后将解析值的 \",[\"$r\",\"code\",null,{\"children\":\".default\"}],\" 渲染为 React 组件。返回的 Promise 和 Promise 的解析值都将被缓存，因此 React 不会多次调用 \",[\"$r\",\"code\",null,{\"children\":\"load\"}],\" 函数。如果 Promise 被拒绝，则 React 将抛出拒绝原因给最近的错误边界处理。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"lazy\"}],\" 返回一个 React 组件，你可以在 fiber 树中渲染。当懒加载组件的代码仍在加载时，尝试渲染它将会处于 \",[\"$r\",\"em\",null,{\"children\":\"暂停\"}],\" 状态。使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}]}],\" 可以在其加载时显示一个正在加载的提示。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"load\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"load\"}],\" 函数 \"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"load-parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"load\"}],\" 不接收任何参数。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"load-returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你需要返回一个 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}],\" 或其他 \",[\"$r\",\"strong\",null,{\"children\":\"thenable\"}],\"（具有 \",[\"$r\",\"code\",null,{\"children\":\"then\"}],\" 方法的类 Promise 对象）。它最终需要解析为有效的 React 组件类型，例如函数、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/forwardRef\",\"children\":[\"$r\",\"code\",null,{\"children\":\"forwardRef\"}]}],\" 组件。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"使用方法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"suspense-for-code-splitting\",\"children\":\"使用 Suspense 实现懒加载组件 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通常，你可以使用静态 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"import\"}]}],\" 声明来导入组件：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import MarkdownPreview from './MarkdownPreview.js';\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果想在组件第一次渲染前延迟加载这个组件的代码，请替换成以下导入方式：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { lazy } from 'react';\\n\\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"此代码依赖于 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/import\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"动态 \",[\"$r\",\"code\",null,{\"children\":\"import()\"}]]}],\"，因此可能需要你的打包工具或框架提供支持。使用这种模式要求导入的懒加载组件必须作为 \",[\"$r\",\"code\",null,{\"children\":\"default\"}],\" 导出。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你的组件代码可以按需加载，同时你需要指定在它正在加载时应该显示什么。你可以通过将懒加载组件或其任何父级包装到 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}]}],\" 边界中来实现：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,4}\",\"children\":\"<Suspense fallback={<Loading />}>\\n  <h2>Preview</h2>\\n  <MarkdownPreview />\\n </Suspense>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"MarkdownPreview\"}],\" 的代码只有在你尝试渲染它时才会被加载。如果 \",[\"$r\",\"code\",null,{\"children\":\"MarkdownPreview\"}],\" 还没有加载完成，将显示 \",[\"$r\",\"code\",null,{\"children\":\"Loading\"}],\"。请尝试勾选复选框：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState, Suspense, lazy } from 'react';\\nimport Loading from './Loading.js';\\n\\nconst MarkdownPreview = lazy(() => delayForDemo(import('./MarkdownPreview.js')));\\n\\nexport default function MarkdownEditor() {\\n  const [showPreview, setShowPreview] = useState(false);\\n  const [markdown, setMarkdown] = useState('Hello, **world**!');\\n  return (\\n    <>\\n      <textarea value={markdown} onChange={e => setMarkdown(e.target.value)} />\\n      <label>\\n        <input type=\\\"checkbox\\\" checked={showPreview} onChange={e => setShowPreview(e.target.checked)} />\\n        Show preview\\n      </label>\\n      <hr />\\n      {showPreview && (\\n        <Suspense fallback={<Loading />}>\\n          <h2>Preview</h2>\\n          <MarkdownPreview markdown={markdown} />\\n        </Suspense>\\n      )}\\n    </>\\n  );\\n}\\n\\n// 添加一个固定的延迟时间，以便你可以看到加载状态\\nfunction delayForDemo(promise) {\\n  return new Promise(resolve => {\\n    setTimeout(resolve, 2000);\\n  }).then(() => promise);\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Loading.js\",\"children\":\"export default function Loading() {\\n  return <p><i>Loading...</i></p>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/MarkdownPreview.js\",\"children\":\"import { Remarkable } from 'remarkable';\\n\\nconst md = new Remarkable();\\n\\nexport default function MarkdownPreview({ markdown }) {\\n  return (\\n    <div\\n      className=\\\"content\\\"\\n      dangerouslySetInnerHTML={{__html: md.render(markdown)}}\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"immer\\\": \\\"1.7.3\\\",\\n    \\\"react\\\": \\\"latest\\\",\\n    \\\"react-dom\\\": \\\"latest\\\",\\n    \\\"react-scripts\\\": \\\"latest\\\",\\n    \\\"remarkable\\\": \\\"2.0.1\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n}\\n\\ninput, textarea {\\n  margin-bottom: 10px;\\n}\\n\\nbody {\\n  min-height: 200px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这个示例代码人为地延迟了加载。在你下次取消选中并重新选中复选框时，\",[\"$r\",\"code\",null,{\"children\":\"Preview\"}],\" 将被缓存，因此不会出现加载状态。要再次查看加载状态，请在示例中单击“Reset”。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference/react/Suspense\",\"children\":\"了解如何使用 Suspense 管理加载状态。\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"疑难解答 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-lazy-components-state-gets-reset-unexpectedly\",\"children\":[\"我的 \",[\"$r\",\"code\",null,{\"children\":\"lazy\"}],\" 组件状态意外重置 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"不要在其他组件 \",[\"$r\",\"em\",null,{\"children\":\"内部\"}],\" 声明 \",[\"$r\",\"code\",null,{\"children\":\"lazy\"}],\" 组件：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4-5}\",\"children\":\"import { lazy } from 'react';\\n\\nfunction Editor() {\\n  // 🔴 Bad: 这将导致在重新渲染时重置所有状态\\n  const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"相反，总是在模块的顶层声明它们：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3-4}\",\"children\":\"import { lazy } from 'react';\\n\\n// ✅ Good: 将 lazy 组件声明在组件外部\\nconst MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\\n\\nfunction Editor() {\\n  // ...\\n}\\n\"}]}]]}]]","meta":{"title":"lazy","translators":["Davont"]}},"__N_SSG":true}