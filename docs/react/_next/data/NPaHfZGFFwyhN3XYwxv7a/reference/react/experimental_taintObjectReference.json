{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#taintobjectreference\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"taintObjectReference(message, object)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#prevent-user-data-from-unintentionally-reaching-the-client\",\"depth\":3,\"text\":\"防止用户数据被无意间传递到客户端 \"}]","content":"[[\"$r\",\"MaxWidth\",\"last\",{\"children\":[[\"$r\",\"Wip\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"此实验性 API 尚未在 React 的稳定版本中提供\"}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":\"可以尝试升级 React 包到最新的实验版本：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"react@experimental\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"react-dom@experimental\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"code\",null,{\"children\":\"eslint-plugin-react-hooks@experimental\"}]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":\"React 的实验版本可能有一些问题，请勿在生产环境中使用。\"}],[\"$r\",\"p\",null,{\"children\":\"此 API 仅在 React 服务器组件内可用。\"}]]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"taintObjectReference\"}],\" 允许阻止特定对象实例被传递给客户端组件，例如 \",[\"$r\",\"code\",null,{\"children\":\"user\"}],\" 对象。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"experimental_taintObjectReference(message, object);\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"请参阅 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/experimental_taintUniqueValue\",\"children\":[\"$r\",\"code\",null,{\"children\":\"taintUniqueValue\"}]}],\" 以了解关于防止传递密钥、哈希或令牌的更多信息。\"]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"taintobjectreference\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"taintObjectReference(message, object)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"taintObjectReference\"}],\"，并传递一个对象作为参数，然后将其注册到 React 中，表示不允许直接传递给客户端：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import {experimental_taintObjectReference} from 'react';\\n\\nexperimental_taintObjectReference(\\n  'Do not pass ALL environment variables to the client.',\\n  process.env\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下方更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"message\"}],\"：对象被传递给客户端组件时显示的消息。如果对象被传递给客户端组件，此消息将作为错误的一部分显示。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"object\"}],\"：被污染的对象。函数和类实例可以作为 \",[\"$r\",\"code\",null,{\"children\":\"object\"}],\" 传递给 \",[\"$r\",\"code\",null,{\"children\":\"taintObjectReference\"}],\"。React 会阻止直接将函数和类传递给客户端组件，并把默认的错误消息替换为在 \",[\"$r\",\"code\",null,{\"children\":\"message\"}],\" 中定义的内容。当将特定类型数组的实例作为 \",[\"$r\",\"code\",null,{\"children\":\"object\"}],\" 传递给 \",[\"$r\",\"code\",null,{\"children\":\"taintObjectReference\"}],\" 时，该类型数组的其他副本将不会被污染。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"experimental_taintObjectReference\"}],\" 返回 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"重新创建或克隆一个被污染的对象会创建一个新的未被污染的对象，其中可能包含敏感数据。如果有一个被污染的 \",[\"$r\",\"code\",null,{\"children\":\"user\"}],\" 对象，执行 \",[\"$r\",\"code\",null,{\"children\":\"const userInfo = {name: user.name, ssn: user.ssn}\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"{...user}\"}],\" 将创建新的未被污染的对象。\",[\"$r\",\"code\",null,{\"children\":\"taintObjectReference\"}],\" 只能防止把未修改的对象传递给客户端组件这种简单的错误。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"不要仅依赖于污点标记来确保安全\"}],\"。被污染的对象并不防止泄露每一个可能的派生值。例如，被污染的对象的克隆将创建一个新的未被污染的对象。使用来自被污染的对象的数据（例如 \",[\"$r\",\"code\",null,{\"children\":\"{secret: taintedObj.secret}\"}],\"）将创建一个新的值或对象，它不被污染。污点标记只是一层保护，安全的应用程序应该有多层保护、精心设计的 API 和隔离模式。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"prevent-user-data-from-unintentionally-reaching-the-client\",\"children\":\"防止用户数据被无意间传递到客户端 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"客户端组件不应接受携带敏感数据的对象。理想情况下数据获取函数不应暴露当前用户不允许访问的数据。有时在重构过程中会发生错误。为了防止这些错误在以后发生，我们可以在数据 API 中“污染”用户对象。\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import {experimental_taintObjectReference} from 'react';\\n\\nexport async function getUser(id) {\\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\\n  experimental_taintObjectReference(\\n    'Do not pass the entire user object to the client. ' +\\n      'Instead, pick off the specific properties you need for this use case.',\\n    user,\\n  );\\n  return user;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在，无论谁试图将此对象传递给客户端组件，都将抛出一个带有传入错误消息的错误。\"}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"protecting-against-leaks-in-data-fetching\",\"children\":\"防止数据获取中的泄漏 \"}],[\"$r\",\"p\",null,{\"children\":\"如果处于对敏感数据具有访问权限的服务器组件环境，必须牢记不要直接传递对象：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// api.js\\nexport async function getUser(id) {\\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\\n  return user;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { getUser } from 'api.js';\\nimport { InfoCard } from 'components.js';\\n\\nexport async function Profile(props) {\\n  const user = await getUser(props.userId);\\n  // DO NOT DO THIS\\n  return <InfoCard user={user} />;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// components.js\\n\\\"use client\\\";\\n\\nexport async function InfoCard({ user }) {\\n  return <div>{user.name}</div>;\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"理想情况下 \",[\"$r\",\"code\",null,{\"children\":\"getUser\"}],\" 不应暴露当前用户不允许访问的数据。为了防止将来把 \",[\"$r\",\"code\",null,{\"children\":\"user\"}],\" 对象传递给客户端组件，我们可以对用户对象进行“污染”：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// api.js\\nimport {experimental_taintObjectReference} from 'react';\\n\\nexport async function getUser(id) {\\n  const user = await db`SELECT * FROM users WHERE id = ${id}`;\\n  experimental_taintObjectReference(\\n    'Do not pass the entire user object to the client. ' +\\n      'Instead, pick off the specific properties you need for this use case.',\\n    user,\\n  );\\n  return user;\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"现在，如果有人试图将 \",[\"$r\",\"code\",null,{\"children\":\"user\"}],\" 对象传递给客户端组件，将会抛出一个带有传入错误消息的错误。\"]}]]}]]}]]","meta":{"title":"experimental_taintObjectReference"}},"__N_SSG":true}