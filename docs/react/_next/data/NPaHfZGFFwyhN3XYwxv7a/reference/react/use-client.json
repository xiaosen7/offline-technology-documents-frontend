{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#use-client\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" \"]},{\"url\":\"#how-use-client-marks-client-code\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 如何标记客户端代码 \"]},{\"url\":\"#when-to-use-use-client\",\"depth\":3,\"text\":[\"何时使用 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\"？ \"]},{\"url\":\"#serializable-types\",\"depth\":3,\"text\":\"服务器组件返回的可序列化类型 \"},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#building-with-interactivity-and-state\",\"depth\":3,\"text\":\"构建交互性与状态 \"},{\"url\":\"#using-client-apis\",\"depth\":3,\"text\":\"使用客户端 API \"},{\"url\":\"#using-third-party-libraries\",\"depth\":3,\"text\":\"使用第三方库 \"}]","content":"[[\"$r\",\"MaxWidth\",\"32\",{\"children\":[[\"$r\",\"Canary\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 仅在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project#bleeding-edge-react-frameworks\",\"children\":\"使用 React 服务器组件\"}],\" 或构建可适配库时需要。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 标记在客户端运行的代码。\"]}]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"use-client\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在文件顶部添加 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 以将模块及其传递的依赖项标记为客户端代码。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1}\",\"children\":\"'use client';\\n\\nimport { useState } from 'react';\\nimport { formatDate } from './formatters';\\nimport Button from './button';\\n\\nexport default function RichTextEditor({ timestamp, text }) {\\n  const date = formatDate(timestamp);\\n  // ...\\n  const editButton = <Button />;\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当从服务器组件导入带有 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 标记的文件时，\",[\"$r\",\"a\",null,{\"href\":\"/learn/start-a-new-react-project#bleeding-edge-react-frameworks\",\"children\":\"兼容的捆绑工具\"}],\" 将模块导入视为服务器运行和客户端运行代码之间的边界。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"作为 \",[\"$r\",\"code\",null,{\"children\":\"RichTextEditor\"}],\" 的依赖项，无论 \",[\"$r\",\"code\",null,{\"children\":\"formatDate\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"Button\"}],\" 的模块是否包含 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\"，其都将在客户端上进行评估。请注意，当从服务器代码导入时，单个模块可能在服务器上进行评估，并且当从客户端代码导入时，可能在客户端上进行评估。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 必须位于文件顶部，在任何导入或其他代码之前（可以位于代码顶部的注释之后）。它们必须用单引号或双引号编写，不能用反引号。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当从另一个客户端渲染的模块导入 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 模块时，该指示符不起作用。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当组件模块包含 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符时，保证对该组件的任何使用都将是客户端组件。然而，即使没有 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符，组件仍可以在客户端上进行评估。\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果组件是在带有 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符的模块中定义的，或者是带有 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符的模块的依赖，那么该组件将被视为客户端组件。否则，它将是服务器组件。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"标记为客户端评估的代码不仅限于组件。客户端模块子树的所有代码都将被发送到客户端并由客户端运行。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当服务器评估的模块从 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 模块导入值时，这些值必须是 React 组件或 \",[\"$r\",\"a\",null,{\"href\":\"#passing-props-from-server-to-client-components\",\"children\":\"受支持的可序列化属性值\"}],\"，以传递给客户端组件。其他用例将引发异常。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"how-use-client-marks-client-code\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 如何标记客户端代码 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 React 应用程序中，组件通常被拆分为单独的文件，或称之为 \",[\"$r\",\"a\",null,{\"href\":\"/learn/importing-and-exporting-components#exporting-and-importing-a-component\",\"children\":\"模块\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"对于使用 React 服务器组件的应用程序，默认情况下是由服务器渲染的。\",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 在服务器客户端边界中引入了 \",[\"$r\",\"a\",null,{\"href\":\"/learn/understanding-your-ui-as-a-tree#the-module-dependency-tree\",\"children\":\"模块依赖树\"}],\" ，从而有效地创建了一个客户端模块的子树。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为了更好地说明这一点，请参考下面的 React 服务器组件应用程序示例。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import FancyText from './FancyText';\\nimport InspirationGenerator from './InspirationGenerator';\\nimport Copyright from './Copyright';\\n\\nexport default function App() {\\n  return (\\n    <>\\n      <FancyText title text=\\\"Get Inspired App\\\" />\\n      <InspirationGenerator>\\n        <Copyright year={2004} />\\n      </InspirationGenerator>\\n    </>\\n  );\\n}\\n\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/FancyText.js\",\"children\":\"export default function FancyText({title, text}) {\\n  return title\\n    ? <h1 className='fancy title'>{text}</h1>\\n    : <h3 className='fancy cursive'>{text}</h3>\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/InspirationGenerator.js\",\"children\":\"'use client';\\n\\nimport { useState } from 'react';\\nimport inspirations from './inspirations';\\nimport FancyText from './FancyText';\\n\\nexport default function InspirationGenerator({children}) {\\n  const [index, setIndex] = useState(0);\\n  const quote = inspirations[index];\\n  const next = () => setIndex((index + 1) % inspirations.length);\\n\\n  return (\\n    <>\\n      <p>Your inspirational quote is:</p>\\n      <FancyText text={quote} />\\n      <button onClick={next}>Inspire me again</button>\\n      {children}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Copyright.js\",\"children\":\"export default function Copyright({year}) {\\n  return <p className='small'>©️ {year}</p>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/inspirations.js\",\"children\":\"export default [\\n  \\\"Don’t let yesterday take up too much of today.” — Will Rogers\\\",\\n  \\\"Ambition is putting a ladder against the sky.\\\",\\n  \\\"A joy that's shared is a joy made double.\\\",\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".fancy {\\n  font-family: 'Georgia';\\n}\\n.title {\\n  color: #007AA3;\\n  text-decoration: underline;\\n}\\n.cursive {\\n  font-style: italic;\\n}\\n.small {\\n  font-size: 10px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"86\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个示例应用程序的模块依赖树中，\",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator.js\"}],\" 中的 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符标记了该模块及其所有传递依赖为客户端模块。从 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator.js\"}],\" 开始的子树现在被标记为客户端模块。\"]}],\"\\n\",[\"$r\",\"Diagram\",null,{\"name\":\"use_client_module_dependency\",\"height\":250,\"width\":545,\"alt\":\"一个树形图，顶部节点代表模块 'App.js'。'App.js' 有三个子节点：'Copyright.js'、'FancyText.js' 和 'InspirationGenerator.js'。'InspirationGenerator.js' 有两个子节点：'FancyText.js' 和 'inspirations.js'。'InspirationGenerator.js' 及其下面的节点都具有黄色背景颜色，表示由于 'InspirationGenerator.js' 中的 'use client' 指示符，这个子图是由客户端渲染的。\",\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 划分了 React 服务器组件应用程序的模块依赖树，标记了 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator.js\"}],\" 以及其所有依赖为客户端渲染。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在渲染过程中，框架将在服务端渲染根组件，然后沿着 \",[\"$r\",\"a\",null,{\"href\":\"/learn/understanding-your-ui-as-a-tree#the-render-tree\",\"children\":\"渲染树\"}],\" 进行渲染，在此过程中不评估从客户端标记的代码中导入的任何代码。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然后，渲染树的服务器渲染部分将发送到客户端。客户端在代码下载完毕后，接着完成渲染树的其余部分。\"}],\"\\n\",[\"$r\",\"Diagram\",null,{\"name\":\"use_client_render_tree\",\"height\":250,\"width\":500,\"alt\":\"一个树形图，其中每个节点代表一个组件及其子组件作为子组件。顶级节点标记为 'App'，它有两个子组件 'InspirationGenerator' 和 'FancyText'。'InspirationGenerator' 有两个子组件，'FancyText' 和 'Copyright'。'InspirationGenerator' 和其子组件 'FancyText' 都标记为客户端渲染。\",\"children\":[\"$r\",\"p\",null,{\"children\":[\"React服务器组件应用程序的渲染树。\",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 和其子组件 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 都是从客户端标记的代码中导出的组件，被视为客户端组件。\"]}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"我们引入以下定义：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"客户端组件\"}],\" 是渲染树中在客户端上渲染的组件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"服务器组件\"}],\" 是渲染树中在服务器上渲染的组件。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过示例应用程序，\",[\"$r\",\"code\",null,{\"children\":\"App\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Copyright\"}],\" 都是服务器渲染的，被视为服务器组件。由于 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator.js\"}],\" 及其传递依赖被标记为客户端代码，组件 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 及其子组件 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 都是客户端组件。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"how-is-fancytext-both-a-server-and-a-client-component\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 是如何实现既是服务器组件也是客户端组件？ \"]}],[\"$r\",\"p\",null,{\"children\":[\"根据上述定义，组件 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 是如何实现既是服务器组件又是客户端组件的呢？\"]}],[\"$r\",\"p\",null,{\"children\":\"首先，术语“组件”并不是非常精确的。以下是“组件”可以被理解的两种方式：\"}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"“组件”可以指的是 \",[\"$r\",\"strong\",null,{\"children\":\"组件定义\"}],\"。在大多数情况下，这将是一个函数。\"]}],\"\\n\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 这是组件的定义\\nfunction MyComponent() {\\n  return <p>My Component</p>\\n}\\n\"}]}],[\"$r\",\"ol\",null,{\"start\":\"2\",\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"“组件”可以指的是定义的 \",[\"$r\",\"strong\",null,{\"children\":\"组件的使用\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import MyComponent from './MyComponent';\\n\\nfunction App() {\\n  // 这是组件的用法\\n  return <MyComponent />;\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":\"通常，在解释概念时，不太精确的性质并不重要，但在这种情况下是重要的。\"}],[\"$r\",\"p\",null,{\"children\":\"当谈论服务器组件或客户端组件时，我们指的是组件的使用。\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果组件在带有 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符的模块中定义，或者组件在客户端组件中导入并调用，那么组件的使用将是客户端组件。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"否则，组件的使用将是服务器组件。\"}],\"\\n\"]}],[\"$r\",\"Diagram\",null,{\"name\":\"use_client_render_tree\",\"height\":150,\"width\":450,\"alt\":\"一个树形图，其中每个节点代表一个组件及其子组件作为子组件。顶级节点标记为 'App'，它有两个子组件 'InspirationGenerator' 和 'FancyText'。'InspirationGenerator' 有两个子组件，'FancyText' 和 'Copyright'。'InspirationGenerator' 和其子组件 'FancyText' 都标记为客户端渲染。\",\"children\":\"渲染树展示了组件的使用。\"}],[\"$r\",\"p\",null,{\"children\":[\"回到关于 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 的问题，我们可以看到组件定义没有包含 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符，并且它有两个使用方式。\"]}],[\"$r\",\"p\",null,{\"children\":[\"将 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 的子组件使用，将该使用标记为服务器组件。当 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 在 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 下导入并调用时，\",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 的这种使用是客户端组件，因为 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 包含 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符。\"]}],[\"$r\",\"p\",null,{\"children\":[\"这意味着 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 的组件定义将在服务器上进行评估，同时也将被客户端下载以渲染其客户端组件的使用。\"]}]]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"why-is-copyright-a-server-component\",\"children\":[\"为什么 \",[\"$r\",\"code\",null,{\"children\":\"Copyright\"}],\" 是服务器组件？ \"]}],[\"$r\",\"p\",null,{\"children\":[\"由于 \",[\"$r\",\"code\",null,{\"children\":\"Copyright\"}],\" 是作为客户端组件 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 的子组件进行渲染，这可能会让人感到惊讶，它却是一个服务器组件。\"]}],[\"$r\",\"p\",null,{\"children\":[\"请回想一下，\",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 定义了在 \",[\"$r\",\"strong\",null,{\"children\":\"模块依赖树\"}],\" 上的服务器和客户端代码的边界，而不是在渲染树上。\"]}],[\"$r\",\"Diagram\",null,{\"name\":\"use_client_module_dependency\",\"height\":200,\"width\":500,\"alt\":\"一个树形图，顶部节点代表模块 'App.js'。'App.js' 有三个子节点：'Copyright.js'、'FancyText.js' 和 'InspirationGenerator.js'。'InspirationGenerator.js' 有两个子节点：'FancyText.js' 和 'inspirations.js'。'InspirationGenerator.js' 及其下面的节点都具有黄色背景颜色，表示由于 'InspirationGenerator.js' 中的 'use client' 指示符，这个子图是客户端渲染的。\",\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 在模块依赖树上定义了服务器和客户端代码之间的边界。\"]}]}],[\"$r\",\"p\",null,{\"children\":[\"在模块依赖树中可以看到 \",[\"$r\",\"code\",null,{\"children\":\"App.js\"}],\" 从 \",[\"$r\",\"code\",null,{\"children\":\"Copyright.js\"}],\" 模块导入并调用 \",[\"$r\",\"code\",null,{\"children\":\"Copyright\"}],\"。由于 \",[\"$r\",\"code\",null,{\"children\":\"Copyright.js\"}],\" 没有包含 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符，该组件的使用在服务器上进行渲染。\",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 作为根组件在服务器上进行渲染。\"]}],[\"$r\",\"p\",null,{\"children\":[\"由于可以将 JSX 作为 props 传递，客户端组件可以渲染服务器组件。在这种情况下，\",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 以 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":\"children\"}],\" 的形式接收 \",[\"$r\",\"code\",null,{\"children\":\"Copyright\"}],\"。然而，\",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 模块从未直接导入 \",[\"$r\",\"code\",null,{\"children\":\"Copyright\"}],\" 模块，也不调用该组件，所有这些都是由 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 完成的。实际上，在 \",[\"$r\",\"code\",null,{\"children\":\"InspirationGenerator\"}],\" 开始渲染之前，\",[\"$r\",\"code\",null,{\"children\":\"Copyright\"}],\" 组件已经完全执行完毕。\"]}],[\"$r\",\"p\",null,{\"children\":\"请牢记，组件之间的父子渲染关系并不保证相同的渲染环境。\"}]]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"when-to-use-use-client\",\"children\":[\"何时使用 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\"？ \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 可以确定哪些组件是客户端组件。由于服务器组件是默认的，以下是关于服务器组件的优势和限制的简要概述，以确定何时需要将某些内容标记为客户端渲染。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为简单起见，我们只谈论了服务器组件，但相同的原则适用于应用程序中所有在服务器上运行的代码。\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"advantages\",\"children\":\"服务器组件的优点 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"服务器组件可以减少客户端发送和运行的代码量。只有客户端模块会被捆绑和由客户端进行评估。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"服务器组件受益于在服务器上运行。它们可以访问本地文件系统，并且可能在数据获取和网络请求方面体验较低的延迟。\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"limitations\",\"children\":\"服务器组件的限制 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"服务器组件不能支持交互，因为事件处理程序必须由客户端注册和触发。\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"例如，像 \",[\"$r\",\"code\",null,{\"children\":\"onClick\"}],\" 这样的事件处理程序只能在客户端组件中定义。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"服务器组件不能使用大多数 Hooks。\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"当服务器组件被渲染时，它们的输出基本上是客户端渲染的一系列组件。服务器组件在渲染后不会在内存中保留，并且不能拥有自己的状态。\"}],\"\\n\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"serializable-types\",\"children\":\"服务器组件返回的可序列化类型 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"与任何 React 应用程序一样，父组件会向子组件传递数据。由于它们在不同的环境中渲染，因此需要额外考虑将数据从服务器组件传递到客户端组件。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"从服务器组件传递给客户端组件的属性值必须是可序列化的。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"可序列化属性包括：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"原始类型\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/String\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"string\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/Number\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"number\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"bigint\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/Boolean\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"boolean\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/Undefined\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"undefined\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/Null\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"null\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"symbol\"}],\"，仅包含在全局符号注册表中使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Symbol.for\"}]}],\" 注册的符号。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"包含可序列化值的迭代类型\",\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"String\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Array\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Map\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Set\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"TypedArray\"}],\" 与 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"ArrayBuffer\"}]]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Date\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"普通 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"对象\"}],\"：使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"对象初始化器\"}],\" 创建的、具有可序列化属性\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/use-server\",\"children\":\"Server Action\"}],\" 中的函数\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"客户端或服务器组件元素（JSX）\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Promise\"}]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"值得注意的是，以下内容不受支持：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"未从客户端标记的模块中导出或未标记为 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/use-server\",\"children\":[\"$r\",\"code\",null,{\"children\":\"'use server'\"}]}],\" 的 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"函数\"}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Classes_in_JavaScript\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"类\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"任何类的实例对象（除了提到的内置类）或 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object#null-prototype_objects\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"使用 null 作为原型\"}],\" 的对象\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"未全局注册的符号，例如 \",[\"$r\",\"code\",null,{\"children\":\"Symbol('my new symbol')\"}]]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"building-with-interactivity-and-state\",\"children\":\"构建交互性与状态 \"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"'use client';\\n\\nimport { useState } from 'react';\\n\\nexport default function Counter({initialValue = 0}) {\\n  const [countValue, setCountValue] = useState(initialValue);\\n  const increment = () => setCountValue(countValue + 1);\\n  const decrement = () => setCountValue(countValue - 1);\\n  return (\\n    <>\\n      <h2>Count Value: {countValue}</h2>\\n      <button onClick={increment}>+1</button>\\n      <button onClick={decrement}>-1</button>\\n    </>\\n  );\\n}\\n\"}]}]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"由于 \",[\"$r\",\"code\",null,{\"children\":\"Counter\"}],\" 需要使用 \",[\"$r\",\"code\",null,{\"children\":\"useState\"}],\" Hook 和事件处理程序来增加或减少值，因此该组件必须是客户端组件，并且需要在顶部添加 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"相比之下，一个渲染 UI 而没有交互的组件不需要成为客户端组件。\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { readFile } from 'node:fs/promises';\\nimport Counter from './Counter';\\n\\nexport default async function CounterContainer() {\\n  const initialValue = await readFile('/path/to/counter_value');\\n  return <Counter initialValue={initialValue} />\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，\",[\"$r\",\"code\",null,{\"children\":\"Counter\"}],\" 的父组件 \",[\"$r\",\"code\",null,{\"children\":\"CounterContainer\"}],\" 不需要 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\"，因为它没有交互并且不使用状态。此外，\",[\"$r\",\"code\",null,{\"children\":\"CounterContainer\"}],\" 必须是服务器组件，因为它在服务器上从本地文件系统读取数据，这仅在服务器组件中可行。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"还有一些组件不使用任何特定于服务器或客户端的功能，可以在渲染位置上保持中立。在之前的示例中，\",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 就是这样一个组件。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export default function FancyText({title, text}) {\\n  return title\\n    ? <h1 className='fancy title'>{text}</h1>\\n    : <h3 className='fancy cursive'>{text}</h3>\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这种不添加 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 指示符的情况下，当从服务器组件引用时，\",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 的输出（而不是其源代码）将被发送到浏览器。正如之前在 Inspirations 应用程序示例中所演示的那样，\",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 既可以作为服务器组件也可以作为客户端组件使用，这取决于它被导入和使用的位置。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但如果 \",[\"$r\",\"code\",null,{\"children\":\"FancyText\"}],\" 的 HTML 输出相对于其源代码（包括依赖项）较大，那么强制将其始终作为客户端组件可能更高效。返回较长 SVG 路径字符串的组件就是可能更高效地强制组件成为客户端组件的一种情况。\"]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"using-client-apis\",\"children\":\"使用客户端 API \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 应用程序可能使用特定于客户端的 API，例如浏览器的 web 存储 API、音频和视频处理 API 以及有关设备硬件 API 等 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/API\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"其他 API\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个示例中，该组件使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Glossary/DOM\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"DOM API\"}],\" 来操作 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"canvas\"}]}],\" 元素。由于这些 API 仅在浏览器中可用，因此必须将其标记为客户端组件。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"'use client';\\n\\nimport {useRef, useEffect} from 'react';\\n\\nexport default function Circle() {\\n  const ref = useRef(null);\\n  useLayoutEffect(() => {\\n    const canvas = ref.current;\\n    const context = canvas.getContext('2d');\\n    context.reset();\\n    context.beginPath();\\n    context.arc(100, 75, 50, 0, 2 * Math.PI);\\n    context.stroke();\\n  });\\n  return <canvas ref={ref} />;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"using-third-party-libraries\",\"children\":\"使用第三方库 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在 React 应用程序中，通常会利用第三方库来处理常见的 UI 模式或逻辑。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这些库可能依赖于组件 Hook 或客户端 API。使用以下 React API 中的任何一个的第三方组件必须在客户端上运行：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference/react/createContext\",\"children\":\"createContext\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/hooks\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/hooks\",\"children\":[\"$r\",\"code\",null,{\"children\":\"react-dom\"}]}],\" Hook，但不包括 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/use\",\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useId\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useId\"}]}]]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference/react/forwardRef\",\"children\":\"forwardRef\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":\"memo\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":\"startTransition\"}]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":\"如果这些库使用了客户端 API，例如向 DOM 插入元素或查看本机平台视图\"}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果这些库已经更新为与 React 服务器组件兼容，那么它们将已经包含自己的 \",[\"$r\",\"code\",null,{\"children\":\"'use client'\"}],\" 标记，从而使开发者可以直接在服务器组件中使用它们。如果某个库尚未更新，或者某个组件需要像事件处理程序这样只能在客户端上指定的 props，那么可能需要在第三方客户端组件和希望使用它的服务器组件之间添加自己的客户端组件文件。\"]}]]}]]","meta":{"title":"'use client'","titleForTitleTag":"'use client' 指示符","canary":true}},"__N_SSG":true}