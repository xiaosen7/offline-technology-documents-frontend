{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#strictmode\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#enabling-strict-mode-for-entire-app\",\"depth\":3,\"text\":\"为整个应用启用严格模式 \"},{\"url\":\"#enabling-strict-mode-for-a-part-of-the-app\",\"depth\":3,\"text\":\"为应用程序的一部分启用严格模式 \"},{\"url\":\"#fixing-bugs-found-by-double-rendering-in-development\",\"depth\":3,\"text\":\"修复在开发过程中通过双重渲染发现的错误 \"},{\"url\":\"#fixing-bugs-found-by-re-running-effects-in-development\",\"depth\":3,\"text\":\"修复在开发中通过重新运行 Effect 发现的错误 \"},{\"url\":\"#fixing-deprecation-warnings-enabled-by-strict-mode\",\"depth\":3,\"text\":\"修复严格模式发出的弃用警告 \"}]","content":"[[\"$r\",\"MaxWidth\",\"72\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 帮助你在开发过程中尽早地发现组件中的常见错误。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<StrictMode>\\n  <App />\\n</StrictMode>\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"strictmode\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"StrictMode\"}],\" 来启用组件树内部的额外开发行为和警告：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"以下是更多的示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"严格模式启用了以下仅在开发环境下有效的行为：\"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"组件将 \",[\"$r\",\"a\",null,{\"href\":\"#fixing-bugs-found-by-double-rendering-in-development\",\"children\":\"重新渲染一次\"}],\"，以查找由于非纯渲染而引起的错误。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"组件将 \",[\"$r\",\"a\",null,{\"href\":\"#fixing-bugs-found-by-re-running-effects-in-development\",\"children\":\"重新运行 Effect 一次\"}],\"，以查找由于缺少 Effect 清理而引起的错误。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"组件将被 \",[\"$r\",\"a\",null,{\"href\":\"#fixing-deprecation-warnings-enabled-by-strict-mode\",\"children\":\"检查是否使用了已弃用的 API\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"props\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"StrictMode\"}],\" 不接受任何参数。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意事项 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在由 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 包裹的树中，无法选择退出严格模式。这可以确保在 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 内的所有组件都经过检查。如果两个团队在一个产品上工作，并且对于这些检查是否有价值存在分歧，他们需要达成共识或将 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 下移到树的较低层级。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"enabling-strict-mode-for-entire-app\",\"children\":\"为整个应用启用严格模式 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"严格模式为 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 组件内的整个组件树启用额外的开发环境检查，这些检查有助于在开发过程中尽早地发现组件中的常见错误。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果要为整个应用启用严格模式，请在渲染根组件时使用 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 包裹它：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6,8}\",\"children\":\"import { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"我们建议将整个应用程序包裹在严格模式中，特别是对于新创建的应用程序。如果你使用的是一个调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/client/createRoot\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createRoot\"}]}],\" 的框架，请查阅其文档以了解如何启用严格模式。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"尽管严格模式的检查 \",[\"$r\",\"strong\",null,{\"children\":\"仅在开发环境\"}],\" 下运行，但它们有助于找出已经存在于代码中但在生产环境中可能难以复现的错误。严格模式让你在用户反馈之前就可以修复这些错误。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":\"严格模式启用了以下仅在开发环境下有效的行为：\"}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"组件将 \",[\"$r\",\"a\",null,{\"href\":\"#fixing-bugs-found-by-double-rendering-in-development\",\"children\":\"重新渲染一次\"}],\"，以查找由于非纯渲染而引起的错误。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"组件将 \",[\"$r\",\"a\",null,{\"href\":\"#fixing-bugs-found-by-re-running-effects-in-development\",\"children\":\"重新运行 Effect 一次\"}],\"，以查找由于缺少 Effect 清理而引起的错误。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"组件将被 \",[\"$r\",\"a\",null,{\"href\":\"#fixing-deprecation-warnings-enabled-by-strict-mode\",\"children\":\"检查是否使用了已弃用的 API\"}],\"。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"$r\",\"strong\",null,{\"children\":\"所有这些检查仅在开发环境中进行，不会影响生产构建。\"}]}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"enabling-strict-mode-for-a-part-of-the-app\",\"children\":\"为应用程序的一部分启用严格模式 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你也可以为应用程序的任意一部分启用严格模式：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{7,12}\",\"children\":\"import { StrictMode } from 'react';\\n\\nfunction App() {\\n  return (\\n    <>\\n      <Header />\\n      <StrictMode>\\n        <main>\\n          <Sidebar />\\n          <Content />\\n        </main>\\n      </StrictMode>\\n      <Footer />\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，严格模式的检查不会对 \",[\"$r\",\"code\",null,{\"children\":\"Header\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Footer\"}],\" 组件运行。然而，它们会在 \",[\"$r\",\"code\",null,{\"children\":\"Sidebar\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Content\"}],\" 以及它们内部的所有组件上运行，无论多深。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"fixing-bugs-found-by-double-rendering-in-development\",\"children\":\"修复在开发过程中通过双重渲染发现的错误 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"React 假设编写的每个组件都是纯函数\"}],\"。这意味着编写的 React 组件在给定相同的输入（props、state 和 context）时必须始终返回相同的 JSX。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"违反此规则的组件会表现得不可预测，并引发错误。为了帮助你找到意外的非纯函数代码，严格模式 \",[\"$r\",\"strong\",null,{\"children\":\"在开发环境中会调用一些函数两次\"}],\"（仅限应为纯函数的函数）。这些函数包括：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"组件函数体（仅限顶层逻辑，不包括事件处理程序内的代码）\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"传递给 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useState\"}]}],\"、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#setstate\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"set\"}],\" 函数\"]}],\"、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useMemo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useMemo\"}]}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useReducer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useReducer\"}]}],\" 的函数。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"部分类组件的方法，例如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#constructor\",\"children\":[\"$r\",\"code\",null,{\"children\":\"constructor\"}]}],\"、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#render\",\"children\":[\"$r\",\"code\",null,{\"children\":\"render\"}]}],\"、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#shouldcomponentupdate\",\"children\":[\"$r\",\"code\",null,{\"children\":\"shouldComponentUpdate\"}]}],\" 等（\",[\"$r\",\"a\",null,{\"href\":\"https://reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"请参阅完整列表\"}],\"）。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果一个函数是纯函数，运行两次不会改变其行为，因为纯函数每次都会产生相同的结果。然而，如果一个函数是非纯函数（例如，它会修改接收到的数据），运行两次通常会产生明显的差异（这就是它是非纯函数的原因！）。这有助于及早发现并修复错误。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"下面是一个示例，用来说明严格模式中的双重渲染如何帮助你早期发现错误\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"下面的 \",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 组件接收一个 \",[\"$r\",\"code\",null,{\"children\":\"stories\"}],\" 数组，并在末尾添加一个额外的“创建故事”节点：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport StoryTray from './StoryTray.js';\\n\\nlet initialStories = [\\n  {id: 0, label: \\\"安琪的故事\\\" },\\n  {id: 1, label: \\\"泰勒的故事\\\" },\\n];\\n\\nexport default function App() {\\n  let [stories, setStories] = useState(initialStories)\\n  return (\\n    <div\\n      style={{\\n        width: '100%',\\n        height: '100%',\\n        textAlign: 'center',\\n      }}\\n    >\\n      <StoryTray stories={stories} />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/StoryTray.js active\",\"children\":\"export default function StoryTray({ stories }) {\\n  const items = stories;\\n  items.push({ id: 'create', label: '创建故事' });\\n  return (\\n    <ul>\\n      {items.map(story => (\\n        <li key={story.id}>\\n          {story.label}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"ul {\\n  margin: 0;\\n  list-style-type: none;\\n  height: 100%;\\n}\\n\\nli {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  float: left;\\n  margin: 5px;\\n  margin-bottom: 20px;\\n  padding: 5px;\\n  width: 70px;\\n  height: 100px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"78\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"上面的代码中有一个错误，但很容易被忽视，因为初始输出看起来是正确的。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果 \",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 组件重新渲染多次，这个错误将变得更加明显。例如，当鼠标悬停在 \",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 组件上时，以不同的背景颜色重新渲染它：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport StoryTray from './StoryTray.js';\\n\\nlet initialStories = [\\n  {id: 0, label: \\\"安琪的故事\\\" },\\n  {id: 1, label: \\\"泰勒的故事\\\" },\\n];\\n\\nexport default function App() {\\n  let [stories, setStories] = useState(initialStories)\\n  return (\\n    <div\\n      style={{\\n        width: '100%',\\n        height: '100%',\\n        textAlign: 'center',\\n      }}\\n    >\\n      <StoryTray stories={stories} />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/StoryTray.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function StoryTray({ stories }) {\\n  const [isHover, setIsHover] = useState(false);\\n  const items = stories;\\n  items.push({ id: 'create', label: '创建故事' });\\n  return (\\n    <ul\\n      onPointerEnter={() => setIsHover(true)}\\n      onPointerLeave={() => setIsHover(false)}\\n      style={{\\n        backgroundColor: isHover ? '#ddd' : '#fff'\\n      }}\\n    >\\n      {items.map(story => (\\n        <li key={story.id}>\\n          {story.label}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"ul {\\n  margin: 0;\\n  list-style-type: none;\\n  height: 100%;\\n}\\n\\nli {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  float: left;\\n  margin: 5px;\\n  margin-bottom: 20px;\\n  padding: 5px;\\n  width: 70px;\\n  height: 100px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"90\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意，每次在 \",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 组件上悬停时，“创建故事”都会再次添加到列表中。代码的本意是将它添加到列表的末尾一次。但是，\",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 直接修改了传入的 \",[\"$r\",\"code\",null,{\"children\":\"stories\"}],\" 数组。每次 \",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 重新渲染时，它会再次将“创建故事”添加到相同的数组末尾。换句话说，\",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 不是一个纯函数——多次运行它会产生不同的结果。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为了解决这个问题，你可以创建数组的副本并修改该副本，而不是修改原始数组：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"export default function StoryTray({ stories }) {\\n  const items = stories.slice(); // 复制数组\\n  // ✅ 正确的：在新数组上进行修改\\n  items.push({ id: 'create', label: 'Create Story' });\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这样做会 \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":[\"使 \",[\"$r\",\"code\",null,{\"children\":\"StoryTray\"}],\" 函数成为纯函数\"]}],\"。每次调用函数时，它只会修改一个新的数组副本，不会影响任何外部对象或变量。这解决了错误，但在发现其行为有问题之前，你可能需要更频繁地使组件重新渲染。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"在原始的例子中，这个错误并不明显。现在让我们将原始有错误的代码包裹在 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 中\"]}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport StoryTray from './StoryTray.js';\\n\\nlet initialStories = [\\n  {id: 0, label: \\\"安琪的故事\\\" },\\n  {id: 1, label: \\\"泰勒的故事\\\" },\\n];\\n\\nexport default function App() {\\n  let [stories, setStories] = useState(initialStories)\\n  return (\\n    <div\\n      style={{\\n        width: '100%',\\n        height: '100%',\\n        textAlign: 'center',\\n      }}\\n    >\\n      <StoryTray stories={stories} />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/StoryTray.js active\",\"children\":\"export default function StoryTray({ stories }) {\\n  const items = stories;\\n  items.push({ id: 'create', label: '创建故事' });\\n  return (\\n    <ul>\\n      {items.map(story => (\\n        <li key={story.id}>\\n          {story.label}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"ul {\\n  margin: 0;\\n  list-style-type: none;\\n  height: 100%;\\n}\\n\\nli {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  float: left;\\n  margin: 5px;\\n  margin-bottom: 20px;\\n  padding: 5px;\\n  width: 70px;\\n  height: 100px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"94\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"严格模式始终会调用渲染函数两次\"}],\"，这样可以帮助立即发现错误（“创建故事”出现两次）。这让开发者能够在早期阶段注意到此类错误。当修复组件以在严格模式下进行渲染时，也会修复许多可能的未来生产错误，例如之前的悬停功能：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById('root'));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport StoryTray from './StoryTray.js';\\n\\nlet initialStories = [\\n  {id: 0, label: \\\"安琪的故事\\\" },\\n  {id: 1, label: \\\"泰勒的故事\\\" },\\n];\\n\\nexport default function App() {\\n  let [stories, setStories] = useState(initialStories)\\n  return (\\n    <div\\n      style={{\\n        width: '100%',\\n        height: '100%',\\n        textAlign: 'center',\\n      }}\\n    >\\n      <StoryTray stories={stories} />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/StoryTray.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function StoryTray({ stories }) {\\n  const [isHover, setIsHover] = useState(false);\\n  const items = stories.slice(); // 复制数组\\n  items.push({ id: 'create', label: '创建故事' });\\n  return (\\n    <ul\\n      onPointerEnter={() => setIsHover(true)}\\n      onPointerLeave={() => setIsHover(false)}\\n      style={{\\n        backgroundColor: isHover ? '#ddd' : '#fff'\\n      }}\\n    >\\n      {items.map(story => (\\n        <li key={story.id}>\\n          {story.label}\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"ul {\\n  margin: 0;\\n  list-style-type: none;\\n  height: 100%;\\n}\\n\\nli {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  float: left;\\n  margin: 5px;\\n  margin-bottom: 20px;\\n  padding: 5px;\\n  width: 70px;\\n  height: 100px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"在没有严格模式的情况下，在你添加了更多的重新渲染前很容易忽视这个错误。而严格模式立即显示了相同的错误。严格模式可以帮助你在将错误推送给团队和用户之前发现它们。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"更多请阅读《保持组件纯粹》\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"如果你已经安装了 \",[\"$r\",\"a\",null,{\"href\":\"/learn/react-developer-tools\",\"children\":\"React DevTools\"}],\"，在第二次渲染期间进行的任何 \",[\"$r\",\"code\",null,{\"children\":\"console.log\"}],\" 调用将会显示为稍微变暗的颜色。React DevTools 还提供了一个设置（默认情况下关闭），可以完全禁止显示这些日志。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"fixing-bugs-found-by-re-running-effects-in-development\",\"children\":\"修复在开发中通过重新运行 Effect 发现的错误 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"严格模式也可以帮助发现 \",[\"$r\",\"a\",null,{\"href\":\"/learn/synchronizing-with-effects\",\"children\":\"Effect\"}],\" 中的错误。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"每个 Effect 都有一些 setup 和可能的 cleanup 函数。通常情况下，当组件挂载时，React 会调用 setup 代码；当组件卸载时，React 会调用 cleanup 代码。如果依赖关系在上一次渲染之后发生了变化，React 将再次调用 setup 代码和 cleanup 代码。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当开启严格模式时，React 还会在开发模式下为每个 Effect \",[\"$r\",\"strong\",null,{\"children\":\"额外运行一次 setup 和 cleanup 函数\"}],\"。这可能会让人感到惊讶，但它有助于发现手动难以捕捉到的细微错误。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"下面是一个例子，用来说明在严格模式下重新运行 Effects 如何帮助您早期发现错误\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"参考以下将组件连接到聊天功能的示例：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { createConnection } from './chat.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\nconst roomId = '所有';\\n\\nexport default function ChatRoom() {\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n  }, []);\\n  return <h1>欢迎来到 {roomId} 聊天室！</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"let connections = 0;\\n\\nexport function createConnection(serverUrl, roomId) {\\n  // 实际的实现将会连接到服务器\\n  return {\\n    connect() {\\n      console.log('✅ 连接到 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl + '...');\\n      connections++;\\n      console.log('活跃连接数: ' + connections);\\n    },\\n    disconnect() {\\n      console.log('❌ 断开 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl);\\n      connections--;\\n      console.log('活跃连接数: ' + connections);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\nbutton { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"122\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这段代码存在一个问题，但可能并不明显。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了更直观地展示这个问题，让我们实现一个功能。在下面的示例中，\",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\" 不是硬编码的，而是用户可以从下拉菜单中选择要连接的 \",[\"$r\",\"code\",null,{\"children\":\"roomId\"}],\"。点击“打开聊天”，然后依次选择不同的聊天室。在控制台中跟踪活跃连接的数量：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(<App />);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { createConnection } from './chat.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId }) {\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n  }, [roomId]);\\n\\n  return <h1>欢迎来到 {roomId} 聊天室！</h1>;\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('所有');\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        选择聊天室：{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"所有\\\">所有</option>\\n          <option value=\\\"旅游\\\">旅游</option>\\n          <option value=\\\"音乐\\\">音乐</option>\\n        </select>\\n      </label>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? '关闭聊天' : '打开聊天'}\\n      </button>\\n      {show && <hr />}\\n      {show && <ChatRoom roomId={roomId} />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"let connections = 0;\\n\\nexport function createConnection(serverUrl, roomId) {\\n  // 实际的实现将会连接到服务器\\n  return {\\n    connect() {\\n      console.log('✅ 连接到 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl + '...');\\n      connections++;\\n      console.log('活跃连接数: ' + connections);\\n    },\\n    disconnect() {\\n      console.log('❌ 断开 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl);\\n      connections--;\\n      console.log('活跃连接数: ' + connections);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\nbutton { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"132\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你会注意到打开的连接数量一直在增加。在真实的应用程序中，这会导致性能和网络问题。问题出在 \",[\"$r\",\"a\",null,{\"href\":\"/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed\",\"children\":\"你的 Effect 缺少 cleanup 函数\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"现在你的 Effect 在自身执行清理并销毁过时的连接后，问题被解决了。但是请注意，在添加了更多功能（下拉框）之前，这个问题很难被发现。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"在原始的例子中，这个错误并不明显。现在让我们将原始有错误的代码包裹在 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 中\"]}],\"：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { createConnection } from './chat.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\nconst roomId = '所有';\\n\\nexport default function ChatRoom() {\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n  }, []);\\n  return <h1>欢迎来到 {roomId} 聊天室！</h1>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"let connections = 0;\\n\\nexport function createConnection(serverUrl, roomId) {\\n  // 实际的实现将会连接到服务器\\n  return {\\n    connect() {\\n      console.log('✅ 连接到 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl + '...');\\n      connections++;\\n      console.log('活跃连接数: ' + connections);\\n    },\\n    disconnect() {\\n      console.log('❌ 断开 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl);\\n      connections--;\\n      console.log('活跃连接数: ' + connections);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\nbutton { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"138\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"在严格模式下，你立即就能看到存在问题\"}],\"（活跃连接的数量增加到了2个）。严格模式会为每个 Effect 运行额外一次 setup + cleanup。这个 Effect 没有 cleanup 逻辑，所以它创建了一个额外的连接但没有销毁它。这是一个提示，你可能忘记了添加清理函数。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"严格模式让你能够在开发过程的早期就发现这样的错误。当你在严格模式下通过添加清理函数来修复你的 Effect 时，你也同时修复了许多可能在未来的生产环境中出现的错误，比如之前的下拉框问题。\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/index.js\",\"children\":\"import { StrictMode } from 'react';\\nimport { createRoot } from 'react-dom/client';\\nimport './styles.css';\\n\\nimport App from './App';\\n\\nconst root = createRoot(document.getElementById(\\\"root\\\"));\\nroot.render(\\n  <StrictMode>\\n    <App />\\n  </StrictMode>\\n);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState, useEffect } from 'react';\\nimport { createConnection } from './chat.js';\\n\\nconst serverUrl = 'https://localhost:1234';\\n\\nfunction ChatRoom({ roomId }) {\\n  useEffect(() => {\\n    const connection = createConnection(serverUrl, roomId);\\n    connection.connect();\\n    return () => connection.disconnect();\\n  }, [roomId]);\\n\\n  return <h1>欢迎来到 {roomId} 聊天室！</h1>;\\n}\\n\\nexport default function App() {\\n  const [roomId, setRoomId] = useState('所有');\\n  const [show, setShow] = useState(false);\\n  return (\\n    <>\\n      <label>\\n        选择聊天室：{' '}\\n        <select\\n          value={roomId}\\n          onChange={e => setRoomId(e.target.value)}\\n        >\\n          <option value=\\\"所有\\\">所有</option>\\n          <option value=\\\"旅游\\\">旅游</option>\\n          <option value=\\\"音乐\\\">音乐</option>\\n        </select>\\n      </label>\\n      <button onClick={() => setShow(!show)}>\\n        {show ? '关闭聊天' : '打开聊天'}\\n      </button>\\n      {show && <hr />}\\n      {show && <ChatRoom roomId={roomId} />}\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/chat.js\",\"children\":\"let connections = 0;\\n\\nexport function createConnection(serverUrl, roomId) {\\n  // 实际的实现将会连接到服务器\\n  return {\\n    connect() {\\n      console.log('✅ 连接到 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl + '...');\\n      connections++;\\n      console.log('活跃连接数: ' + connections);\\n    },\\n    disconnect() {\\n      console.log('❌ 断开 \\\"' + roomId + '\\\" 聊天室，位于' + serverUrl);\\n      connections--;\\n      console.log('活跃连接数: ' + connections);\\n    }\\n  };\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { display: block; margin-bottom: 20px; }\\nbutton { margin-left: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"请注意，控制台中活跃连接的数量不再持续增加。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在没有严格模式的情况下，很容易忽视你的 Effect 需要进行清理的情况。通过在开发中运行 \",[\"$r\",\"em\",null,{\"children\":\"setup → cleanup → setup\"}],\"，而不是仅运行 \",[\"$r\",\"em\",null,{\"children\":\"setup\"}],\"，严格模式使你更容易发现遗漏的 cleanup 逻辑。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development\",\"children\":\"请阅读更多关于实现 Effect 清理的内容\"}],\"。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"fixing-deprecation-warnings-enabled-by-strict-mode\",\"children\":\"修复严格模式发出的弃用警告 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 会在任何一个位于 \",[\"$r\",\"code\",null,{\"children\":\"<StrictMode>\"}],\" 树中的组件使用以下弃用 API 时发出警告：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/findDOMNode\",\"children\":[\"$r\",\"code\",null,{\"children\":\"findDOMNode\"}]}],\"，\",[\"$r\",\"a\",null,{\"href\":\"https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"请参考替代方案\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"UNSAFE_\"}],\" 类生命周期方法，例如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#unsafe_componentwillmount\",\"children\":[\"$r\",\"code\",null,{\"children\":\"UNSAFE_componentWillMount\"}]}],\"，\",[\"$r\",\"a\",null,{\"href\":\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#migrating-from-legacy-lifecycles\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"请参考替代方案\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"旧版上下文（\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#static-childcontexttypes\",\"children\":[\"$r\",\"code\",null,{\"children\":\"childContextTypes\"}]}],\"、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#static-contexttypes\",\"children\":[\"$r\",\"code\",null,{\"children\":\"contextTypes\"}]}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#getchildcontext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"getChildContext\"}]}],\"），\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createContext\",\"children\":\"请参考替代方案\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"旧版字符串引用（\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#refs\",\"children\":[\"$r\",\"code\",null,{\"children\":\"this.refs\"}]}],\"）,\",[\"$r\",\"a\",null,{\"href\":\"https://reactjs.org/docs/strict-mode.html#warning-about-legacy-string-ref-api-usage\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"请参考替代方案\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这些 API 主要用于旧版的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component\",\"children\":\"类式组件\"}],\"，因此在新版程序中很少出现。\"]}]]}]]","meta":{"title":"<StrictMode>"}},"__N_SSG":true}