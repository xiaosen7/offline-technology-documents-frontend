{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#cloneelement\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, props, ...children)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#overriding-props-of-an-element\",\"depth\":3,\"text\":\"覆盖元素的 props \"},{\"url\":\"#alternatives\",\"depth\":2,\"text\":\"替代方案 \"},{\"url\":\"#passing-data-with-a-render-prop\",\"depth\":3,\"text\":\"通过 props 传递数据 \"},{\"url\":\"#passing-data-through-context\",\"depth\":3,\"text\":\"通过 context 传递数据 \"},{\"url\":\"#extracting-logic-into-a-custom-hook\",\"depth\":3,\"text\":\"将逻辑提取到自定义 Hook 中 \"}]","content":"[[\"$r\",\"MaxWidth\",\"62\",{\"children\":[[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 并不常见，并且可能会导致代码变得脆弱。\",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"查看常见的替代方案\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 允许你使用一个元素作为初始值创建一个新的 React 元素。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const clonedElement = cloneElement(element, props, ...children)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"cloneelement\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, props, ...children)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 方法会基于 \",[\"$r\",\"code\",null,{\"children\":\"element\"}],\" 创建一个新的 React 元素，但新元素具有不同的 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { cloneElement } from 'react';\\n\\n// ...\\nconst clonedElement = cloneElement(\\n  <Row title=\\\"Cabbage\\\">\\n    Hello\\n  </Row>,\\n  { isHighlighted: true },\\n  'Goodbye'\\n);\\n\\nconsole.log(clonedElement); // <Row title=\\\"Cabbage\\\" isHighlighted={true}>Goodbye</Row>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"请参阅下面的更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"element\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"element\"}],\" 参数必须是一个有效的 React 元素。例如，它可以是一个类似 \",[\"$r\",\"code\",null,{\"children\":\"<Something />\"}],\" 这样的 JSX 节点，也可以是 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createElement\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createElement\"}]}],\" 调用的结果，或者也可以是另一个 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 调用的结果。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"props\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 参数必须是一个对象或 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。如果传 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"，克隆后的元素将保留所有原始的 \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\"。否则，对于 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 对象中的每个 prop 属性，返回的元素将“优先”使用 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 中的值而不是 \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\" 中的值。其余的 props 将从原始的 \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\" 中填充。如果你传递 \",[\"$r\",\"code\",null,{\"children\":\"props.key\"}],\" 或者 \",[\"$r\",\"code\",null,{\"children\":\"props.ref\"}],\"，它们将替换原来的。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"...children\"}],\"：零个或多个子节点。它们可以是任何 React 节点，包括 React 元素、字符串、数字、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/createPortal\",\"children\":\"portals\"}],\"、空节点（\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"），和 React 元素数组。如果你不传递任何 \",[\"$r\",\"code\",null,{\"children\":\"...children\"}],\" 参数，则原始的 \",[\"$r\",\"code\",null,{\"children\":\"element.props.children\"}],\" 将被保留。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 返回一个具有一些属性的 React element 对象：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"type\"}],\"：与 \",[\"$r\",\"code\",null,{\"children\":\"element.type\"}],\" 相同。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"props\"}],\"：将 \",[\"$r\",\"code\",null,{\"children\":\"element.props\"}],\" 与你传递的 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 浅合并的结果。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"ref\"}],\"：原始的 \",[\"$r\",\"code\",null,{\"children\":\"element.ref\"}],\"，除非它被 \",[\"$r\",\"code\",null,{\"children\":\"props.ref\"}],\" 覆盖。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"key\"}],\"：原始的 \",[\"$r\",\"code\",null,{\"children\":\"element.key\"}],\"，除非它被 \",[\"$r\",\"code\",null,{\"children\":\"props.key\"}],\" 覆盖。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"通常，你将从组件返回该元素或使其成为另一个元素的子元素。尽管你可以读取元素的属性，但最好在创建每个元素后将其视为不透明的，并且仅渲染它。\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意事项 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"克隆一个元素 \",[\"$r\",\"strong\",null,{\"children\":\"不会修改原始元素\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果已知 children 是静态的，则你应该 \",[\"$r\",\"strong\",null,{\"children\":[\"将它们作为多个参数传递给 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}]]}],\"，例如 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, null, child1, child2, child3)\"}],\"。如果你的 children 是动态的，请将整个数组作为第三个参数传递：\",[\"$r\",\"code\",null,{\"children\":\"cloneElement(element, null, listItems)\"}],\"。这确保了 React 会对任何动态列表 \",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists#keeping-list-items-in-order-with-key\",\"children\":\"警告你缺少“key”\"}],\"，对于静态的列表，这是不必要的，因为它们不会重新排序。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 会使得跟踪数据流向变得更加困难，所以请 \",[\"$r\",\"strong\",null,{\"children\":[\"尝试使用 \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"替代方案\"}]]}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"overriding-props-of-an-element\",\"children\":\"覆盖元素的 props \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要覆盖某些 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"React element\"}],\" 的 props，请将其与 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"要覆盖的 props\"}],\" 一起传递给 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 5, \\\"<Row title=\\\\\\\"Cabbage\\\\\\\" />\\\"], [2, 6, \\\"{ isHighlighted: true }\\\"], [3, 4, \\\"clonedElement\\\"]]\",\"children\":\"import { cloneElement } from 'react';\\n\\n// ...\\nconst clonedElement = cloneElement(\\n  <Row title=\\\"Cabbage\\\" />,\\n  { isHighlighted: true }\\n);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这里，生成的 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"克隆 element\"}],\" 将为 \",[\"$r\",\"code\",null,{\"children\":\"<Row title=\\\"Cabbage\\\" isHighlighted={true} />\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"让我们看一个示例，看看它什么时候有用\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"想象一个 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件将其 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":[\"$r\",\"code\",null,{\"children\":\"children\"}]}],\" 渲染为可选择行的列表，并带有可更改的“下一步”按钮选择了哪一行。\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件需要以不同的方式渲染所选的 \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\"，因此它克隆它收到的每个 \",[\"$r\",\"code\",null,{\"children\":\"<Row>\"}],\" 子级，并添加额外的 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted: true\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted: false\"}],\" 属性：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{6-8}\",\"children\":\"export default function List({ children }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {Children.map(children, (child, index) =>\\n        cloneElement(child, {\\n          isHighlighted: index === selectedIndex \\n        })\\n      )}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 收到的原始 JSX 如下所示：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-4}\",\"children\":\"<List>\\n  <Row title=\\\"Cabbage\\\" />\\n  <Row title=\\\"Garlic\\\" />\\n  <Row title=\\\"Apple\\\" />\\n</List>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过克隆其 children，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 可以将额外的信息传递给内部的每个 \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\"。结果如下：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,8,12}\",\"children\":\"<List>\\n  <Row\\n    title=\\\"Cabbage\\\"\\n    isHighlighted={true} \\n  />\\n  <Row\\n    title=\\\"Garlic\\\"\\n    isHighlighted={false} \\n  />\\n  <Row\\n    title=\\\"Apple\\\"\\n    isHighlighted={false} \\n  />\\n</List>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"注意点击“下一步”如何更新 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 的状态，并高亮显示不同的行：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import List from './List.js';\\nimport Row from './Row.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  return (\\n    <List>\\n      {products.map(product =>\\n        <Row\\n          key={product.id}\\n          title={product.title} \\n        />\\n      )}\\n    </List>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js active\",\"children\":\"import { Children, cloneElement, useState } from 'react';\\n\\nexport default function List({ children }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {Children.map(children, (child, index) =>\\n        cloneElement(child, {\\n          isHighlighted: index === selectedIndex \\n        })\\n      )}\\n      <hr />\\n      <button onClick={() => {\\n        setSelectedIndex(i =>\\n          (i + 1) % Children.count(children)\\n        );\\n      }}>\\n        下一步\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"export default function Row({ title, isHighlighted }) {\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"88\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"总而言之，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 克隆了它接收的 \",[\"$r\",\"code\",null,{\"children\":\"<Row />\"}],\" 元素，并向它们添加额外的 props。\"]}],\"\\n\",[\"$r\",\"Pitfall\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"克隆 children 使得你很难判断数据如何流经你的应用。尝试一种 \",[\"$r\",\"a\",null,{\"href\":\"#alternatives\",\"children\":\"替代方案\"}],\"。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"alternatives\",\"children\":\"替代方案 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-data-with-a-render-prop\",\"children\":\"通过 props 传递数据 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"接受类似 \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" 这样的 \",[\"$r\",\"em\",null,{\"children\":\"render prop\"}],\" 代替 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 的用法。在这里，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 接收 \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" 作为 props。\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 为数组每一项调用 \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\"，并传递 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" 作为参数：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,7}\",\"children\":\"export default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return renderItem(item, isHighlighted);\\n      })}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" 属性称为“渲染属性”，因为它是决定如何渲染某些内容的属性。例如，你可以传递一个 \",[\"$r\",\"code\",null,{\"children\":\"renderItem\"}],\" 实现使用给定的 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" 值呈现 \",[\"$r\",\"code\",null,{\"children\":\"<Row>\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,7}\",\"children\":\"<List\\n  items={products}\\n  renderItem={(product, isHighlighted) =>\\n    <Row\\n      key={product.id}\\n      title={product.title}\\n      isHighlighted={isHighlighted}\\n    />\\n  }\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"最终结果与 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 相同：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4,8,12}\",\"children\":\"<List>\\n  <Row\\n    title=\\\"Cabbage\\\"\\n    isHighlighted={true} \\n  />\\n  <Row\\n    title=\\\"Garlic\\\"\\n    isHighlighted={false} \\n  />\\n  <Row\\n    title=\\\"Apple\\\"\\n    isHighlighted={false} \\n  />\\n</List>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"但是你可以清楚地追踪 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" 的来源。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import List from './List.js';\\nimport Row from './Row.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  return (\\n    <List\\n      items={products}\\n      renderItem={(product, isHighlighted) =>\\n        <Row\\n          key={product.id}\\n          title={product.title}\\n          isHighlighted={isHighlighted}\\n        />\\n      }\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js active\",\"children\":\"import { useState } from 'react';\\n\\nexport default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return renderItem(item, isHighlighted);\\n      })}\\n      <hr />\\n      <button onClick={() => {\\n        setSelectedIndex(i =>\\n          (i + 1) % items.length\\n        );\\n      }}>\\n        下一步\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"export default function Row({ title, isHighlighted }) {\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"116\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这种方案优于 \",[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\"，因为它更加清晰。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"passing-data-through-context\",\"children\":\"通过 context 传递数据 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"cloneElement\"}],\" 的另一种替代方法是 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-data-deeply-with-context\",\"children\":\"通过 context 传递数据\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，你可以调用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/createContext\",\"children\":[\"$r\",\"code\",null,{\"children\":\"createContext\"}]}],\" 来定义一个 \",[\"$r\",\"code\",null,{\"children\":\"HighlightContext\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"export const HighlightContext = createContext(false);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件可以将其呈现的每个 item 传递到 \",[\"$r\",\"code\",null,{\"children\":\"HighlightContext\"}],\" provider 中：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{8,10}\",\"children\":\"export default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return (\\n          <HighlightContext.Provider key={item.id} value={isHighlighted}>\\n            {renderItem(item)}\\n          </HighlightContext.Provider>\\n        );\\n      })}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"通过这种方法，\",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\" 不需要接收 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\"属性，因为它可以从 context 中读取：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js {2}\",\"children\":\"export default function Row({ title }) {\\n  const isHighlighted = useContext(HighlightContext);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这允许调用组件时无需关心是否将 \",[\"$r\",\"code\",null,{\"children\":\"isHighlighted\"}],\" 传递给了 \",[\"$r\",\"code\",null,{\"children\":\"<Row>\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{4}\",\"children\":\"<List\\n  items={products}\\n  renderItem={product =>\\n    <Row title={product.title} />\\n  }\\n/>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"相反，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Row\"}],\" 通过上下文协调突出显示逻辑。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import List from './List.js';\\nimport Row from './Row.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  return (\\n    <List\\n      items={products}\\n      renderItem={(product) =>\\n        <Row title={product.title} />\\n      }\\n    />\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js active\",\"children\":\"import { useState } from 'react';\\nimport { HighlightContext } from './HighlightContext.js';\\n\\nexport default function List({ items, renderItem }) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n  return (\\n    <div className=\\\"List\\\">\\n      {items.map((item, index) => {\\n        const isHighlighted = index === selectedIndex;\\n        return (\\n          <HighlightContext.Provider\\n            key={item.id}\\n            value={isHighlighted}\\n          >\\n            {renderItem(item)}\\n          </HighlightContext.Provider>\\n        );\\n      })}\\n      <hr />\\n      <button onClick={() => {\\n        setSelectedIndex(i =>\\n          (i + 1) % items.length\\n        );\\n      }}>\\n        下一步\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"import { useContext } from 'react';\\nimport { HighlightContext } from './HighlightContext.js';\\n\\nexport default function Row({ title }) {\\n  const isHighlighted = useContext(HighlightContext);\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/HighlightContext.js\",\"children\":\"import { createContext } from 'react';\\n\\nexport const HighlightContext = createContext(false);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"134\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"/reference/react/useContext#passing-data-deeply-into-the-tree\",\"children\":\"了解有关通过 context 传递数据的更多信息\"}],\"。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"extracting-logic-into-a-custom-hook\",\"children\":\"将逻辑提取到自定义 Hook 中 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以尝试的另一种方法是将“非视觉”部分的逻辑提取到你的自定义 Hook 中，并使用 Hook 的返回值来决定渲染什么。例如，你可以编写一个 \",[\"$r\",\"code\",null,{\"children\":\"useList\"}],\" 自定义 Hook，如下所示：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function useList(items) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n\\n  function onNext() {\\n    setSelectedIndex(i =>\\n      (i + 1) % items.length\\n    );\\n  }\\n\\n  const selected = items[selectedIndex];\\n  return [selected, onNext];\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然后你可以像这样使用它：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,9,13}\",\"children\":\"export default function App() {\\n  const [selected, onNext] = useList(products);\\n  return (\\n    <div className=\\\"List\\\">\\n      {products.map(product =>\\n        <Row\\n          key={product.id}\\n          title={product.title}\\n          isHighlighted={selected === product}\\n        />\\n      )}\\n      <hr />\\n      <button onClick={onNext}>\\n        下一步\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"数据流是显式的，但状态位于 \",[\"$r\",\"code\",null,{\"children\":\"useList\"}],\" 自定义 Hook 内，你可以在任意一个组件内使用它：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import Row from './Row.js';\\nimport useList from './useList.js';\\nimport { products } from './data.js';\\n\\nexport default function App() {\\n  const [selected, onNext] = useList(products);\\n  return (\\n    <div className=\\\"List\\\">\\n      {products.map(product =>\\n        <Row\\n          key={product.id}\\n          title={product.title}\\n          isHighlighted={selected === product}\\n        />\\n      )}\\n      <hr />\\n      <button onClick={onNext}>\\n        下一步\\n      </button>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/useList.js\",\"children\":\"import { useState } from 'react';\\n\\nexport default function useList(items) {\\n  const [selectedIndex, setSelectedIndex] = useState(0);\\n\\n  function onNext() {\\n    setSelectedIndex(i =>\\n      (i + 1) % items.length\\n    );\\n  }\\n\\n  const selected = items[selectedIndex];\\n  return [selected, onNext];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Row.js\",\"children\":\"export default function Row({ title, isHighlighted }) {\\n  return (\\n    <div className={[\\n      'Row',\\n      isHighlighted ? 'RowHighlighted' : ''\\n    ].join(' ')}>\\n      {title}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js\",\"children\":\"export const products = [\\n  { title: 'Cabbage', id: 1 },\\n  { title: 'Garlic', id: 2 },\\n  { title: 'Apple', id: 3 },\\n];\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".List {\\n  display: flex;\\n  flex-direction: column;\\n  border: 2px solid grey;\\n  padding: 5px;\\n}\\n\\n.Row {\\n  border: 2px dashed black;\\n  padding: 5px;\\n  margin: 5px;\\n}\\n\\n.RowHighlighted {\\n  background: #ffa;\\n}\\n\\nbutton {\\n  height: 40px;\\n  font-size: 20px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果你想在不同组件之间复用此逻辑，则这个方案十分有用。\"}]]}]]","meta":{"title":"cloneElement"}},"__N_SSG":true}