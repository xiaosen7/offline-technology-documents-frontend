{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#createelement\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"createElement(type, props, ...children)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#creating-an-element-without-jsx\",\"depth\":2,\"text\":\"不使用 JSX 创建元素 \"}]","content":"[[\"$r\",\"MaxWidth\",\"58\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\" 允许你创建一个 React 元素。它可以作为 \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"JSX\"}],\" 的替代方案。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const element = createElement(type, props, ...children)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"createelement\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"createElement(type, props, ...children)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调用 \",[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\" 来创建一个 React 元素，它有 \",[\"$r\",\"code\",null,{\"children\":\"type\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" 三个参数。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createElement } from 'react';\\n\\nfunction Greeting({ name }) {\\n  return createElement(\\n    'h1',\\n    { className: 'greeting' },\\n    '你好'\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"查看更多例子\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"type\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"type\"}],\" 参数必须是一个有效的 React 组件类型，例如一个字符串标签名（如 \",[\"$r\",\"code\",null,{\"children\":\"'div'\"}],\" 或 \",[\"$r\",\"code\",null,{\"children\":\"'span'\"}],\"），或一个 React 组件（一个函数式组件、一个类式组件，或者是一个特殊的组件如 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Fragment\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Fragment\"}]}],\"）。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"props\"}],\"：\",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 参数必须是一个对象或 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。如果你传入 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"，它会被当作一个空对象。创建的 React 元素的 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 与这个参数相同。注意，\",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 对象中的 \",[\"$r\",\"code\",null,{\"children\":\"ref\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" 比较特殊，它们 \",[\"$r\",\"strong\",null,{\"children\":\"不会\"}],\" 作为 \",[\"$r\",\"code\",null,{\"children\":\"element.props.ref\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"element.props.key\"}],\" 出现在创建的元素 \",[\"$r\",\"code\",null,{\"children\":\"element\"}],\" 上，而是作为 \",[\"$r\",\"code\",null,{\"children\":\"element.ref\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"element.key\"}],\" 出现。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"可选\"}],\" \",[\"$r\",\"code\",null,{\"children\":\"...children\"}],\"：零个或多个子节点。它们可以是任何 React 节点，包括 React 元素、字符串、数字、\",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/createPortal\",\"children\":\"portal\"}],\"、空节点（\",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\"、\",[\"$r\",\"code\",null,{\"children\":\"true\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"false\"}],\"），以及 React 节点数组。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\" 返回一个 React 元素，它有这些属性：\"]}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"type\"}],\"：你传入的 \",[\"$r\",\"code\",null,{\"children\":\"type\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"props\"}],\"：你传入的 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\"，不包括 \",[\"$r\",\"code\",null,{\"children\":\"ref\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\"。如果 \",[\"$r\",\"code\",null,{\"children\":\"type\"}],\" 是一个组件，且带有过时的 \",[\"$r\",\"code\",null,{\"children\":\"type.defaultProps\"}],\" 属性，那么 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 中任何缺失或未定义的字段都会采用 \",[\"$r\",\"code\",null,{\"children\":\"type.defaultProps\"}],\" 中的值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"ref\"}],\"：你传入的 \",[\"$r\",\"code\",null,{\"children\":\"ref\"}],\"。如果缺失则为 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"key\"}],\"：你传入的 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\"，会被强制转换为字符串。如果缺失则为 \",[\"$r\",\"code\",null,{\"children\":\"null\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"通常你会在你组件的最后返回这个元素，或者把它作为另一个元素的子元素。虽然你可以读取元素的属性，但你最好把创建的元素作为黑盒，只用于渲染。\"}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意事项 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你必须 \",[\"$r\",\"strong\",null,{\"children\":[\"把 React 元素和它们的 props 视为 \",[\"$r\",\"a\",null,{\"href\":\"https://en.wikipedia.org/wiki/Immutable_object\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"不可变的\"}]]}],\"，在创建后永远不要改变它们的内容。在开发环境中，React 会浅层 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"冻结\"}],\" 返回的元素及其 \",[\"$r\",\"code\",null,{\"children\":\"props\"}],\" 属性，以确保如此。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你使用 JSX 时，\",[\"$r\",\"strong\",null,{\"children\":\"你必须以大写字母开头来渲染你的自定义组件\"}],\"。换句话说，\",[\"$r\",\"code\",null,{\"children\":\"<Something />\"}],\" 等价于 \",[\"$r\",\"code\",null,{\"children\":\"createElement(Something)\"}],\"，但 \",[\"$r\",\"code\",null,{\"children\":\"<something />\"}],\"（小写）等价于 \",[\"$r\",\"code\",null,{\"children\":\"createElement('something')\"}],\"（注意它是一个字符串，它会被当作内置的 HTML 标签）。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你应该仅 \",[\"$r\",\"strong\",null,{\"children\":[\"在所有子元素都是静态可知的情况下，才将它们依次传递给 \",[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\" 的可选参数\"]}],\"，比如 \",[\"$r\",\"code\",null,{\"children\":\"createElement('h1', {}, child1, child2, child3)\"}],\"。如果你的子元素不固定，则把它们放到数组中作为第三个参数传递，例如 \",[\"$r\",\"code\",null,{\"children\":\"createElement('ul', {}, listItems)\"}],\"，以此确保 React 可以在动态列表的场景下 \",[\"$r\",\"a\",null,{\"href\":\"/learn/rendering-lists#keeping-list-items-in-order-with-key\",\"children\":[\"警告你缺少 \",[\"$r\",\"code\",null,{\"children\":\"key\"}]]}],\"。静态列表的场景不需要这么做，因为它们不会重新排序。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"creating-an-element-without-jsx\",\"children\":\"不使用 JSX 创建元素 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你不喜欢 \",[\"$r\",\"a\",null,{\"href\":\"/learn/writing-markup-with-jsx\",\"children\":\"JSX\"}],\" 或者无法在你的项目中使用它，你可以使用 \",[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\" 作为替代方案。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要想不使用 JSX 创建一个元素，你可以调用 \",[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\" 并传入 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"type\"}],\"、\",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"props\"}],\" 和 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"children\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 5, \\\"'h1'\\\"], [2, 6, \\\"{ className: 'greeting' }\\\"], [3, 7, \\\"'你好',\\\"], [3, 8, \\\"createElement('i', null, name),\\\"], [3, 9, \\\"'。欢迎！'\\\"]]\",\"children\":\"import { createElement } from 'react';\\n\\nfunction Greeting({ name }) {\\n  return createElement(\\n    'h1',\\n    { className: 'greeting' },\\n    '你好',\\n    createElement('i', null, name),\\n    '。欢迎！'\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"children\"}],\" 是可选的，你可以传入任意数量的子元素（上面的例子中有三个）。这段代码会显示一个带有问候语的 \",[\"$r\",\"code\",null,{\"children\":\"<h1>\"}],\" 标题。为了对比，这是使用 JSX 的版本：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 3, \\\"h1\\\"], [2, 3, \\\"className=\\\\\\\"greeting\\\\\\\"\\\"], [3, 4, \\\"你好<i>{name}</i>，欢迎！\\\"], [1, 5, \\\"h1\\\"]]\",\"children\":\"function Greeting({ name }) {\\n  return (\\n    <h1 className=\\\"greeting\\\">\\n      你好<i>{name}</i>，欢迎！\\n    </h1>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要想渲染你自己的 React 组件，则传入一个函数（比如 \",[\"$r\",\"code\",null,{\"children\":\"Greeting\"}],\"）作为 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"type\"}],\" ，而不是一个字符串（比如 \",[\"$r\",\"code\",null,{\"children\":\"'h1'\"}],\"）：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 2, \\\"Greeting\\\"], [2, 2, \\\"{ name: '泰勒' }\\\"]]\",\"children\":\"export default function App() {\\n  return createElement(Greeting, { name: '泰勒' });\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果使用 JSX，它看起来像这样：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 2, \\\"Greeting\\\"], [2, 2, \\\"name=\\\\\\\"泰勒\\\\\\\"\\\"]]\",\"children\":\"export default function App() {\\n  return <Greeting name=\\\"泰勒\\\" />;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这里是一个完整的使用 \",[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\" 的示例：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { createElement } from 'react';\\n\\nfunction Greeting({ name }) {\\n  return createElement(\\n    'h1',\\n    { className: 'greeting' },\\n    '你好',\\n    createElement('i', null, name),\\n    '，欢迎！'\\n  );\\n}\\n\\nexport default function App() {\\n  return createElement(\\n    Greeting,\\n    { name: '泰勒' }\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".greeting {\\n  color: darkgreen;\\n  font-family: Georgia;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"62\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这里是相同的示例，但使用的是 JSX：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"function Greeting({ name }) {\\n  return (\\n    <h1 className=\\\"greeting\\\">\\n      你好<i>{name}</i>，欢迎！\\n    </h1>\\n  );\\n}\\n\\nexport default function App() {\\n  return <Greeting name=\\\"泰勒\\\" />;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".greeting {\\n  color: darkgreen;\\n  font-family: Georgia;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"两种编码风格都没问题，你可以在项目中使用任何一个你喜欢的风格。相比于 \",[\"$r\",\"code\",null,{\"children\":\"createElement\"}],\"，使用 JSX 的主要好处是很容易看出哪个闭合标签对应哪个开放标签。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"what-is-a-react-element-exactly\",\"children\":\"React 元素究竟是什么？ \"}],[\"$r\",\"p\",null,{\"children\":[\"元素是用来描述一部分用户界面的轻量级结构。比如，\",[\"$r\",\"code\",null,{\"children\":\"<Greeting name=\\\"泰勒\\\" />\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"createElement(Greeting, { name: '泰勒' })\"}],\" 都会生成一个这样的对象：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"// 极度简化的样子\\n{\\n  type: Greeting,\\n  props: {\\n    name: '泰勒'\\n  },\\n  key: null,\\n  ref: null,\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"注意，创建这个对象并不会渲染 \",[\"$r\",\"code\",null,{\"children\":\"Greeting\"}],\" 组件或者创建任何 DOM 元素\"]}],\"。\"]}],[\"$r\",\"p\",null,{\"children\":[\"React 元素更像是一个描述或指令，它告诉 React 之后该如何渲染 \",[\"$r\",\"code\",null,{\"children\":\"Greeting\"}],\" 组件。你从 \",[\"$r\",\"code\",null,{\"children\":\"App\"}],\" 组件中返回了这个对象，就是告诉了 React 接下来该做什么。\"]}],[\"$r\",\"p\",null,{\"children\":\"创建元素非常高效，因此你不需要试图优化或者避免它。\"}]]}]]}]]","meta":{"title":"createElement"}},"__N_SSG":true}