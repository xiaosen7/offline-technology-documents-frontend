{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#use\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useOptimistic(state, updateFn)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#optimistically-updating-with-forms\",\"depth\":3,\"text\":\"乐观地更新表单 \"}]","content":"[[\"$r\",\"MaxWidth\",\"38\",{\"children\":[[\"$r\",\"Canary\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useOptimistic\"}],\" Hook 仅在 Canary 与 experimental 渠道中可用。参阅 \",[\"$r\",\"a\",null,{\"href\":\"/community/versioning-policy#all-release-channels\",\"children\":\"React 发布渠道\"}],\" 以了解更多信息。\"]}]}],\"\\n\",[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useOptimistic\"}],\" 是一个 React Hook，它可以帮助你更乐观地更新用户界面。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  const [optimisticState, addOptimistic] = useOptimistic(state, updateFn);\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"use\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useOptimistic(state, updateFn)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useOptimistic\"}],\" 是一个 React Hook，它允许你在进行异步操作时显示不同 state。它接受 state 作为参数，并返回该 state 的副本，在异步操作（如网络请求）期间可以不同。你需要提供一个函数，该函数接受当前 state 和操作的输入，并返回在操作挂起期间要使用的乐观状态。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这个状态被称为“乐观”状态是因为通常用于立即向用户呈现执行操作的结果，即使实际上操作需要一些时间来完成。\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useOptimistic } from 'react';\\n\\nfunction AppContainer() {\\n  const [optimisticState, addOptimistic] = useOptimistic(\\n    state,\\n    // 更新函数\\n    (currentState, optimisticValue) => {\\n      // 使用乐观值\\n      // 合并并返回新 state\\n    }\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参阅下方更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"state\"}],\"：初始时和没有挂起操作时要返回的值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"updateFn(currentState, optimisticValue)\"}],\"：一个函数，接受当前 state 和传递给 \",[\"$r\",\"code\",null,{\"children\":\"addOptimistic\"}],\" 的乐观值，并返回结果乐观状态。它必须是一个纯函数。\",[\"$r\",\"code\",null,{\"children\":\"updateFn\"}],\" 接受两个参数：\",[\"$r\",\"code\",null,{\"children\":\"currentState\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"optimisticValue\"}],\"。返回值将是 \",[\"$r\",\"code\",null,{\"children\":\"currentState\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"optimisticValue\"}],\" 的合并值。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"optimisticState\"}],\"：结果乐观状态。除非有操作挂起，否则它等于 \",[\"$r\",\"code\",null,{\"children\":\"state\"}],\"，在这种情况下，它等于 \",[\"$r\",\"code\",null,{\"children\":\"updateFn\"}],\" 返回的值。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"addOptimistic\"}],\"：触发乐观更新时调用的 dispatch 函数。它接受一个可以是任何类型的参数 \",[\"$r\",\"code\",null,{\"children\":\"optimisticValue\"}],\"，并以 \",[\"$r\",\"code\",null,{\"children\":\"state\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"optimisticValue\"}],\" 作为参数来调用 \",[\"$r\",\"code\",null,{\"children\":\"updateFn\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"optimistically-updating-with-forms\",\"children\":\"乐观地更新表单 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useOptimistic\"}],\" Hook 提供了一种在后台操作（如网络请求）完成之前乐观地更新用户界面的方式。在表单的上下文中，这种技术有助于使应用程序在感觉上响应地更加快速。当用户提交表单时，界面立即更新为预期的结果，而不是等待服务器的响应来反映更改。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"例如，当用户在表单中输入消息并点击“发送”按钮时，\",[\"$r\",\"code\",null,{\"children\":\"useOptimistic\"}],\" Hook 允许消息立即出现在列表中，并带有“发送中……”标签，即使消息实际上还没有发送到服务器。这种“乐观”方法给人一种快速和响应灵敏的印象。然后，表单在后台尝试真正发送消息。一旦服务器确认消息已收到，“发送中……”标签就会被移除。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useOptimistic, useState, useRef } from \\\"react\\\";\\nimport { deliverMessage } from \\\"./actions.js\\\";\\n\\nfunction Thread({ messages, sendMessage }) {\\n  const formRef = useRef();\\n  async function formAction(formData) {\\n    addOptimisticMessage(formData.get(\\\"message\\\"));\\n    formRef.current.reset();\\n    await sendMessage(formData);\\n  }\\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\\n    messages,\\n    (state, newMessage) => [\\n      ...state,\\n      {\\n        text: newMessage,\\n        sending: true\\n      }\\n    ]\\n  );\\n\\n  return (\\n    <>\\n      {optimisticMessages.map((message, index) => (\\n        <div key={index}>\\n          {message.text}\\n          {!!message.sending && <small>（发送中……）</small>}\\n        </div>\\n      ))}\\n      <form action={formAction} ref={formRef}>\\n        <input type=\\\"text\\\" name=\\\"message\\\" placeholder=\\\"你好！\\\" />\\n        <button type=\\\"submit\\\">发送</button>\\n      </form>\\n    </>\\n  );\\n}\\n\\nexport default function App() {\\n  const [messages, setMessages] = useState([\\n    { text: \\\"你好，在这儿！\\\", sending: false, key: 1 }\\n  ]);\\n  async function sendMessage(formData) {\\n    const sentMessage = await deliverMessage(formData.get(\\\"message\\\"));\\n    setMessages((messages) => [...messages, { text: sentMessage }]);\\n  }\\n  return <Thread messages={messages} sendMessage={sendMessage} />;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/actions.js\",\"children\":\"export async function deliverMessage(message) {\\n  await new Promise((res) => setTimeout(res, 1000));\\n  return message;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"18.3.0-canary-6db7f4209-20231021\\\",\\n    \\\"react-dom\\\": \\\"18.3.0-canary-6db7f4209-20231021\\\",\\n    \\\"react-scripts\\\": \\\"^5.0.0\\\"\\n  },\\n  \\\"main\\\": \\\"/index.js\\\",\\n  \\\"devDependencies\\\": {}\\n}\\n\"}]}]]}]]","meta":{"title":"useOptimistic","canary":true}},"__N_SSG":true}