{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#suspense\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#displaying-a-fallback-while-content-is-loading\",\"depth\":3,\"text\":\"当内容正在加载时显示后备方案 \"},{\"url\":\"#revealing-content-together-at-once\",\"depth\":3,\"text\":\"同时展示内容 \"},{\"url\":\"#revealing-nested-content-as-it-loads\",\"depth\":3,\"text\":\"逐步加载内容 \"},{\"url\":\"#showing-stale-content-while-fresh-content-is-loading\",\"depth\":3,\"text\":\"在新内容加载时展示过时内容 \"},{\"url\":\"#preventing-already-revealed-content-from-hiding\",\"depth\":3,\"text\":\"阻止隐藏已经显示的内容 \"},{\"url\":\"#indicating-that-a-transition-is-happening\",\"depth\":3,\"text\":\"表明 transition 正在发生 \"},{\"url\":\"#resetting-suspense-boundaries-on-navigation\",\"depth\":3,\"text\":\"在导航时重置 Suspense 边界 \"},{\"url\":\"#providing-a-fallback-for-server-errors-and-client-only-content\",\"depth\":3,\"text\":\"为服务器错误和客户端内容提供后备方案 \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"故障排除 \"},{\"url\":\"#preventing-unwanted-fallbacks\",\"depth\":3,\"text\":\"如何阻止 UI 在更新期间被后备方案替换 \"}]","content":"[[\"$r\",\"MaxWidth\",\"32\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 允许在子组件完成加载前展示后备方案。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<Suspense fallback={<Loading />}>\\n  <SomeComponent />\\n</Suspense>\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"suspense\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" \"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"props\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"children\"}],\"：真正的 UI 渲染内容。如果 \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" 在渲染中被挂起，Suspense 边界将会渲染 \",[\"$r\",\"code\",null,{\"children\":\"fallback\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"fallback\"}],\"：真正的 UI 未渲染完成时代替其渲染的备用 UI，它可以是任何有效的 React 节点。后备方案通常是一个轻量的占位符，例如表示加载中的图标或者骨架屏。当 \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\" 被挂起时，Suspense 将自动切换至渲染 \",[\"$r\",\"code\",null,{\"children\":\"fallback\"}],\"；当数据准备好时，又会自动切换至渲染 \",[\"$r\",\"code\",null,{\"children\":\"children\"}],\"。如果 \",[\"$r\",\"code\",null,{\"children\":\"fallback\"}],\" 在渲染中被挂起，那么将自动激活最近的 Suspense 边界。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":\"在组件首次挂载前，如果组件被挂起，那么 React 将不会保留其任何状态。当组件完成加载后，React 将从头开始重新尝试渲染被挂起的组件树。\"}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果 Suspense 正在展示 React 组件树中的内容，那么当再次被挂起时，除非导致此处更新是由 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"startTransition\"}]}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useDeferredValue\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}]}],\" 引起，否则 Suspense 将展示 \",[\"$r\",\"code\",null,{\"children\":\"fallback\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果 React 需要隐藏被再次挂起的可见内容，它将清理内容树中的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useLayoutEffect\",\"children\":\"layout effect\"}],\"。当内容可以被再次展示时，React 将重新触发 layout effect。这确保了测量 DOM 布局的 effect 不会在内容不可见时运行。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"React 带有内置优化，例如 \",[\"$r\",\"strong\",null,{\"children\":\"流式服务器渲染（Streaming Server Rendering）\"}],\" 和 \",[\"$r\",\"strong\",null,{\"children\":\"Selective Hydration\"}],\"，它们已经与 Suspense 集成。参见 \",[\"$r\",\"a\",null,{\"href\":\"https://github.com/reactwg/react-18/discussions/37\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"架构概述\"}],\" 并观看 \",[\"$r\",\"a\",null,{\"href\":\"https://www.youtube.com/watch?v=pj5N-Khihgc\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"技术讲座\"}],\" 以了解更多。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"displaying-a-fallback-while-content-is-loading\",\"children\":\"当内容正在加载时显示后备方案 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"你可以使用 Suspense 边界包裹你应用的任何部分：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[1, 1, \\\"<Loading />\\\"], [2, 2, \\\"<Albums />\\\"]]\",\"children\":\"<Suspense fallback={<Loading />}>\\n  <Albums />\\n</Suspense>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 将展示 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"后备方案\"}],\" 直到 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\" children \"}],\" 需要的所有代码和数据都加载完成。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在下面的例子中，\",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 组件在获取专辑列表时被 \",[\"$r\",\"strong\",null,{\"children\":\"挂起\"}],\"。在它准备好渲染前，\",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 祖先组件中距离其最近的 Suspense 将展示后备方案 —— 即 \",[\"$r\",\"code\",null,{\"children\":\"Loading\"}],\" 组件。当数据加载完成时，React 会隐藏 \",[\"$r\",\"code\",null,{\"children\":\"Loading\"}],\" 后备方案并渲染带有数据的 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 组件。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\nimport ArtistPage from './ArtistPage.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  if (show) {\\n    return (\\n      <ArtistPage\\n        artist={{\\n          id: 'the-beatles',\\n          name: 'The Beatles',\\n        }}\\n      />\\n    );\\n  } else {\\n    return (\\n      <button onClick={() => setShow(true)}>\\n        Open The Beatles artist page\\n      </button>\\n    );\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ArtistPage.js active\",\"children\":\"import { Suspense } from 'react';\\nimport Albums from './Albums.js';\\n\\nexport default function ArtistPage({ artist }) {\\n  return (\\n    <>\\n      <h1>{artist.name}</h1>\\n      <Suspense fallback={<Loading />}>\\n        <Albums artistId={artist.id} />\\n      </Suspense>\\n    </>\\n  );\\n}\\n\\nfunction Loading() {\\n  return <h2>🌀 Loading...</h2>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Albums.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 在实际的例子中，你可以尝试已经\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Albums({ artistId }) {\\n  const albums = use(fetchData(`/${artistId}/albums`));\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url === '/the-beatles/albums') {\\n    return await getAlbums();\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getAlbums() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 3000);\\n  });\\n\\n  return [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"48\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"只有启用了 Suspense 的数据源才会激活 Suspense 组件\"}],\"，它们包括：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"支持 Suspense 的框架如 \",[\"$r\",\"a\",null,{\"href\":\"https://relay.dev/docs/guided-tour/rendering/loading-states/\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Relay\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"https://nextjs.org/docs/getting-started/react-essentials\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"Next.js\"}],\"。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/lazy\",\"children\":[\"$r\",\"code\",null,{\"children\":\"lazy\"}]}],\" 懒加载组件代码。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/use\",\"children\":[\"$r\",\"code\",null,{\"children\":\"use\"}]}],\" 读取 Promise 的值。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"Suspense \",[\"$r\",\"strong\",null,{\"children\":\"无法\"}],\" 检测在 Effect 或事件处理程序中获取数据的情况。\"]}],[\"$r\",\"p\",null,{\"children\":[\"在上面的 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 组件中，正确的数据加载方法取决于你使用的框架。如果你使用了支持 Suspense 的框架，你会在其数据获取文档中找到详细信息。\"]}],[\"$r\",\"p\",null,{\"children\":\"目前尚不支持在不使用固定框架的情况下进行启用 Suspense 的数据获取。实现支持 Suspense 数据源的要求是不稳定的，也没有文档。React 将在未来的版本中发布官方 API，用于与 Suspense 集成数据源。\"}]]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"revealing-content-together-at-once\",\"children\":\"同时展示内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"默认情况下，Suspense 内部的整棵组件树都被视为一个单独的单元。例如，即使 \",[\"$r\",\"strong\",null,{\"children\":\"只有一个\"}],\" 组件因等待数据而被挂起，Suspense 内部的整棵组件树中的 \",[\"$r\",\"strong\",null,{\"children\":\"所有\"}],\" 的组件都将被替换为加载中指示器：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-5}\",\"children\":\"<Suspense fallback={<Loading />}>\\n  <Biography />\\n  <Panel>\\n    <Albums />\\n  </Panel>\\n</Suspense>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然后，当它们都准备好展示时，它们将一起出现。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在下面的例子中，\",[\"$r\",\"code\",null,{\"children\":\"Biography\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 都会获取一些数据。但是由于它们都处于同一个 Suspense 下，所以这些组件总是一起“浮现”。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\nimport ArtistPage from './ArtistPage.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  if (show) {\\n    return (\\n      <ArtistPage\\n        artist={{\\n          id: 'the-beatles',\\n          name: 'The Beatles',\\n        }}\\n      />\\n    );\\n  } else {\\n    return (\\n      <button onClick={() => setShow(true)}>\\n        Open The Beatles artist page\\n      </button>\\n    );\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ArtistPage.js active\",\"children\":\"import { Suspense } from 'react';\\nimport Albums from './Albums.js';\\nimport Biography from './Biography.js';\\nimport Panel from './Panel.js';\\n\\nexport default function ArtistPage({ artist }) {\\n  return (\\n    <>\\n      <h1>{artist.name}</h1>\\n      <Suspense fallback={<Loading />}>\\n        <Biography artistId={artist.id} />\\n        <Panel>\\n          <Albums artistId={artist.id} />\\n        </Panel>\\n      </Suspense>\\n    </>\\n  );\\n}\\n\\nfunction Loading() {\\n  return <h2>🌀 Loading...</h2>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Panel.js\",\"children\":\"export default function Panel({ children }) {\\n  return (\\n    <section className=\\\"panel\\\">\\n      {children}\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Biography.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Biography({ artistId }) {\\n  const bio = use(fetchData(`/${artistId}/bio`));\\n  return (\\n    <section>\\n      <p className=\\\"bio\\\">{bio}</p>\\n    </section>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Albums.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Albums({ artistId }) {\\n  const albums = use(fetchData(`/${artistId}/albums`));\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url === '/the-beatles/albums') {\\n    return await getAlbums();\\n  } else if (url === '/the-beatles/bio') {\\n    return await getBio();\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getBio() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 1500);\\n  });\\n\\n  return `The Beatles were an English rock band, \\n    formed in Liverpool in 1960, that comprised \\n    John Lennon, Paul McCartney, George Harrison \\n    and Ringo Starr.`;\\n}\\n\\nasync function getAlbums() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 3000);\\n  });\\n\\n  return [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".bio { font-style: italic; }\\n\\n.panel {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"68\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"加载数据的组件不必是 Suspense 边界的直接子组件。例如，你可以将 \",[\"$r\",\"code\",null,{\"children\":\"Biography\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 移动到一个新的 \",[\"$r\",\"code\",null,{\"children\":\"Details\"}],\" 组件中——这不会改变其行为。\",[\"$r\",\"code\",null,{\"children\":\"Biography\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 共享最近的父级 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界，因此它们是同时显示的。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,8-11}\",\"children\":\"<Suspense fallback={<Loading />}>\\n  <Details artistId={artist.id} />\\n</Suspense>\\n\\nfunction Details({ artistId }) {\\n  return (\\n    <>\\n      <Biography artistId={artistId} />\\n      <Panel>\\n        <Albums artistId={artistId} />\\n      </Panel>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"revealing-nested-content-as-it-loads\",\"children\":\"逐步加载内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当一个组件被挂起时，最近的父级 \",[\"$r\",\"code\",null,{\"children\":\"Suspense\"}],\" 组件会展示后备方案。这允许你嵌套多个 \",[\"$r\",\"code\",null,{\"children\":\"Suspense\"}],\" 组件创建一个加载序列。每个 \",[\"$r\",\"code\",null,{\"children\":\"Suspense\"}],\" 边界的后备方案都会在下一级内容可用时填充。例如，你可以给专辑列表设置自己的后备方案\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,7}\",\"children\":\"<Suspense fallback={<BigSpinner />}>\\n  <Biography />\\n  <Suspense fallback={<AlbumsGlimmer />}>\\n    <Panel>\\n      <Albums />\\n    </Panel>\\n  </Suspense>\\n</Suspense>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"调整之后，\",[\"$r\",\"code\",null,{\"children\":\"Biography\"}],\" 不需要“等待” \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 加载完成就可以展示。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"加载序列将会是：\"}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果 \",[\"$r\",\"code\",null,{\"children\":\"Biography\"}],\" 没有加载完成，\",[\"$r\",\"code\",null,{\"children\":\"BigSpinner\"}],\" 会显示在整个内容区域的位置。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"一旦 \",[\"$r\",\"code\",null,{\"children\":\"Biography\"}],\" 加载完成，\",[\"$r\",\"code\",null,{\"children\":\"BigSpinner\"}],\" 会被内容替换。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"如果 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 没有加载完成，\",[\"$r\",\"code\",null,{\"children\":\"AlbumsGlimmer\"}],\" 会显示在 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 和它的父级 \",[\"$r\",\"code\",null,{\"children\":\"Panel\"}],\" 的位置。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"最后，一旦 \",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 加载完成，它会替换 \",[\"$r\",\"code\",null,{\"children\":\"AlbumsGlimmer\"}],\"。\"]}],\"\\n\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js hidden\",\"children\":\"import { useState } from 'react';\\nimport ArtistPage from './ArtistPage.js';\\n\\nexport default function App() {\\n  const [show, setShow] = useState(false);\\n  if (show) {\\n    return (\\n      <ArtistPage\\n        artist={{\\n          id: 'the-beatles',\\n          name: 'The Beatles',\\n        }}\\n      />\\n    );\\n  } else {\\n    return (\\n      <button onClick={() => setShow(true)}>\\n        Open The Beatles artist page\\n      </button>\\n    );\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ArtistPage.js active\",\"children\":\"import { Suspense } from 'react';\\nimport Albums from './Albums.js';\\nimport Biography from './Biography.js';\\nimport Panel from './Panel.js';\\n\\nexport default function ArtistPage({ artist }) {\\n  return (\\n    <>\\n      <h1>{artist.name}</h1>\\n      <Suspense fallback={<BigSpinner />}>\\n        <Biography artistId={artist.id} />\\n        <Suspense fallback={<AlbumsGlimmer />}>\\n          <Panel>\\n            <Albums artistId={artist.id} />\\n          </Panel>\\n        </Suspense>\\n      </Suspense>\\n    </>\\n  );\\n}\\n\\nfunction BigSpinner() {\\n  return <h2>🌀 Loading...</h2>;\\n}\\n\\nfunction AlbumsGlimmer() {\\n  return (\\n    <div className=\\\"glimmer-panel\\\">\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Panel.js\",\"children\":\"export default function Panel({ children }) {\\n  return (\\n    <section className=\\\"panel\\\">\\n      {children}\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Biography.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Biography({ artistId }) {\\n  const bio = use(fetchData(`/${artistId}/bio`));\\n  return (\\n    <section>\\n      <p className=\\\"bio\\\">{bio}</p>\\n    </section>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Albums.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Albums({ artistId }) {\\n  const albums = use(fetchData(`/${artistId}/albums`));\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url === '/the-beatles/albums') {\\n    return await getAlbums();\\n  } else if (url === '/the-beatles/bio') {\\n    return await getBio();\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getBio() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  return `The Beatles were an English rock band, \\n    formed in Liverpool in 1960, that comprised \\n    John Lennon, Paul McCartney, George Harrison \\n    and Ringo Starr.`;\\n}\\n\\nasync function getAlbums() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 3000);\\n  });\\n\\n  return [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\".bio { font-style: italic; }\\n\\n.panel {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-panel {\\n  border: 1px dashed #aaa;\\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-line {\\n  display: block;\\n  width: 60%;\\n  height: 20px;\\n  margin: 10px;\\n  border-radius: 4px;\\n  background: #f0f0f0;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"80\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":\"Suspense 边界允许协调 UI 的哪些部分应该总是一起“浮现”，以及哪些部分应该按照加载状态的序列逐步显示更多内容。你可以在树的任何位置添加、移动或删除 Suspense 边界，而不会影响应用程序的其余的行为。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"不要在每个组件周围都放置 Suspense 边界。为了提供更好的用户体验，Suspense 边界的粒度应该与期望的加载粒度相匹配。如果你与设计师合作，请询问他们应该放置加载状态的位置——他们很可能已经在设计线框图中包含了它们。\"}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"showing-stale-content-while-fresh-content-is-loading\",\"children\":\"在新内容加载时展示过时内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"SearchResults\"}],\" 组件在获取搜索结果时被挂起。输入 \",[\"$r\",\"code\",null,{\"children\":\"\\\"a\\\"\"}],\"，等待结果，然后将其编辑为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"ab\\\"\"}],\"。\",[\"$r\",\"code\",null,{\"children\":\"\\\"a\\\"\"}],\" 的结果将被加载中的后备方案替换。\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState } from 'react';\\nimport SearchResults from './SearchResults.js';\\n\\nexport default function App() {\\n  const [query, setQuery] = useState('');\\n  return (\\n    <>\\n      <label>\\n        Search albums:\\n        <input value={query} onChange={e => setQuery(e.target.value)} />\\n      </label>\\n      <Suspense fallback={<h2>Loading...</h2>}>\\n        <SearchResults query={query} />\\n      </Suspense>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SearchResults.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function SearchResults({ query }) {\\n  if (query === '') {\\n    return null;\\n  }\\n  const albums = use(fetchData(`/search?q=${query}`));\\n  if (albums.length === 0) {\\n    return <p>No matches for <i>\\\"{query}\\\"</i></p>;\\n  }\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url.startsWith('/search?q=')) {\\n    return await getSearchResults(url.slice('/search?q='.length));\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getSearchResults(query) {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  const allAlbums = [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n\\n  const lowerQuery = query.trim().toLowerCase();\\n  return allAlbums.filter(album => {\\n    const lowerTitle = album.title.toLowerCase();\\n    return (\\n      lowerTitle.startsWith(lowerQuery) ||\\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\\n    )\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"94\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"一个常见的替代 UI 模式是 \",[\"$r\",\"strong\",null,{\"children\":\"延迟\"}],\" 更新列表，并在新的结果准备好之前，总是显示之前的结果。\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useDeferredValue\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}]}],\" Hook 允许你传递一个延迟版本的查询：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,11}\",\"children\":\"export default function App() {\\n  const [query, setQuery] = useState('');\\n  const deferredQuery = useDeferredValue(query);\\n  return (\\n    <>\\n      <label>\\n        Search albums:\\n        <input value={query} onChange={e => setQuery(e.target.value)} />\\n      </label>\\n      <Suspense fallback={<h2>Loading...</h2>}>\\n        <SearchResults query={deferredQuery} />\\n      </Suspense>\\n    </>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"query\"}],\" 将立即更新，所以输入框会显示新的值。然而，\",[\"$r\",\"code\",null,{\"children\":\"deferredQuery\"}],\" 将保持它之前的值，直到数据加载完成，所以 \",[\"$r\",\"code\",null,{\"children\":\"SearchResults\"}],\" 会显示过时的结果一会儿。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"为了让用户更容易理解，可以在显示过时的结果列表时添加一个视觉指示：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"<div style={{\\n  opacity: query !== deferredQuery ? 0.5 : 1 \\n}}>\\n  <SearchResults query={deferredQuery} />\\n</div>\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在下面的例子中，输入 \",[\"$r\",\"code\",null,{\"children\":\"\\\"a\\\"\"}],\"，等待结果加载，然后编辑输入为 \",[\"$r\",\"code\",null,{\"children\":\"\\\"ab\\\"\"}],\"。注意，你现在看到的不是 Suspense 的后备方案，而是暗淡的过时结果列表，直到新的结果加载完成：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState, useDeferredValue } from 'react';\\nimport SearchResults from './SearchResults.js';\\n\\nexport default function App() {\\n  const [query, setQuery] = useState('');\\n  const deferredQuery = useDeferredValue(query);\\n  const isStale = query !== deferredQuery;\\n  return (\\n    <>\\n      <label>\\n        Search albums:\\n        <input value={query} onChange={e => setQuery(e.target.value)} />\\n      </label>\\n      <Suspense fallback={<h2>Loading...</h2>}>\\n        <div style={{ opacity: isStale ? 0.5 : 1 }}>\\n          <SearchResults query={deferredQuery} />\\n        </div>\\n      </Suspense>\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/SearchResults.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function SearchResults({ query }) {\\n  if (query === '') {\\n    return null;\\n  }\\n  const albums = use(fetchData(`/search?q=${query}`));\\n  if (albums.length === 0) {\\n    return <p>No matches for <i>\\\"{query}\\\"</i></p>;\\n  }\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url.startsWith('/search?q=')) {\\n    return await getSearchResults(url.slice('/search?q='.length));\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getSearchResults(query) {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  const allAlbums = [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n\\n  const lowerQuery = query.trim().toLowerCase();\\n  return allAlbums.filter(album => {\\n    const lowerTitle = album.title.toLowerCase();\\n    return (\\n      lowerTitle.startsWith(lowerQuery) ||\\n      lowerTitle.indexOf(' ' + lowerQuery) !== -1\\n    )\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"input { margin: 10px; }\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"104\",{\"children\":[\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"延迟值和 \",[\"$r\",\"a\",null,{\"href\":\"#preventing-already-revealed-content-from-hiding\",\"children\":\"transition\"}],\" 都可以让你避免显示 Suspense 后备方案，而是使用内联指示器。transition 将整个更新标记为非紧急的，因此它们通常由框架和路由库用于导航。另一方面，延迟值在你希望将 UI 的一部分标记为非紧急，并让它“落后于” UI 的其余部分时非常有用。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"preventing-already-revealed-content-from-hiding\",\"children\":\"阻止隐藏已经显示的内容 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"当一个组件被挂起时，最近的 Suspense 边界会切换到显示后备方案。如果它已经显示了一些内容，这可能会导致令人不快的用户体验。试着按下这个按钮：\"}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState } from 'react';\\nimport IndexPage from './IndexPage.js';\\nimport ArtistPage from './ArtistPage.js';\\nimport Layout from './Layout.js';\\n\\nexport default function App() {\\n  return (\\n    <Suspense fallback={<BigSpinner />}>\\n      <Router />\\n    </Suspense>\\n  );\\n}\\n\\nfunction Router() {\\n  const [page, setPage] = useState('/');\\n\\n  function navigate(url) {\\n    setPage(url);\\n  }\\n\\n  let content;\\n  if (page === '/') {\\n    content = (\\n      <IndexPage navigate={navigate} />\\n    );\\n  } else if (page === '/the-beatles') {\\n    content = (\\n      <ArtistPage\\n        artist={{\\n          id: 'the-beatles',\\n          name: 'The Beatles',\\n        }}\\n      />\\n    );\\n  }\\n  return (\\n    <Layout>\\n      {content}\\n    </Layout>\\n  );\\n}\\n\\nfunction BigSpinner() {\\n  return <h2>🌀 Loading...</h2>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Layout.js\",\"children\":\"export default function Layout({ children }) {\\n  return (\\n    <div className=\\\"layout\\\">\\n      <section className=\\\"header\\\">\\n        Music Browser\\n      </section>\\n      <main>\\n        {children}\\n      </main>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/IndexPage.js\",\"children\":\"export default function IndexPage({ navigate }) {\\n  return (\\n    <button onClick={() => navigate('/the-beatles')}>\\n      Open The Beatles artist page\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ArtistPage.js\",\"children\":\"import { Suspense } from 'react';\\nimport Albums from './Albums.js';\\nimport Biography from './Biography.js';\\nimport Panel from './Panel.js';\\n\\nexport default function ArtistPage({ artist }) {\\n  return (\\n    <>\\n      <h1>{artist.name}</h1>\\n      <Biography artistId={artist.id} />\\n      <Suspense fallback={<AlbumsGlimmer />}>\\n        <Panel>\\n          <Albums artistId={artist.id} />\\n        </Panel>\\n      </Suspense>\\n    </>\\n  );\\n}\\n\\nfunction AlbumsGlimmer() {\\n  return (\\n    <div className=\\\"glimmer-panel\\\">\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Albums.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Albums({ artistId }) {\\n  const albums = use(fetchData(`/${artistId}/albums`));\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Biography.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Biography({ artistId }) {\\n  const bio = use(fetchData(`/${artistId}/bio`));\\n  return (\\n    <section>\\n      <p className=\\\"bio\\\">{bio}</p>\\n    </section>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Panel.js hidden\",\"children\":\"export default function Panel({ children }) {\\n  return (\\n    <section className=\\\"panel\\\">\\n      {children}\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url === '/the-beatles/albums') {\\n    return await getAlbums();\\n  } else if (url === '/the-beatles/bio') {\\n    return await getBio();\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getBio() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  return `The Beatles were an English rock band, \\n    formed in Liverpool in 1960, that comprised \\n    John Lennon, Paul McCartney, George Harrison \\n    and Ringo Starr.`;\\n}\\n\\nasync function getAlbums() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 3000);\\n  });\\n\\n  return [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"main {\\n  min-height: 200px;\\n  padding: 10px;\\n}\\n\\n.layout {\\n  border: 1px solid black;\\n}\\n\\n.header {\\n  background: #222;\\n  padding: 10px;\\n  text-align: center;\\n  color: white;\\n}\\n\\n.bio { font-style: italic; }\\n\\n.panel {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-panel {\\n  border: 1px dashed #aaa;\\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-line {\\n  display: block;\\n  width: 60%;\\n  height: 20px;\\n  margin: 10px;\\n  border-radius: 4px;\\n  background: #f0f0f0;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"114\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你按下按钮时，\",[\"$r\",\"code\",null,{\"children\":\"Router\"}],\" 组件渲染了 \",[\"$r\",\"code\",null,{\"children\":\"ArtistPage\"}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"IndexPage\"}],\"。因为 \",[\"$r\",\"code\",null,{\"children\":\"ArtistPage\"}],\" 内部的一个组件被挂起，所以最近的 Suspense 边界开始显示后备方案。最近的 Suspense 边界在根附近，所以整个站点布局被 \",[\"$r\",\"code\",null,{\"children\":\"BigSpinner\"}],\" 替换了。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了阻止这种情况，你可以使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"startTransition\"}]}],\" 将导航状态更新标记为 \",[\"$r\",\"strong\",null,{\"children\":\"transition\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5,7}\",\"children\":\"function Router() {\\n  const [page, setPage] = useState('/');\\n\\n  function navigate(url) {\\n    startTransition(() => {\\n      setPage(url);      \\n    });\\n  }\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这告诉 React 此 state transition 是不紧急的，最好继续显示上一页，而不是隐藏任何已经显示的内容。现在点击按钮并等待 \",[\"$r\",\"code\",null,{\"children\":\"Biography\"}],\" 加载：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, startTransition, useState } from 'react';\\nimport IndexPage from './IndexPage.js';\\nimport ArtistPage from './ArtistPage.js';\\nimport Layout from './Layout.js';\\n\\nexport default function App() {\\n  return (\\n    <Suspense fallback={<BigSpinner />}>\\n      <Router />\\n    </Suspense>\\n  );\\n}\\n\\nfunction Router() {\\n  const [page, setPage] = useState('/');\\n\\n  function navigate(url) {\\n    startTransition(() => {\\n      setPage(url);\\n    });\\n  }\\n\\n  let content;\\n  if (page === '/') {\\n    content = (\\n      <IndexPage navigate={navigate} />\\n    );\\n  } else if (page === '/the-beatles') {\\n    content = (\\n      <ArtistPage\\n        artist={{\\n          id: 'the-beatles',\\n          name: 'The Beatles',\\n        }}\\n      />\\n    );\\n  }\\n  return (\\n    <Layout>\\n      {content}\\n    </Layout>\\n  );\\n}\\n\\nfunction BigSpinner() {\\n  return <h2>🌀 Loading...</h2>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Layout.js\",\"children\":\"export default function Layout({ children }) {\\n  return (\\n    <div className=\\\"layout\\\">\\n      <section className=\\\"header\\\">\\n        Music Browser\\n      </section>\\n      <main>\\n        {children}\\n      </main>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/IndexPage.js\",\"children\":\"export default function IndexPage({ navigate }) {\\n  return (\\n    <button onClick={() => navigate('/the-beatles')}>\\n      Open The Beatles artist page\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ArtistPage.js\",\"children\":\"import { Suspense } from 'react';\\nimport Albums from './Albums.js';\\nimport Biography from './Biography.js';\\nimport Panel from './Panel.js';\\n\\nexport default function ArtistPage({ artist }) {\\n  return (\\n    <>\\n      <h1>{artist.name}</h1>\\n      <Biography artistId={artist.id} />\\n      <Suspense fallback={<AlbumsGlimmer />}>\\n        <Panel>\\n          <Albums artistId={artist.id} />\\n        </Panel>\\n      </Suspense>\\n    </>\\n  );\\n}\\n\\nfunction AlbumsGlimmer() {\\n  return (\\n    <div className=\\\"glimmer-panel\\\">\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Albums.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Albums({ artistId }) {\\n  const albums = use(fetchData(`/${artistId}/albums`));\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Biography.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Biography({ artistId }) {\\n  const bio = use(fetchData(`/${artistId}/bio`));\\n  return (\\n    <section>\\n      <p className=\\\"bio\\\">{bio}</p>\\n    </section>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Panel.js hidden\",\"children\":\"export default function Panel({ children }) {\\n  return (\\n    <section className=\\\"panel\\\">\\n      {children}\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url === '/the-beatles/albums') {\\n    return await getAlbums();\\n  } else if (url === '/the-beatles/bio') {\\n    return await getBio();\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getBio() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  return `The Beatles were an English rock band, \\n    formed in Liverpool in 1960, that comprised \\n    John Lennon, Paul McCartney, George Harrison \\n    and Ringo Starr.`;\\n}\\n\\nasync function getAlbums() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 3000);\\n  });\\n\\n  return [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"main {\\n  min-height: 200px;\\n  padding: 10px;\\n}\\n\\n.layout {\\n  border: 1px solid black;\\n}\\n\\n.header {\\n  background: #222;\\n  padding: 10px;\\n  text-align: center;\\n  color: white;\\n}\\n\\n.bio { font-style: italic; }\\n\\n.panel {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-panel {\\n  border: 1px dashed #aaa;\\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-line {\\n  display: block;\\n  width: 60%;\\n  height: 20px;\\n  margin: 10px;\\n  border-radius: 4px;\\n  background: #f0f0f0;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"126\",{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"transition 并不会等待 \",[\"$r\",\"strong\",null,{\"children\":\"所有\"}],\" 内容加载完成。它只会等待足够长的时间，以避免隐藏已经显示的内容。例如，网站 \",[\"$r\",\"code\",null,{\"children\":\"Layout\"}],\" 已经显示，所以将其隐藏在加载中指示器后面是不好的。然而，\",[\"$r\",\"code\",null,{\"children\":\"Albums\"}],\" 周围的嵌套 \",[\"$r\",\"code\",null,{\"children\":\"Suspense\"}],\" 边界是新出现的，所以 transition 不会等待它。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":\"启用了 Suspense 的路由在默认情况下会将导航更新包装至 transition 中。\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"indicating-that-a-transition-is-happening\",\"children\":\"表明 transition 正在发生 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在上面的例子中，当你点击按钮，没有任何视觉指示表明导航正在进行。为了添加指示器，你可以用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useTransition\"}]}],\" 替换 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"startTransition\"}]}],\"，它会给你一个布尔值 \",[\"$r\",\"code\",null,{\"children\":\"isPending\"}],\"。在下面的例子中，它被用于当 transition 发生时改变网站头部的样式：\"]}],\"\\n\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-json\",\"meta\":\"package.json hidden\",\"children\":\"{\\n  \\\"dependencies\\\": {\\n    \\\"react\\\": \\\"experimental\\\",\\n    \\\"react-dom\\\": \\\"experimental\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"start\\\": \\\"react-scripts start\\\",\\n    \\\"build\\\": \\\"react-scripts build\\\",\\n    \\\"test\\\": \\\"react-scripts test --env=jsdom\\\",\\n    \\\"eject\\\": \\\"react-scripts eject\\\"\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { Suspense, useState, useTransition } from 'react';\\nimport IndexPage from './IndexPage.js';\\nimport ArtistPage from './ArtistPage.js';\\nimport Layout from './Layout.js';\\n\\nexport default function App() {\\n  return (\\n    <Suspense fallback={<BigSpinner />}>\\n      <Router />\\n    </Suspense>\\n  );\\n}\\n\\nfunction Router() {\\n  const [page, setPage] = useState('/');\\n  const [isPending, startTransition] = useTransition();\\n\\n  function navigate(url) {\\n    startTransition(() => {\\n      setPage(url);\\n    });\\n  }\\n\\n  let content;\\n  if (page === '/') {\\n    content = (\\n      <IndexPage navigate={navigate} />\\n    );\\n  } else if (page === '/the-beatles') {\\n    content = (\\n      <ArtistPage\\n        artist={{\\n          id: 'the-beatles',\\n          name: 'The Beatles',\\n        }}\\n      />\\n    );\\n  }\\n  return (\\n    <Layout isPending={isPending}>\\n      {content}\\n    </Layout>\\n  );\\n}\\n\\nfunction BigSpinner() {\\n  return <h2>🌀 Loading...</h2>;\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Layout.js\",\"children\":\"export default function Layout({ children, isPending }) {\\n  return (\\n    <div className=\\\"layout\\\">\\n      <section className=\\\"header\\\" style={{\\n        opacity: isPending ? 0.7 : 1\\n      }}>\\n        Music Browser\\n      </section>\\n      <main>\\n        {children}\\n      </main>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/IndexPage.js\",\"children\":\"export default function IndexPage({ navigate }) {\\n  return (\\n    <button onClick={() => navigate('/the-beatles')}>\\n      Open The Beatles artist page\\n    </button>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/ArtistPage.js\",\"children\":\"import { Suspense } from 'react';\\nimport Albums from './Albums.js';\\nimport Biography from './Biography.js';\\nimport Panel from './Panel.js';\\n\\nexport default function ArtistPage({ artist }) {\\n  return (\\n    <>\\n      <h1>{artist.name}</h1>\\n      <Biography artistId={artist.id} />\\n      <Suspense fallback={<AlbumsGlimmer />}>\\n        <Panel>\\n          <Albums artistId={artist.id} />\\n        </Panel>\\n      </Suspense>\\n    </>\\n  );\\n}\\n\\nfunction AlbumsGlimmer() {\\n  return (\\n    <div className=\\\"glimmer-panel\\\">\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n      <div className=\\\"glimmer-line\\\" />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Albums.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Albums({ artistId }) {\\n  const albums = use(fetchData(`/${artistId}/albums`));\\n  return (\\n    <ul>\\n      {albums.map(album => (\\n        <li key={album.id}>\\n          {album.title} ({album.year})\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Biography.js hidden\",\"children\":\"import { fetchData } from './data.js';\\n\\n// 注意：这个组件使用了一个实验性的 API\\n// 该 API 并未在 React 的稳定版本中可用\\n\\n// 对于一个现实的例子，你可以尝试一个\\n// 与 Suspense 集成的框架，例如 Relay 或 Next.js。\\n\\nexport default function Biography({ artistId }) {\\n  const bio = use(fetchData(`/${artistId}/bio`));\\n  return (\\n    <section>\\n      <p className=\\\"bio\\\">{bio}</p>\\n    </section>\\n  );\\n}\\n\\n// 这是一个解决 bug 的临时方案，以便让演示运行起来。\\n// TODO：当 bug 修复后，用真正的实现替换。\\nfunction use(promise) {\\n  if (promise.status === 'fulfilled') {\\n    return promise.value;\\n  } else if (promise.status === 'rejected') {\\n    throw promise.reason;\\n  } else if (promise.status === 'pending') {\\n    throw promise;\\n  } else {\\n    promise.status = 'pending';\\n    promise.then(\\n      result => {\\n        promise.status = 'fulfilled';\\n        promise.value = result;\\n      },\\n      reason => {\\n        promise.status = 'rejected';\\n        promise.reason = reason;\\n      },      \\n    );\\n    throw promise;\\n  }\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/Panel.js hidden\",\"children\":\"export default function Panel({ children }) {\\n  return (\\n    <section className=\\\"panel\\\">\\n      {children}\\n    </section>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/data.js hidden\",\"children\":\"// 注意：你进行数据获取的方式取决于\\n// 你与 Suspense 集成的框架。\\n// 通常，缓存逻辑会在框架内部。\\n\\nlet cache = new Map();\\n\\nexport function fetchData(url) {\\n  if (!cache.has(url)) {\\n    cache.set(url, getData(url));\\n  }\\n  return cache.get(url);\\n}\\n\\nasync function getData(url) {\\n  if (url === '/the-beatles/albums') {\\n    return await getAlbums();\\n  } else if (url === '/the-beatles/bio') {\\n    return await getBio();\\n  } else {\\n    throw Error('Not implemented');\\n  }\\n}\\n\\nasync function getBio() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 500);\\n  });\\n\\n  return `The Beatles were an English rock band, \\n    formed in Liverpool in 1960, that comprised \\n    John Lennon, Paul McCartney, George Harrison \\n    and Ringo Starr.`;\\n}\\n\\nasync function getAlbums() {\\n  // 添加一个假的延迟，以便让等待更加明显。\\n  await new Promise(resolve => {\\n    setTimeout(resolve, 3000);\\n  });\\n\\n  return [{\\n    id: 13,\\n    title: 'Let It Be',\\n    year: 1970\\n  }, {\\n    id: 12,\\n    title: 'Abbey Road',\\n    year: 1969\\n  }, {\\n    id: 11,\\n    title: 'Yellow Submarine',\\n    year: 1969\\n  }, {\\n    id: 10,\\n    title: 'The Beatles',\\n    year: 1968\\n  }, {\\n    id: 9,\\n    title: 'Magical Mystery Tour',\\n    year: 1967\\n  }, {\\n    id: 8,\\n    title: 'Sgt. Pepper\\\\'s Lonely Hearts Club Band',\\n    year: 1967\\n  }, {\\n    id: 7,\\n    title: 'Revolver',\\n    year: 1966\\n  }, {\\n    id: 6,\\n    title: 'Rubber Soul',\\n    year: 1965\\n  }, {\\n    id: 5,\\n    title: 'Help!',\\n    year: 1965\\n  }, {\\n    id: 4,\\n    title: 'Beatles For Sale',\\n    year: 1964\\n  }, {\\n    id: 3,\\n    title: 'A Hard Day\\\\'s Night',\\n    year: 1964\\n  }, {\\n    id: 2,\\n    title: 'With The Beatles',\\n    year: 1963\\n  }, {\\n    id: 1,\\n    title: 'Please Please Me',\\n    year: 1963\\n  }];\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"main {\\n  min-height: 200px;\\n  padding: 10px;\\n}\\n\\n.layout {\\n  border: 1px solid black;\\n}\\n\\n.header {\\n  background: #222;\\n  padding: 10px;\\n  text-align: center;\\n  color: white;\\n}\\n\\n.bio { font-style: italic; }\\n\\n.panel {\\n  border: 1px solid #aaa;\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-panel {\\n  border: 1px dashed #aaa;\\n  background: linear-gradient(90deg, rgba(221,221,221,1) 0%, rgba(255,255,255,1) 100%);\\n  border-radius: 6px;\\n  margin-top: 20px;\\n  padding: 10px;\\n}\\n\\n.glimmer-line {\\n  display: block;\\n  width: 60%;\\n  height: 20px;\\n  margin: 10px;\\n  border-radius: 4px;\\n  background: #f0f0f0;\\n}\\n\"}]}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"resetting-suspense-boundaries-on-navigation\",\"children\":\"在导航时重置 Suspense 边界 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 transition 发生时，React 将避免隐藏已经显示的内容。但是，如果你导航到具有不同参数的路由，你可能想告诉 React 它是 \",[\"$r\",\"strong\",null,{\"children\":\"不同\"}],\" 的内容。你可以用 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\" 表示这一点：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<ProfilePage key={queryParams.id} />\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"想想在用户的个人资料页面中导航，然后暂停了。如果更新被包装在 transition 中，它将不会触发已经可见内容的后备方案。这是预期的行为。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然而，现在想象一下你在两个不同的用户资料之间导航。在这种情况下，显示后备方案是有意义的。例如，一个用户的时间线是与另一个用户的时间线是 \",[\"$r\",\"strong\",null,{\"children\":\"不同的内容\"}],\"。通过指定一个 \",[\"$r\",\"code\",null,{\"children\":\"key\"}],\"，你可以确保 React 将不同用户的个人资料视为不同的组件，并在导航期间重置 Suspense 边界。集成 Suspense 的路由应该自动执行此操作。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"providing-a-fallback-for-server-errors-and-client-only-content\",\"children\":\"为服务器错误和客户端内容提供后备方案 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你使用过 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react-dom/server\",\"children\":\"流式服务器渲染 API\"}],\"（或依赖它们的框架），React 也会使用你的 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界来处理服务器上的错误。如果组件在服务器上抛出错误，React 将不会中止服务器渲染。相反，它将找到最接近的 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 组件并将其后备方案（例如一个加载中指示器）包含到生成的服务端 HTML 中。用户将首先看到一个加载中指示器。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在客户端，React 将尝试再次渲染相同的组件。如果它在客户端也出错，React 将抛出错误并显示最接近的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/Component#static-getderivedstatefromerror\",\"children\":\"错误边界\"}],\"。然而，如果它在客户端没有错误，React 将不会向用户显示错误，因为内容最终成功显示了。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你可以使用这个来防止一些组件在服务端渲染。为此，你应该在服务器环境中抛出一个错误，然后将其包装在一个 \",[\"$r\",\"code\",null,{\"children\":\"<Suspense>\"}],\" 边界中，从而使用后备方案替换它们的 HTML：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"<Suspense fallback={<Loading />}>\\n  <Chat />\\n</Suspense>\\n\\nfunction Chat() {\\n  if (typeof window === 'undefined') {\\n    throw Error('Chat should only render on the client.');\\n  }\\n  // ……\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"服务端 HTML 将包含加载中指示器。它将被客户端上的 \",[\"$r\",\"code\",null,{\"children\":\"Chat\"}],\" 组件替换。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"故障排除 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"preventing-unwanted-fallbacks\",\"children\":\"如何阻止 UI 在更新期间被后备方案替换 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"使用后备方案替换一个可见的 UI 会带来令人不快的用户体验。当一个更新导致一个组件被挂起时，而最近的 Suspense 边界已经向用户显示了内容时，这种情况可能发生。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为了防止这种情况发生，\",[\"$r\",\"a\",null,{\"href\":\"#preventing-already-revealed-content-from-hiding\",\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"startTransition\"}],\" 将更新标记为非紧急的\"]}],\"。在 transition 期间，React 将等待足够的数据加载，以防止不需要的后备方案出现：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3,5}\",\"children\":\"function handleNextPageClick() {\\n  // 如果此更新被挂起，不会隐藏已经展示的内容\\n  startTransition(() => {\\n    setCurrentPage(currentPage + 1);\\n  });\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这将避免隐藏现有内容。然而，任何新渲染的 \",[\"$r\",\"code\",null,{\"children\":\"Suspense\"}],\" 边界仍然会立即显示后备方案，以避免阻塞 UI 并让用户在内容可用时看到内容。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"React 只会在非紧急更新期间阻止不必要的后备方案\"}],\"。这意味着它不会阻止紧急更新的 fallback。你必须使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"startTransition\"}]}],\" 或 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useDeferredValue\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useDeferredValue\"}]}],\" 这样的 API 来选择性的优化。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你的路由集成了 Suspense，它将会自动将更新包装到 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/startTransition\",\"children\":[\"$r\",\"code\",null,{\"children\":\"startTransition\"}]}],\" 中。\"]}]]}]]","meta":{"title":"<Suspense>"}},"__N_SSG":true}