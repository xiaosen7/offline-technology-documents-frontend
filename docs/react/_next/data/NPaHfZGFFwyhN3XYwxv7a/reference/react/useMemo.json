{"pageProps":{"toc":"[{\"url\":\"#\",\"text\":\"概览\",\"depth\":2},{\"url\":\"#reference\",\"depth\":2,\"text\":\"参考 \"},{\"url\":\"#usememo\",\"depth\":3,\"text\":[[\"$r\",\"code\",null,{\"children\":\"useMemo(calculateValue, dependencies)\"}],\" \"]},{\"url\":\"#usage\",\"depth\":2,\"text\":\"用法 \"},{\"url\":\"#skipping-expensive-recalculations\",\"depth\":3,\"text\":\"跳过代价昂贵的重新计算 \"},{\"url\":\"#skipping-re-rendering-of-components\",\"depth\":3,\"text\":\"跳过组件的重新渲染 \"},{\"url\":\"#memoizing-a-dependency-of-another-hook\",\"depth\":3,\"text\":\"记忆另一个 Hook 的依赖 \"},{\"url\":\"#memoizing-a-function\",\"depth\":3,\"text\":\"记忆一个函数 \"},{\"url\":\"#troubleshooting\",\"depth\":2,\"text\":\"故障排除 \"},{\"url\":\"#my-calculation-runs-twice-on-every-re-render\",\"depth\":3,\"text\":\"每次重新渲染时计算函数都会运行两次 \"},{\"url\":\"#my-usememo-call-is-supposed-to-return-an-object-but-returns-undefined\",\"depth\":3,\"text\":[\"我调用的 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 应该返回一个对象，但返回了 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" \"]},{\"url\":\"#every-time-my-component-renders-the-calculation-in-usememo-re-runs\",\"depth\":3,\"text\":[\"组件每次渲染时，\",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 都会重新计算 \"]},{\"url\":\"#i-need-to-call-usememo-for-each-list-item-in-a-loop-but-its-not-allowed\",\"depth\":3,\"text\":[\"我需要为循环中的每个列表项调用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\"，但这是不允许的 \"]}]","content":"[[\"$r\",\"MaxWidth\",\"68\",{\"children\":[[\"$r\",\"Intro\",null,{\"children\":[[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 是一个 React Hook，它在每次重新渲染的时候能够缓存计算的结果。\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"const cachedValue = useMemo(calculateValue, dependencies)\\n\"}]}]]}],\"\\n\",[\"$r\",\"InlineToc\",null,{}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"reference\",\"children\":\"参考 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"usememo\",\"children\":[[\"$r\",\"code\",null,{\"children\":\"useMemo(calculateValue, dependencies)\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件的顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 来缓存每次重新渲染都需要计算的结果。\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"import { useMemo } from 'react';\\n\\nfunction TodoList({ todos, tab }) {\\n  const visibleTodos = useMemo(\\n    () => filterTodos(todos, tab),\\n    [todos, tab]\\n  );\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"a\",null,{\"href\":\"#usage\",\"children\":\"参见下面更多示例\"}],\"。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"parameters\",\"children\":\"参数 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"calculateValue\"}],\"：要缓存计算值的函数。它应该是一个没有任何参数的纯函数，并且可以返回任意类型。React 将会在首次渲染时调用该函数；在之后的渲染中，如果 \",[\"$r\",\"code\",null,{\"children\":\"dependencies\"}],\" 没有发生变化，React 将直接返回相同值。否则，将会再次调用 \",[\"$r\",\"code\",null,{\"children\":\"calculateValue\"}],\" 并返回最新结果，然后缓存该结果以便下次重复使用。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"dependencies\"}],\"：所有在 \",[\"$r\",\"code\",null,{\"children\":\"calculateValue\"}],\" 函数中使用的响应式变量组成的数组。响应式变量包括 props、state 和所有你直接在组件中定义的变量和函数。如果你在代码检查工具中 \",[\"$r\",\"a\",null,{\"href\":\"/learn/editor-setup#linting\",\"children\":\"配置了 React\"}],\"，它将会确保每一个响应式数据都被正确地定义为依赖项。依赖项数组的长度必须是固定的并且必须写成 \",[\"$r\",\"code\",null,{\"children\":\"[dep1, dep2, dep3]\"}],\" 这种形式。React 使用 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Object.is\"}]}],\" 将每个依赖项与其之前的值进行比较。\"]}],\"\\n\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"returns\",\"children\":\"返回值 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在初次渲染时，\",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 返回不带参数调用 \",[\"$r\",\"code\",null,{\"children\":\"calculateValue\"}],\" 的结果。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在接下来的渲染中，如果依赖项没有发生改变，它将返回上次缓存的值；否则将再次调用 \",[\"$r\",\"code\",null,{\"children\":\"calculateValue\"}],\"，并返回最新结果。\"]}],\"\\n\",[\"$r\",\"h4\",null,{\"id\":\"caveats\",\"children\":\"注意 \"}],\"\\n\",[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 是一个 React Hook，所以你只能 \",[\"$r\",\"strong\",null,{\"children\":\"在组件的顶层\"}],\" 或者自定义 Hook 中调用它。你不能在循环语句或条件语句中调用它。如有需要，将其提取为一个新组件并使用 state。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"在严格模式下，为了 \",[\"$r\",\"a\",null,{\"href\":\"#my-calculation-runs-twice-on-every-re-render\",\"children\":\"帮你发现意外的错误\"}],\"，React 将会 \",[\"$r\",\"strong\",null,{\"children\":\"调用你的计算函数两次\"}],\"。这只是一个开发环境下的行为，并不会影响到生产环境。如果计算函数是一个纯函数（它本来就应该是），这将不会影响到代码逻辑。其中一次的调用结果将被忽略。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"除非有特定原因，React \",[\"$r\",\"strong\",null,{\"children\":\"不会丢弃缓存值\"}],\"。例如，在开发过程中，React 会在你编辑组件文件时丢弃缓存。无论是在开发环境还是在生产环境，如果你的组件在初始挂载期间被终止，React 都会丢弃缓存。在未来，React 可能会添加更多利用丢弃缓存的特性——例如，如果 React 在未来增加了对虚拟化列表的内置支持，那么丢弃那些滚出虚拟化列表视口的缓存是有意义的。你可以仅仅依赖 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 作为性能优化手段。否则，使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useState#avoiding-recreating-the-initial-state\",\"children\":\"state 变量\"}],\" 或者 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useRef#avoiding-recreating-the-ref-contents\",\"children\":\"ref\"}],\" 可能更加合适。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[\"这种缓存返回值的方式也叫做 \",[\"$r\",\"a\",null,{\"href\":\"https://en.wikipedia.org/wiki/Memoization\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"记忆化（memoization）\"}],\"，这也是该 Hook 叫做 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 的原因。\"]}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"usage\",\"children\":\"用法 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"skipping-expensive-recalculations\",\"children\":\"跳过代价昂贵的重新计算 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在组件顶层调用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 以在重新渲染之间缓存计算结果：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"[[3, 4, \\\"visibleTodos\\\"], [1, 4, \\\"() => filterTodos(todos, tab)\\\"], [2, 4, \\\"[todos, tab]\\\"]]\",\"children\":\"import { useMemo } from 'react';\\n\\nfunction TodoList({ todos, tab, theme }) {\\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你需要给 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 传递两样东西：\"]}],\"\\n\",[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"一个没有任何参数的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"calculation 函数\"}],\"，像这样 \",[\"$r\",\"code\",null,{\"children\":\"() =>\"}],\"，并且返回任何你想要的计算结果。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"一个由包含在你的组件中并在 calculation 中使用的所有值组成的 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"依赖列表\"}],\"。\"]}],\"\\n\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在初次渲染时，你从 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 得到的 \",[\"$r\",\"CodeStep\",null,{\"step\":3,\"children\":\"值\"}],\" 将会是你的 \",[\"$r\",\"CodeStep\",null,{\"step\":1,\"children\":\"calculation\"}],\" 函数执行的结果。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在随后的每一次渲染中，React 将会比较前后两次渲染中的 \",[\"$r\",\"CodeStep\",null,{\"step\":2,\"children\":\"所有依赖项\"}],\" 是否相同。如果通过 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":[\"$r\",\"code\",null,{\"children\":\"Object.is\"}]}],\" 比较所有依赖项都没有发生变化，那么 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 将会返回之前已经计算过的那个值。否则，React 将会重新执行 calculation 函数并且返回一个新的值。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"换言之，\",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 在多次重新渲染中缓存了 calculation 函数计算的结果直到依赖项的值发生变化。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"让我们通过一个示例来看看这在什么情况下是有用的\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"默认情况下，React 会在每次重新渲染时重新运行整个组件。例如，如果 \",[\"$r\",\"code\",null,{\"children\":\"TodoList\"}],\" 更新了 state 或从父组件接收到新的 props，\",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\" 函数将会重新运行：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"function TodoList({ todos, tab, theme }) {\\n  const visibleTodos = filterTodos(todos, tab);\\n  // ...\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果计算速度很快，这将不会产生问题。但是，当正在过滤转换一个大型数组，或者进行一些昂贵的计算，而数据没有改变，那么可能希望跳过这些重复计算。如果 \",[\"$r\",\"code\",null,{\"children\":\"todos\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"tab\"}],\" 都与上次渲染时相同，那么像之前那样将计算函数包装在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中，便可以重用已经计算过的 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这种缓存行为叫做 \",[\"$r\",\"a\",null,{\"href\":\"https://en.wikipedia.org/wiki/Memoization\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"记忆化\"}],\"。\"]}],\"\\n\",[\"$r\",\"Note\",null,{\"children\":[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"你应该仅仅把 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 作为性能优化的手段\"]}],\"。如果没有它，你的代码就不能正常工作，那么请先找到潜在的问题并修复它。然后再添加 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 以提高性能。\"]}]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"how-to-tell-if-a-calculation-is-expensive\",\"children\":\"如何衡量计算过程的开销是否昂贵？ \"}],[\"$r\",\"p\",null,{\"children\":\"一般来说，除非要创建或循环遍历数千个对象，否则开销可能并不大。如果你想获得更详细的信息，可以在控制台来测量花费这上面的时间：\"}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1,3}\",\"children\":\"console.time('filter array');\\nconst visibleTodos = filterTodos(todos, tab);\\nconsole.timeEnd('filter array');\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"然后执行你正在监测的交互（例如，在输入框中输入文字）。你将会在控制台看到如下的日志 \",[\"$r\",\"code\",null,{\"children\":\"filter array: 0.15ms\"}],\"。如果全部记录的时间加起来很长（\",[\"$r\",\"code\",null,{\"children\":\"1ms\"}],\" 或者更多），那么记忆此计算结果是有意义的。作为对比，你可以将计算过程包裹在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中，以验证该交互的总日志时间是否减少了：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"console.time('filter array');\\nconst visibleTodos = useMemo(() => {\\n  return filterTodos(todos, tab); // 如果 todos 和 tab 都没有变化，那么将会跳过渲染。\\n}, [todos, tab]);\\nconsole.timeEnd('filter array');\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 不会让首次渲染更快，它只会帮助你跳过不必要的更新工作。\"]}],[\"$r\",\"p\",null,{\"children\":[\"请记住，你的开发设备可能比用户的设备性能更强大，因此最好人为降低当前浏览器性能来测试。例如，Chrome 提供了 \",[\"$r\",\"a\",null,{\"href\":\"https://developer.chrome.com/blog/new-in-devtools-61/#throttling\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"CPU Throttling\"}],\" 选项来降低浏览器性能。\"]}],[\"$r\",\"p\",null,{\"children\":[\"另外，请注意，在开发环境中测量性能无法为你提供最准确的结果（例如，当开启 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/StrictMode\",\"children\":\"严格模式\"}],\" 时，你会看到每个组件渲染两次而不是一次）。要获得最准确的时间，请构建用于生产的应用程序并在用户使用的设备上对其进行测试。\"]}]]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"should-you-add-usememo-everywhere\",\"children\":\"你应该在所有地方添加 useMemo 吗？ \"}],[\"$r\",\"p\",null,{\"children\":\"如果你的应用程序类似于此站点，并且大多数交互都很粗糙（例如替换页面或整个章节），则通常不需要使用记忆化。反之，如果你的应用程序更像是绘图编辑器，并且大多数交互都是颗粒状的（如移动形状），那么你可能会发现记忆化非常有用。\"}],[\"$r\",\"p\",null,{\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 进行优化仅在少数情况下有价值：\"]}],[\"$r\",\"ul\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中进行的计算明显很慢，而且它的依赖关系很少改变。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"将计算结果作为 props 传递给包裹在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中的组件。当计算结果没有改变时，你会想跳过重新渲染。记忆化让组件仅在依赖项不同时才重新渲染。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"你传递的值稍后用作某些 Hook 的依赖项。例如，也许另一个 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 计算值依赖它，或者 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useEffect\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useEffect\"}]}],\" 依赖这个值。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"在其他情况下，将计算过程包装在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中没有任何好处。不过这样做也没有重大危害，所以一些团队选择不考虑具体情况，尽可能多地使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\"。不过这种做法会降低代码可读性。此外，并不是所有 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 的使用都是有效的：一个“永远是新的”的单一值就足以破坏整个组件的记忆化效果。\"]}],[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"在实践中，你可以通过遵循一些原则来避免 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 的滥用\"]}],\"：\"]}],[\"$r\",\"ol\",null,{\"children\":[\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"当一个组件在视觉上包裹其他组件时，让它 \",[\"$r\",\"a\",null,{\"href\":\"/learn/passing-props-to-a-component#passing-jsx-as-children\",\"children\":\"将 JSX 作为子组件传递\"}],\"。这样，当包装器组件更新自己的 state 时，React 知道它的子组件不需要重新渲染。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"首选本地 state，非必要不进行 \",[\"$r\",\"a\",null,{\"href\":\"/learn/sharing-state-between-components\",\"children\":\"状态提升\"}],\"。例如，不要保持像表单、组件是否悬停在组件树顶部这样的瞬时状态。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"保持你的 \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"渲染逻辑纯粹\"}],\"。如果重新渲染组件会导致一些问题或产生一些明显的视觉错误，那么它就是组件中的错误！修复错误而不是使用记忆化。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"避免 \",[\"$r\",\"a\",null,{\"href\":\"/learn/you-might-not-need-an-effect\",\"children\":\"不必要地更新 state 的 Effect\"}],\"。React 应用程序中的大多数性能问题都是由 Effect 创造的更新链引起的，这些更新链导致组件反复重新渲染。\"]}],\"\\n\",[\"$r\",\"li\",null,{\"children\":[\"尽力 \",[\"$r\",\"a\",null,{\"href\":\"/learn/removing-effect-dependencies\",\"children\":\"从 Effect 中移除不必要的依赖项\"}],\"。例如, 相比于记忆化，在 Effect 内部或组件外部移动某些对象或函数通常更简单。\"]}],\"\\n\"]}],[\"$r\",\"p\",null,{\"children\":[\"如果某个特定的交互仍然感觉滞后，\",[\"$r\",\"a\",null,{\"href\":\"https://legacy.reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"使用 React 开发者工具分析器\"}],\" 查看哪些组件将从记忆化中获益最多，并在需要的地方添加记忆化。这些原则使你的组件更易于调试和理解，因此在任何情况下都应该遵循它们。从长远来看，我们正在研究 \",[\"$r\",\"a\",null,{\"href\":\"https://www.youtube.com/watch?v=lGEMwh32soc\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"自动进行粒度记忆\"}],\" 以一劳永逸地解决这个问题。\"]}]]}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"使用 useMemo 和直接计算之间的区别\",\"titleId\":\"examples-recalculation\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"skipping-recalculation-with-usememo\",\"children\":[\"使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 跳过重复计算 \"]}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\" 的执行被 \",[\"$r\",\"strong\",null,{\"children\":\"人为减速了\"}],\"，这样就可以看到渲染期间调用的某些函数确实很慢时会发生什么。尝试切换选项卡并切换主题。\"]}],[\"$r\",\"p\",null,{\"children\":[\"切换选项卡会感觉很慢，因为它迫使减速的 \",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\" 重新执行。这是预料之中的效果，因为“选项卡”已更改，因此整个计算 \",[\"$r\",\"strong\",null,{\"children\":\"需要\"}],\" 重新运行。如果你好奇为什么它会运行两次，\",[\"$r\",\"a\",null,{\"href\":\"#my-calculation-runs-twice-on-every-re-render\",\"children\":\"此处\"}],\" 对此进行了解释。\"]}],[\"$r\",\"p\",null,{\"children\":[\"然后试试切换主题。\",[\"$r\",\"strong\",null,{\"children\":[\"在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 的帮助下，尽管已经被人为减速，但是它还是很快\"]}],\"！缓慢的 \",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\" 调用被跳过，因为 \",[\"$r\",\"code\",null,{\"children\":\"todos\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"tab\"}],\"（你将其作为依赖项传递给 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\"）自上次渲染以来都没有改变。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { createTodos } from './utils.js';\\nimport TodoList from './TodoList.js';\\n\\nconst todos = createTodos();\\n\\nexport default function App() {\\n  const [tab, setTab] = useState('all');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setTab('all')}>\\n        All\\n      </button>\\n      <button onClick={() => setTab('active')}>\\n        Active\\n      </button>\\n      <button onClick={() => setTab('completed')}>\\n        Completed\\n      </button>\\n      <br />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Dark mode\\n      </label>\\n      <hr />\\n      <TodoList\\n        todos={todos}\\n        tab={tab}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TodoList.js active\",\"children\":\"import { useMemo } from 'react';\\nimport { filterTodos } from './utils.js'\\n\\nexport default function TodoList({ todos, theme, tab }) {\\n  const visibleTodos = useMemo(\\n    () => filterTodos(todos, tab),\\n    [todos, tab]\\n  );\\n  return (\\n    <div className={theme}>\\n      <p><b>Note: <code>filterTodos</code> is artificially slowed down!</b></p>\\n      <ul>\\n        {visibleTodos.map(todo => (\\n          <li key={todo.id}>\\n            {todo.completed ?\\n              <s>{todo.text}</s> :\\n              todo.text\\n            }\\n          </li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/utils.js\",\"children\":\"export function createTodos() {\\n  const todos = [];\\n  for (let i = 0; i < 50; i++) {\\n    todos.push({\\n      id: i,\\n      text: \\\"Todo \\\" + (i + 1),\\n      completed: Math.random() > 0.5\\n    });\\n  }\\n  return todos;\\n}\\n\\nexport function filterTodos(todos, tab) {\\n  console.log('[ARTIFICIALLY SLOW] Filtering ' + todos.length + ' todos for \\\"' + tab + '\\\" tab.');\\n  let startTime = performance.now();\\n  while (performance.now() - startTime < 500) {\\n    // 在 500 毫秒内不执行任何操作以模拟极慢的代码\\n  }\\n\\n  return todos.filter(todo => {\\n    if (tab === 'all') {\\n      return true;\\n    } else if (tab === 'active') {\\n      return !todo.completed;\\n    } else if (tab === 'completed') {\\n      return todo.completed;\\n    }\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.dark {\\n  background-color: black;\\n  color: white;\\n}\\n\\n.light {\\n  background-color: white;\\n  color: black;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"always-recalculating-a-value\",\"children\":\"始终重新计算 \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\" 的执行也被 \",[\"$r\",\"strong\",null,{\"children\":\"人为减慢了\"}],\"，这样就可以看到渲染期间调用的某些函数确实很慢时会发生什么。尝试切换选项卡并切换主题。\"]}],[\"$r\",\"p\",null,{\"children\":[\"与前面的示例不同，现在切换主题也很慢！这是因为 \",[\"$r\",\"strong\",null,{\"children\":[\"此版本没有调用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}]]}],\"，因此每次重新渲染都会调用人为减速的 \",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\"。即使只有 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 发生了变化，它也会被调用。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { createTodos } from './utils.js';\\nimport TodoList from './TodoList.js';\\n\\nconst todos = createTodos();\\n\\nexport default function App() {\\n  const [tab, setTab] = useState('all');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setTab('all')}>\\n        All\\n      </button>\\n      <button onClick={() => setTab('active')}>\\n        Active\\n      </button>\\n      <button onClick={() => setTab('completed')}>\\n        Completed\\n      </button>\\n      <br />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Dark mode\\n      </label>\\n      <hr />\\n      <TodoList\\n        todos={todos}\\n        tab={tab}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TodoList.js active\",\"children\":\"import { filterTodos } from './utils.js'\\n\\nexport default function TodoList({ todos, theme, tab }) {\\n  const visibleTodos = filterTodos(todos, tab);\\n  return (\\n    <div className={theme}>\\n      <ul>\\n        <p><b>Note: <code>filterTodos</code> is artificially slowed down!</b></p>\\n        {visibleTodos.map(todo => (\\n          <li key={todo.id}>\\n            {todo.completed ?\\n              <s>{todo.text}</s> :\\n              todo.text\\n            }\\n          </li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/utils.js\",\"children\":\"export function createTodos() {\\n  const todos = [];\\n  for (let i = 0; i < 50; i++) {\\n    todos.push({\\n      id: i,\\n      text: \\\"Todo \\\" + (i + 1),\\n      completed: Math.random() > 0.5\\n    });\\n  }\\n  return todos;\\n}\\n\\nexport function filterTodos(todos, tab) {\\n  console.log('[ARTIFICIALLY SLOW] Filtering ' + todos.length + ' todos for \\\"' + tab + '\\\" tab.');\\n  let startTime = performance.now();\\n  while (performance.now() - startTime < 500) {\\n    // 在 500 毫秒内什么都不做以模拟极其缓慢的代码\\n  }\\n\\n  return todos.filter(todo => {\\n    if (tab === 'all') {\\n      return true;\\n    } else if (tab === 'active') {\\n      return !todo.completed;\\n    } else if (tab === 'completed') {\\n      return todo.completed;\\n    }\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.dark {\\n  background-color: black;\\n  color: white;\\n}\\n\\n.light {\\n  background-color: white;\\n  color: black;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"然而，这是 \",[\"$r\",\"strong\",null,{\"children\":\"删除了人为减速后\"}],\" 的相同代码。此时你应该能感觉缺少 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 后效果差异非常明显。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { createTodos } from './utils.js';\\nimport TodoList from './TodoList.js';\\n\\nconst todos = createTodos();\\n\\nexport default function App() {\\n  const [tab, setTab] = useState('all');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setTab('all')}>\\n        All\\n      </button>\\n      <button onClick={() => setTab('active')}>\\n        Active\\n      </button>\\n      <button onClick={() => setTab('completed')}>\\n        Completed\\n      </button>\\n      <br />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Dark mode\\n      </label>\\n      <hr />\\n      <TodoList\\n        todos={todos}\\n        tab={tab}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TodoList.js active\",\"children\":\"import { filterTodos } from './utils.js'\\n\\nexport default function TodoList({ todos, theme, tab }) {\\n  const visibleTodos = filterTodos(todos, tab);\\n  return (\\n    <div className={theme}>\\n      <ul>\\n        {visibleTodos.map(todo => (\\n          <li key={todo.id}>\\n            {todo.completed ?\\n              <s>{todo.text}</s> :\\n              todo.text\\n            }\\n          </li>\\n        ))}\\n      </ul>\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/utils.js\",\"children\":\"export function createTodos() {\\n  const todos = [];\\n  for (let i = 0; i < 50; i++) {\\n    todos.push({\\n      id: i,\\n      text: \\\"Todo \\\" + (i + 1),\\n      completed: Math.random() > 0.5\\n    });\\n  }\\n  return todos;\\n}\\n\\nexport function filterTodos(todos, tab) {\\n  console.log('Filtering ' + todos.length + ' todos for \\\"' + tab + '\\\" tab.');\\n\\n  return todos.filter(todo => {\\n    if (tab === 'all') {\\n      return true;\\n    } else if (tab === 'active') {\\n      return !todo.completed;\\n    } else if (tab === 'completed') {\\n      return todo.completed;\\n    }\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.dark {\\n  background-color: black;\\n  color: white;\\n}\\n\\n.light {\\n  background-color: white;\\n  color: black;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"很多时候，没有使用记忆化的代码可以正常工作。如果你的交互速度足够快，你可能不需要记忆化。\"}],[\"$r\",\"p\",null,{\"children\":[\"你可以尝试增加 \",[\"$r\",\"code\",null,{\"children\":\"utils.js\"}],\" 中待办事项的数量，看看有什么变化。这个特定的计算一开始并不是很昂贵，但如果待办事项的数量显著增加，大部分开销将用于重新渲染而不是过滤。继续阅读下文，了解如何使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 优化重新渲染。\"]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"96\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"skipping-re-rendering-of-components\",\"children\":\"跳过组件的重新渲染 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在某些情况下，\",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 还可以帮助你优化重新渲染子组件的性能。为了说明这一点，假设这个 \",[\"$r\",\"code\",null,{\"children\":\"TodoList\"}],\" 组件将 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\" 作为 props 传递给子 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5}\",\"children\":\"export default function TodoList({ todos, tab, theme }) {\\n  // ...\\n  return (\\n    <div className={theme}>\\n      <List items={visibleTodos} />\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"你已经注意到切换 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 属性会使应用程序冻结片刻，但是如果你从 JSX 中删除 \",[\"$r\",\"code\",null,{\"children\":\"<List />\"}],\"，感觉会很快。这说明尝试优化 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件是值得的。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":\"默认情况下，当一个组件重新渲染时，React 会递归地重新渲染它的所有子组件\"}],\"。这就是为什么当 \",[\"$r\",\"code\",null,{\"children\":\"TodoList\"}],\" 使用不同的 \",[\"$r\",\"code\",null,{\"children\":\"theme\"}],\" 重新渲染时，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件 \",[\"$r\",\"strong\",null,{\"children\":\"也会\"}],\" 重新渲染。这对于不需要太多计算来重新渲染的组件来说很好。但是如果你已经确认重新渲染很慢，你可以通过将它包装在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中，这样当它的 props 跟上一次渲染相同的时候它就会跳过本次渲染：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,5}\",\"children\":\"import { memo } from 'react';\\n\\nconst List = memo(function List({ items }) {\\n  // ...\\n});\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"通过此更改，如果 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 的所有 props 都与上次渲染时相同，则 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 将跳过重新渲染\"]}],\"。这就是缓存计算变得重要的地方！想象一下，你在没有 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 的情况下计算了 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3,6-7}\",\"children\":\"export default function TodoList({ todos, tab, theme }) {\\n  // 每当主题发生变化时，这将是一个不同的数组……\\n  const visibleTodos = filterTodos(todos, tab);\\n  return (\\n    <div className={theme}>\\n      {/* ... 所以List的props永远不会一样，每次都会重新渲染 */}\\n      <List items={visibleTodos} />\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"在上面的示例中，\",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\" 函数总是创建一个不同数组\"]}],\"，类似于 \",[\"$r\",\"code\",null,{\"children\":\"{}\"}],\" 总是创建一个新对象的方式。通常，这不是问题，但这意味着 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 属性永远不会相同，并且你的 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 优化将不起作用。这就是 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 派上用场的地方：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3,5,9-10}\",\"children\":\"export default function TodoList({ todos, tab, theme }) {\\n  // 告诉 React 在重新渲染之间缓存你的计算结果...\\n  const visibleTodos = useMemo(\\n    () => filterTodos(todos, tab),\\n    [todos, tab] // ...所以只要这些依赖项不变...\\n  );\\n  return (\\n    <div className={theme}>\\n      {/* ... List 也就会接受到相同的 props 并且会跳过重新渲染 */}\\n      <List items={visibleTodos} />\\n    </div>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[[\"$r\",\"strong\",null,{\"children\":[\"通过将 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\" 的计算函数包裹在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中，你可以确保它在重新渲染之间具有相同值\"]}],\"，直到依赖项发生变化。你 \",[\"$r\",\"strong\",null,{\"children\":\"不必\"}],\" 将计算函数包裹在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中，除非你出于某些特定原因这样做。在此示例中，这样做的原因是你将它传递给包裹在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中的组件，这使得它可以跳过重新渲染。添加 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 的其他一些原因将在本页进一步描述。\"]}],\"\\n\",[\"$r\",\"DeepDive\",null,{\"children\":[[\"$r\",\"h4\",null,{\"id\":\"memoizing-individual-jsx-nodes\",\"children\":\"记忆单个 JSX 节点 \"}],[\"$r\",\"p\",null,{\"children\":[\"你可以将 \",[\"$r\",\"code\",null,{\"children\":\"<List />\"}],\" JSX 节点本身包裹在 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中，而不是将 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 包裹在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中：\"]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,6}\",\"children\":\"export default function TodoList({ todos, tab, theme }) {\\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\\n  const children = useMemo(() => <List items={visibleTodos} />, [visibleTodos]);\\n  return (\\n    <div className={theme}>\\n      {children}\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"p\",null,{\"children\":[\"他们的行为表现是一致的。如果 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\" 没有改变，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 将不会重新渲染。\"]}],[\"$r\",\"p\",null,{\"children\":[\"像 \",[\"$r\",\"code\",null,{\"children\":\"<List items={visibleTodos} />\"}],\" 这样的 JSX 节点是一个类似 \",[\"$r\",\"code\",null,{\"children\":\"{ type: List, props: { items: visibleTodos } }\"}],\" 的对象。创建这个对象的开销很低，但是 React 不知道它的内容是否和上次一样。这就是为什么默认情况下，React 会重新渲染 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件。\"]}],[\"$r\",\"p\",null,{\"children\":[\"但是，如果 React 发现其与之前渲染的 JSX 是完全相同的，它不会尝试重新渲染你的组件。这是因为 JSX 节点是 \",[\"$r\",\"a\",null,{\"href\":\"https://en.wikipedia.org/wiki/Immutable_object\",\"target\":\"_blank\",\"rel\":\"nofollow noopener noreferrer\",\"children\":\"不可变的（immutable）\"}],\"。JSX 节点对象不可能随时间改变，因此 React 知道跳过重新渲染是安全的。然而，为了使其工作，节点必须 \",[\"$r\",\"strong\",null,{\"children\":\"实际上是同一个对象\"}],\"，而不仅仅是在代码中看起来相同。这就是 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 在此示例中所做的。\"]}],[\"$r\",\"p\",null,{\"children\":[\"手动将 JSX 节点包裹到 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 中并不方便，比如你不能在条件语句中这样做。这就是为什么通常会选择使用 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 包装组件而不是使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 包装 JSX 节点。\"]}]]}],\"\\n\"]}],[\"$r\",\"Recipes\",null,{\"titleText\":\"跳过重新渲染和总是重新渲染之间的区别\",\"titleId\":\"examples-rerendering\",\"children\":[[\"$r\",\"h4\",null,{\"id\":\"skipping-re-rendering-with-usememo-and-memo\",\"children\":[\"用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 和 \",[\"$r\",\"code\",null,{\"children\":\"memo\"}],\" 跳过重新渲染 \"]}],[\"$r\",\"p\",null,{\"children\":[\"在此示例中，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件被 \",[\"$r\",\"strong\",null,{\"children\":\"人为地减速了\"}],\"，以便可以看到当渲染的 React 组件真正变慢时会发生什么。尝试切换选项卡并切换主题。\"]}],[\"$r\",\"p\",null,{\"children\":[\"切换选项卡感觉很慢，因为它迫使减速的 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 重新渲染。这是预料之中的，因为选项卡 \",[\"$r\",\"code\",null,{\"children\":\"tab\"}],\" 已更改，因此你需要在屏幕上展示用户的新选择。\"]}],[\"$r\",\"p\",null,{\"children\":[\"接下来，尝试切换主题。\",[\"$r\",\"strong\",null,{\"children\":[\"感谢 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\"，尽管被人为减速了，但是它还是很快\"]}],\"！由于作为依赖性传递给 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 的 \",[\"$r\",\"code\",null,{\"children\":\"todos\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"tab\"}],\" 都没有发生改变，因此 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\" 不会发生改变。由于 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\" 数组从上一次渲染之后就没有发生改变，所以 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 会跳过重新渲染。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { createTodos } from './utils.js';\\nimport TodoList from './TodoList.js';\\n\\nconst todos = createTodos();\\n\\nexport default function App() {\\n  const [tab, setTab] = useState('all');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setTab('all')}>\\n        All\\n      </button>\\n      <button onClick={() => setTab('active')}>\\n        Active\\n      </button>\\n      <button onClick={() => setTab('completed')}>\\n        Completed\\n      </button>\\n      <br />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Dark mode\\n      </label>\\n      <hr />\\n      <TodoList\\n        todos={todos}\\n        tab={tab}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TodoList.js active\",\"children\":\"import { useMemo } from 'react';\\nimport List from './List.js';\\nimport { filterTodos } from './utils.js'\\n\\nexport default function TodoList({ todos, theme, tab }) {\\n  const visibleTodos = useMemo(\\n    () => filterTodos(todos, tab),\\n    [todos, tab]\\n  );\\n  return (\\n    <div className={theme}>\\n      <p><b>Note: <code>List</code> is artificially slowed down!</b></p>\\n      <List items={visibleTodos} />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js\",\"children\":\"import { memo } from 'react';\\n\\nconst List = memo(function List({ items }) {\\n  console.log('[ARTIFICIALLY SLOW] Rendering <List /> with ' + items.length + ' items');\\n  let startTime = performance.now();\\n  while (performance.now() - startTime < 500) {\\n    // 在 500 毫秒内不执行任何操作以模拟极慢的代码\\n  }\\n\\n  return (\\n    <ul>\\n      {items.map(item => (\\n        <li key={item.id}>\\n          {item.completed ?\\n            <s>{item.text}</s> :\\n            item.text\\n          }\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n});\\n\\nexport default List;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/utils.js\",\"children\":\"export function createTodos() {\\n  const todos = [];\\n  for (let i = 0; i < 50; i++) {\\n    todos.push({\\n      id: i,\\n      text: \\\"Todo \\\" + (i + 1),\\n      completed: Math.random() > 0.5\\n    });\\n  }\\n  return todos;\\n}\\n\\nexport function filterTodos(todos, tab) {\\n  return todos.filter(todo => {\\n    if (tab === 'all') {\\n      return true;\\n    } else if (tab === 'active') {\\n      return !todo.completed;\\n    } else if (tab === 'completed') {\\n      return todo.completed;\\n    }\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.dark {\\n  background-color: black;\\n  color: white;\\n}\\n\\n.light {\\n  background-color: white;\\n  color: black;\\n}\\n\"}]}]]}],[\"$r\",\"Solution\",null,{}],[\"$r\",\"h4\",null,{\"id\":\"always-re-rendering-a-component\",\"children\":\"总是重新渲染一个组件 \"}],[\"$r\",\"p\",null,{\"children\":[\"在这个例子中，\",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 的实现也被 \",[\"$r\",\"strong\",null,{\"children\":\"人为地减慢了\"}],\"，这样就可以看到当渲染的某些 React 组件真的很慢时会发生什么。尝试切换选项卡并切换主题。\"]}],[\"$r\",\"p\",null,{\"children\":[\"与前面的示例不同，现在切换主题也很慢！这是因为 \",[\"$r\",\"strong\",null,{\"children\":[\"此版本中没有使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}]]}],\"，所以 \",[\"$r\",\"code\",null,{\"children\":\"visibleTodos\"}],\" 始终是一个不同的数组，并且速度变慢的 \",[\"$r\",\"code\",null,{\"children\":\"List\"}],\" 组件无法跳过重新渲染。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { createTodos } from './utils.js';\\nimport TodoList from './TodoList.js';\\n\\nconst todos = createTodos();\\n\\nexport default function App() {\\n  const [tab, setTab] = useState('all');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setTab('all')}>\\n        All\\n      </button>\\n      <button onClick={() => setTab('active')}>\\n        Active\\n      </button>\\n      <button onClick={() => setTab('completed')}>\\n        Completed\\n      </button>\\n      <br />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Dark mode\\n      </label>\\n      <hr />\\n      <TodoList\\n        todos={todos}\\n        tab={tab}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TodoList.js active\",\"children\":\"import List from './List.js';\\nimport { filterTodos } from './utils.js'\\n\\nexport default function TodoList({ todos, theme, tab }) {\\n  const visibleTodos = filterTodos(todos, tab);\\n  return (\\n    <div className={theme}>\\n      <p><b>Note: <code>List</code> is artificially slowed down!</b></p>\\n      <List items={visibleTodos} />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js\",\"children\":\"import { memo } from 'react';\\n\\nconst List = memo(function List({ items }) {\\n  console.log('[ARTIFICIALLY SLOW] Rendering <List /> with ' + items.length + ' items');\\n  let startTime = performance.now();\\n  while (performance.now() - startTime < 500) {\\n    // 在 500 毫秒内不执行任何操作以模拟极慢的代码\\n  }\\n\\n  return (\\n    <ul>\\n      {items.map(item => (\\n        <li key={item.id}>\\n          {item.completed ?\\n            <s>{item.text}</s> :\\n            item.text\\n          }\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n});\\n\\nexport default List;\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/utils.js\",\"children\":\"export function createTodos() {\\n  const todos = [];\\n  for (let i = 0; i < 50; i++) {\\n    todos.push({\\n      id: i,\\n      text: \\\"Todo \\\" + (i + 1),\\n      completed: Math.random() > 0.5\\n    });\\n  }\\n  return todos;\\n}\\n\\nexport function filterTodos(todos, tab) {\\n  return todos.filter(todo => {\\n    if (tab === 'all') {\\n      return true;\\n    } else if (tab === 'active') {\\n      return !todo.completed;\\n    } else if (tab === 'completed') {\\n      return todo.completed;\\n    }\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.dark {\\n  background-color: black;\\n  color: white;\\n}\\n\\n.light {\\n  background-color: white;\\n  color: black;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":[\"然而，这是 \",[\"$r\",\"strong\",null,{\"children\":\"删除了人为减速后\"}],\" 的相同代码。此时你应该能感觉到缺少 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 后效果差异非常明显。\"]}],[\"$r\",\"Sandpack\",null,{\"children\":[[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/App.js\",\"children\":\"import { useState } from 'react';\\nimport { createTodos } from './utils.js';\\nimport TodoList from './TodoList.js';\\n\\nconst todos = createTodos();\\n\\nexport default function App() {\\n  const [tab, setTab] = useState('all');\\n  const [isDark, setIsDark] = useState(false);\\n  return (\\n    <>\\n      <button onClick={() => setTab('all')}>\\n        All\\n      </button>\\n      <button onClick={() => setTab('active')}>\\n        Active\\n      </button>\\n      <button onClick={() => setTab('completed')}>\\n        Completed\\n      </button>\\n      <br />\\n      <label>\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={isDark}\\n          onChange={e => setIsDark(e.target.checked)}\\n        />\\n        Dark mode\\n      </label>\\n      <hr />\\n      <TodoList\\n        todos={todos}\\n        tab={tab}\\n        theme={isDark ? 'dark' : 'light'}\\n      />\\n    </>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/TodoList.js active\",\"children\":\"import List from './List.js';\\nimport { filterTodos } from './utils.js'\\n\\nexport default function TodoList({ todos, theme, tab }) {\\n  const visibleTodos = filterTodos(todos, tab);\\n  return (\\n    <div className={theme}>\\n      <List items={visibleTodos} />\\n    </div>\\n  );\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/List.js\",\"children\":\"import { memo } from 'react';\\n\\nfunction List({ items }) {\\n  return (\\n    <ul>\\n      {items.map(item => (\\n        <li key={item.id}>\\n          {item.completed ?\\n            <s>{item.text}</s> :\\n            item.text\\n          }\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nexport default memo(List);\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"src/utils.js\",\"children\":\"export function createTodos() {\\n  const todos = [];\\n  for (let i = 0; i < 50; i++) {\\n    todos.push({\\n      id: i,\\n      text: \\\"Todo \\\" + (i + 1),\\n      completed: Math.random() > 0.5\\n    });\\n  }\\n  return todos;\\n}\\n\\nexport function filterTodos(todos, tab) {\\n  return todos.filter(todo => {\\n    if (tab === 'all') {\\n      return true;\\n    } else if (tab === 'active') {\\n      return !todo.completed;\\n    } else if (tab === 'completed') {\\n      return todo.completed;\\n    }\\n  });\\n}\\n\"}]}],[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-css\",\"children\":\"label {\\n  display: block;\\n  margin-top: 10px;\\n}\\n\\n.dark {\\n  background-color: black;\\n  color: white;\\n}\\n\\n.light {\\n  background-color: white;\\n  color: black;\\n}\\n\"}]}]]}],[\"$r\",\"p\",null,{\"children\":\"很多时候，没有记忆化的代码可以正常工作。如果你的交互足够快，则不需要记忆化。\"}],[\"$r\",\"p\",null,{\"children\":[\"请记住，在生产环境下运行 React 进行测试，并且禁用 \",[\"$r\",\"a\",null,{\"href\":\"/learn/react-developer-tools\",\"children\":\"React 开发者工具\"}],\"，并准备好与使用你应用程序的用户类似的设备，这样可以对你的应用程序性能有一个更加准确的判断。\"]}],[\"$r\",\"Solution\",null,{}]]}],[\"$r\",\"MaxWidth\",\"last\",{\"children\":[\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"memoizing-a-dependency-of-another-hook\",\"children\":\"记忆另一个 Hook 的依赖 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"假设你有一个计算函数依赖于直接在组件主体中创建的对象：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2}\",\"children\":\"function Dropdown({ allItems, text }) {\\n  const searchOptions = { matchMode: 'whole-word', text };\\n\\n  const visibleItems = useMemo(() => {\\n    return searchItems(allItems, searchOptions);\\n  }, [allItems, searchOptions]); // 🚩 提醒：依赖于在组件主体中创建的对象\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"依赖这样的对象会破坏记忆化。当组件重新渲染时，组件主体内的所有代码都会再次运行。\",[\"$r\",\"strong\",null,{\"children\":[\"创建 \",[\"$r\",\"code\",null,{\"children\":\"searchOptions\"}],\" 对象的代码行也将在每次重新渲染时运行\"]}],\"。因为 \",[\"$r\",\"code\",null,{\"children\":\"searchOptions\"}],\" 是你的 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 调用的依赖项，而且每次都不一样，React 知道依赖项是不同的，并且每次都重新计算 \",[\"$r\",\"code\",null,{\"children\":\"searchItems\"}],\"。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要解决此问题，你可以在将其作为依赖项传递之前记忆 \",[\"$r\",\"code\",null,{\"children\":\"searchOptions\"}],\" 对象 \",[\"$r\",\"strong\",null,{\"children\":\"本身\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-4}\",\"children\":\"function Dropdown({ allItems, text }) {\\n  const searchOptions = useMemo(() => {\\n    return { matchMode: 'whole-word', text };\\n  }, [text]); // ✅ 只有当 text 改变时才会发生改变\\n\\n  const visibleItems = useMemo(() => {\\n    return searchItems(allItems, searchOptions);\\n  }, [allItems, searchOptions]); // ✅ 只有当 allItems 或 serachOptions 改变时才会发生改变\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在上面的例子中，如果 \",[\"$r\",\"code\",null,{\"children\":\"text\"}],\" 没有改变，\",[\"$r\",\"code\",null,{\"children\":\"searchOptions\"}],\" 对象也不会改变。然而，更好的解决方法是将 \",[\"$r\",\"code\",null,{\"children\":\"searchOptions\"}],\" 对象声明移到 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 计算函数的 \",[\"$r\",\"strong\",null,{\"children\":\"内部\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3}\",\"children\":\"function Dropdown({ allItems, text }) {\\n  const visibleItems = useMemo(() => {\\n    const searchOptions = { matchMode: 'whole-word', text };\\n    return searchItems(allItems, searchOptions);\\n  }, [allItems, text]); // ✅ 只有当 allItems 或者 text 改变的时候才会重新计算\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"现在你的计算直接取决于 \",[\"$r\",\"code\",null,{\"children\":\"text\"}],\"（这是一个字符串，不会“意外地”变得不同）。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"memoizing-a-function\",\"children\":\"记忆一个函数 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设 \",[\"$r\",\"code\",null,{\"children\":\"Form\"}],\" 组件被包裹在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中，你想将一个函数作为 props 传递给它：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-7}\",\"children\":\"export default function ProductPage({ productId, referrer }) {\\n  function handleSubmit(orderDetails) {\\n    post('/product/' + productId + '/buy', {\\n      referrer,\\n      orderDetails\\n    });\\n  }\\n\\n  return <Form onSubmit={handleSubmit} />;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"正如 \",[\"$r\",\"code\",null,{\"children\":\"{}\"}],\" 每次都会创建不同的对象一样，像 \",[\"$r\",\"code\",null,{\"children\":\"function() {}\"}],\" 这样的函数声明和像 \",[\"$r\",\"code\",null,{\"children\":\"() => {}\"}],\" 这样的表达式在每次重新渲染时都会产生一个 \",[\"$r\",\"strong\",null,{\"children\":\"不同\"}],\" 的函数。就其本身而言，创建一个新函数不是问题。这不是可以避免的事情！但是，如果 \",[\"$r\",\"code\",null,{\"children\":\"Form\"}],\" 组件被记忆了，大概你想在没有 props 改变时跳过它的重新渲染。\",[\"$r\",\"strong\",null,{\"children\":\"总是\"}],\" 不同的 props 会破坏你的记忆化。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"要使用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 记忆函数，你的计算函数必须返回另一个函数：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3,8-9}\",\"children\":\"export default function Page({ productId, referrer }) {\\n  const handleSubmit = useMemo(() => {\\n    return (orderDetails) => {\\n      post('/product/' + productId + '/buy', {\\n        referrer,\\n        orderDetails\\n      });\\n    };\\n  }, [productId, referrer]);\\n\\n  return <Form onSubmit={handleSubmit} />;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这看起来很笨拙！\",[\"$r\",\"strong\",null,{\"children\":[\"记忆函数很常见，React 有一个专门用于此的内置 Hook。将你的函数包装到 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useCallback\",\"children\":[\"$r\",\"code\",null,{\"children\":\"useCallback\"}]}],\" 而不是 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}]]}],\" 中，以避免编写额外的嵌套函数：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,7}\",\"children\":\"export default function Page({ productId, referrer }) {\\n  const handleSubmit = useCallback((orderDetails) => {\\n    post('/product/' + productId + '/buy', {\\n      referrer,\\n      orderDetails\\n    });\\n  }, [productId, referrer]);\\n\\n  return <Form onSubmit={handleSubmit} />;\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"上面两个例子是完全等价的。\",[\"$r\",\"code\",null,{\"children\":\"useCallback\"}],\" 的唯一好处是它可以让你避免在内部编写额外的嵌套函数。它没有做任何其他事情。\",[\"$r\",\"a\",null,{\"href\":\"/reference/react/useCallback\",\"children\":[\"阅读更多关于 \",[\"$r\",\"code\",null,{\"children\":\"useCallback\"}],\" 的内容\"]}],\"。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h2\",null,{\"id\":\"troubleshooting\",\"children\":\"故障排除 \"}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-calculation-runs-twice-on-every-re-render\",\"children\":\"每次重新渲染时计算函数都会运行两次 \"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/StrictMode\",\"children\":\"严格模式\"}],\" 中，React 将调用你的某些函数两次而不是一次：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2,5,6}\",\"children\":\"function TodoList({ todos, tab }) {\\n  // 此组件函数将为每个渲染运行两次。\\n\\n  const visibleTodos = useMemo(() => {\\n    // 如果任何依赖项发生更改，此计算将运行两次。\\n    return filterTodos(todos, tab);\\n  }, [todos, tab]);\\n\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这是符合预期的，不应对你的代码逻辑产生影响。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"这种 \",[\"$r\",\"strong\",null,{\"children\":\"仅限开发环境下的\"}],\" 行为可帮助你 \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"保持组件纯粹\"}],\"。React 使用其中一次调用的结果，而忽略另一次的结果。只要你的组件和计算函数是纯函数，这就不会影响你的逻辑。但是，如果你不小心写出带有副作用的代码，这可以帮助你发现并纠正错误。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"例如，这个不纯的计算函数会改变你作为 props 收到的数组：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"  const visibleTodos = useMemo(() => {\\n    // 🚩 错误：改变了 props\\n    todos.push({ id: 'last', text: 'Go for a walk!' });\\n    const filtered = filterTodos(todos, tab);\\n    return filtered;\\n  }, [todos, tab]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"React 调用你的函数两次，所以你会注意到 todo 被添加了两次。你的计算不应更改任何现有对象，但可以更改你在计算期间创建的任何 \",[\"$r\",\"strong\",null,{\"children\":\"新\"}],\" 对象。例如，如果 \",[\"$r\",\"code\",null,{\"children\":\"filterTodos\"}],\" 函数总是返回一个 \",[\"$r\",\"strong\",null,{\"children\":\"不同\"}],\" 数组，你可以改为改变 \",[\"$r\",\"strong\",null,{\"children\":\"那个\"}],\" 数组：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{3,4}\",\"children\":\"  const visibleTodos = useMemo(() => {\\n    const filtered = filterTodos(todos, tab);\\n    // ✅ 正确：改变在计算过程中创建的对象\\n    filtered.push({ id: 'last', text: 'Go for a walk!' });\\n    return filtered;\\n  }, [todos, tab]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"阅读 \",[\"$r\",\"a\",null,{\"href\":\"/learn/keeping-components-pure\",\"children\":\"保持组件纯粹\"}],\" 以了解有关纯组件的更多信息。\"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"此外，请查看有关不通过对象或者数组的可变性直接 \",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-objects-in-state\",\"children\":\"更新对象\"}],\" 和 \",[\"$r\",\"a\",null,{\"href\":\"/learn/updating-arrays-in-state\",\"children\":\"更新数组\"}],\" 的指南。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"my-usememo-call-is-supposed-to-return-an-object-but-returns-undefined\",\"children\":[\"我调用的 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 应该返回一个对象，但返回了 \",[\"$r\",\"code\",null,{\"children\":\"undefined\"}],\" \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这段代码不起作用：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-2,5}\",\"children\":\"  // 🔴 你不能像这样 `() => {` 在箭头函数中直接返回一个对象\\n  const searchOptions = useMemo(() => {\\n    matchMode: 'whole-word',\\n    text: text\\n  }, [text]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"在 JavaScript 中，\",[\"$r\",\"code\",null,{\"children\":\"() => {\"}],\" 是箭头函数体的开始标志，因此 \",[\"$r\",\"code\",null,{\"children\":\"{\"}],\" 大括号不是对象的一部分。这就是它不返回对象并导致错误的原因。你可以通过添加像 \",[\"$r\",\"code\",null,{\"children\":\"({\"}],\" 与 \",[\"$r\",\"code\",null,{\"children\":\"})\"}],\" 这样的括号来修复它：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-2,5}\",\"children\":\"  // 这行得通，但很容易有人再次破坏\\n  const searchOptions = useMemo(() => ({\\n    matchMode: 'whole-word',\\n    text: text\\n  }), [text]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"然而，这仍然令人困惑，而且对于某些人来说，通过移除括号来破坏它太容易了。\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"为避免此错误，请显式编写 \",[\"$r\",\"code\",null,{\"children\":\"return\"}],\" 语句：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{1-3,6-7}\",\"children\":\"  // ✅ 这有效并且是明确的\\n  const searchOptions = useMemo(() => {\\n    return {\\n      matchMode: 'whole-word',\\n      text: text\\n    };\\n  }, [text]);\\n\"}]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"every-time-my-component-renders-the-calculation-in-usememo-re-runs\",\"children\":[\"组件每次渲染时，\",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 都会重新计算 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"确保你已将依赖项数组指定为第二个参数！\"}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"如果你忘记了依赖数组，\",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 将每次重新运行计算：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"function TodoList({ todos, tab }) {\\n  // 🔴 每次都重新计算：没有依赖数组\\n  const visibleTodos = useMemo(() => filterTodos(todos, tab));\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"这是将依赖项数组作为第二个参数传递的更正版本：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{2-3}\",\"children\":\"function TodoList({ todos, tab }) {\\n  // ✅ 不会不必要地重新计算\\n  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\\n  // ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"如果这没有帮助，那么问题是你的至少一个依赖项与之前的渲染不同。你可以通过手动将依赖项记录到控制台来调试此问题：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);\\n  console.log([todos, tab]);\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"然后，你可以在控制台中右键单击来自不同重新渲染的数组，并为它们选择“存储为全局变量”。假设第一个保存为 \",[\"$r\",\"code\",null,{\"children\":\"temp1\"}],\"，第二个保存为 \",[\"$r\",\"code\",null,{\"children\":\"temp2\"}],\"，然后你可以使用浏览器控制台检查两个数组中的每个依赖项是否相同：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"children\":\"Object.is(temp1[0], temp2[0]); // 数组之间的第一个依赖项是否相同？\\nObject.is(temp1[1], temp2[1]); // 数组之间的第二个依赖项是否相同？\\nObject.is(temp1[2], temp2[2]); // ... 依此类推 ...\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"当你发现是哪个依赖项破坏了记忆化时，要么找到一种方法将其删除，要么 \",[\"$r\",\"a\",null,{\"href\":\"#memoizing-a-dependency-of-another-hook\",\"children\":\"也对其进行记忆化\"}],\"。\"]}],\"\\n\",[\"$r\",\"hr\",null,{}],\"\\n\",[\"$r\",\"h3\",null,{\"id\":\"i-need-to-call-usememo-for-each-list-item-in-a-loop-but-its-not-allowed\",\"children\":[\"我需要为循环中的每个列表项调用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\"，但这是不允许的 \"]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"假设 \",[\"$r\",\"code\",null,{\"children\":\"Chart\"}],\" 组件被包裹在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中。当 \",[\"$r\",\"code\",null,{\"children\":\"ReportList\"}],\" 组件重新渲染时，你想跳过重新渲染列表中的每个 \",[\"$r\",\"code\",null,{\"children\":\"Chart\"}],\"。但是，你不能在循环中调用 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\"：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5-11}\",\"children\":\"function ReportList({ items }) {\\n  return (\\n    <article>\\n      {items.map(item => {\\n        // 🔴 你不能像这样在循环中调用 useMemo：\\n        const data = useMemo(() => calculateReport(item), [item]);\\n        return (\\n          <figure key={item.id}>\\n            <Chart data={data} />\\n          </figure>\\n        );\\n      })}\\n    </article>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":\"相反，为每个 item 提取一个组件并为单个 item 记忆数据：\"}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5,12-18}\",\"children\":\"function ReportList({ items }) {\\n  return (\\n    <article>\\n      {items.map(item =>\\n        <Report key={item.id} item={item} />\\n      )}\\n    </article>\\n  );\\n}\\n\\nfunction Report({ item }) {\\n  // ✅ 在顶层调用 useMemo：\\n  const data = useMemo(() => calculateReport(item), [item]);\\n  return (\\n    <figure>\\n      <Chart data={data} />\\n    </figure>\\n  );\\n}\\n\"}]}],\"\\n\",[\"$r\",\"p\",null,{\"children\":[\"或者，你可以删除 \",[\"$r\",\"code\",null,{\"children\":\"useMemo\"}],\" 并将 \",[\"$r\",\"code\",null,{\"children\":\"Report\"}],\" 本身包装在 \",[\"$r\",\"a\",null,{\"href\":\"/reference/react/memo\",\"children\":[\"$r\",\"code\",null,{\"children\":\"memo\"}]}],\" 中。如果 \",[\"$r\",\"code\",null,{\"children\":\"item\"}],\" props 没有改变，\",[\"$r\",\"code\",null,{\"children\":\"Report\"}],\" 将跳过重新渲染，因此 \",[\"$r\",\"code\",null,{\"children\":\"Chart\"}],\" 也会跳过重新渲染：\"]}],\"\\n\",[\"$r\",\"pre\",null,{\"children\":[\"$r\",\"code\",null,{\"className\":\"language-js\",\"meta\":\"{5,6,12}\",\"children\":\"function ReportList({ items }) {\\n  // ...\\n}\\n\\nconst Report = memo(function Report({ item }) {\\n  const data = calculateReport(item);\\n  return (\\n    <figure>\\n      <Chart data={data} />\\n    </figure>\\n  );\\n});\\n\"}]}]]}]]","meta":{"title":"useMemo"}},"__N_SSG":true}